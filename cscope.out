cscope 15 $HOME/mempool/rose               0000521315
	@apps/main.c

4 
	~<RosX.h
>

6 
idÀ_èsk
();

7 
èsk_1
();

8 
èsk_2
();

9 
èsk_3
();

11 
RX_TASK
 
	gidÀ_tcb
;

12 
RX_TASK
 
	gèsk_1_tcb
;

13 
RX_TASK
 
	gèsk_2_tcb
;

14 
RX_TASK
 
	gèsk_3_tcb
;

16 
	s¥iv
 {

17 
timî_li°
 *
	mtimî
;

20 
timî_ˇŒback
(*);

22 
	$timî_ˇŒback
(*
¥iv
)

24 
¥iv
 *
my_¥iv
 =Öriv;

26 
	`¥_öfo
("receivedÅimer call-back\n");

27 
	`rx_mod_timî
(
my_¥iv
->
timî
, 6);

28 
	}
}

30 
sy°em_úq
(
úq_num
, *
a
);

33 
	$≠∂iˇti⁄_öô
()

36 
	`rx_¸óã_èsk
(&
idÀ_tcb
,"idÀ", 
RX_TASK_LEAST_PRIO
, 0, 8192, 
idÀ_èsk
, 
RX_TASK_READY
, 0);

37 
	`rx_¸óã_èsk
(&
èsk_1_tcb
,"èsk1", 1, 0, 8192, 
èsk_1
, 
RX_TASK_READY
, 0);

38 
	`rx_¸óã_èsk
(&
èsk_2_tcb
,"èsk2", 2, 0, 8192, 
èsk_2
, 
RX_TASK_READY
, 0);

39 
	`rx_¸óã_èsk
(&
èsk_3_tcb
,"èsk3", 3, 0, 8192, 
èsk_3
, 
RX_TASK_READY
, 0);

40 
	`rx_sched
();

41 
	}
}

43 
	$èsk_3
()

45 
cou¡
 = 0;

46 
	`¥_öfo
("EnterÅask_3\n");

48 
	`rx_s¶ìp
(3);

49 
cou¡
 ++;

50 
	`¥_öfo
("èsk_3 %d\n", 
cou¡
);

52 
	}
}

54 
	$èsk_2
()

56 
cou¡
 = 0;

57 
	`¥_öfo
("EnterÅask_2\n");

59 
	`rx_s¶ìp
(9);

60 
cou¡
 ++;

61 
	`¥_öfo
("èsk_2 %d\n", 
cou¡
);

63 
	}
}

65 
	$èsk_1
()

67 
timî_li°
 
timî
;

68 
¥iv
 
my_¥iv
;

70 
	`¥_öfo
("EnterÅask_1\n");

71 if(
OS_OK
 !
	`rx_¸óã_timî
(&
timî
, 
timî_ˇŒback
, &
my_¥iv
, 5)) {

72 
	`¥_∑nic
("task_1:Ñx_create_timer failed");

75 
my_¥iv
.
timî
 = &timer;

77 
	`rx_°¨t_timî
(&
timî
);

78 
	`¥_öfo
("Timer started\n");

80 
	`rx_su•íd_èsk
(
MYSELF
);

85 
	}
}

87 
	$idÀ_èsk
()

89 
a
 = 100000;

90 
b
 = 200000;

91 
c
 = 0;

95 
c
 = 
a
 + 
b
;

97 
	}
}

	@apps/rx_defines.h

18 #i‚de‡
__ROSE_DEFINES_H__


19 
	#__ROSE_DEFINES_H__


	)

21 
	~<asm/öãºu±.h
>

23 
	#CONFIG_STACK_ALLOC_DYNAMIC


	)

24 
	#CONFIG_SYSTEM_STACK_SIZE
 (8192 * 10)

	)

27 
	#CONFIG_PRINT_BUFFER


	)

28 #ifde‡
CONFIG_PRINT_BUFFER


29 
	#CONFIG_PRINT_BUFFER_SIZE
 1024

	)

33 
	#CONFIG_HZ
 100

	)

34 
	#CONFIG_KERNEL_PREEMPT


	)

35 
	#CONFIG_PRIO_INHERITANCE


	)

39 
	#CONFIG_SEMAPHORE


	)

41 
	#CONFIG_MUTEX


	)

43 
	#CONFIG_EVENTS


	)

44 
	#CONFIG_SYS_EVENT_QUEUE_BLOCKS
 8

	)

46 
	#CONFIG_TIMERS


	)

47 
	#CONFIG_TIMER_DEFAULT_STACK_SIZE
 512

	)

49 
	#CONFIG_MAX_TASK
 32

	)

50 
	#CONFIG_TASK_STR_LEN
 8

	)

51 
	#CONFIG_TIME_SLICE


	)

53 
	#CONFIG_IRQS
 
__CONFIG_IRQS


	)

54 
	#CONFIG_IRQ_COUNT
 
__CONFIG_IRQ_COUNT


	)

57 
	#CONFIG_BYTEPOOL


	)

58 
	#CONFIG_BYTEPOOL_SIZE
 2048

	)

59 
	#CONFIG_4_BYTES_BLOCK
 31

	)

60 
	#CONFIG_8_BYTES_BLOCK
 10

	)

61 
	#CONFIG_16_BYTES_BLOCK
 10

	)

62 
	#CONFIG_32_BYTES_BLOCK
 5

	)

63 
	#CONFIG_64_BYTES_BLOCK
 5

	)

64 
	#CONFIG_128_BYTES_BLOCK
 0

	)

65 
	#CONFIG_256_BYTES_BLOCK
 0

	)

66 
	#CONFIG_512_BYTES_BLOCK
 0

	)

67 
	#CONFIG_1024_BYTES_BLOCK
 0

	)

68 
	#CONFIG_2048_BYTES_BLOCK
 0

	)

69 
	#CONFIG_4096_BYTES_BLOCK
 0

	)

72 
	#CONFIG_MAX_DEVICE_DESC
 5

	)

73 
	#CONFIG_SERIAL
 "simx86"

	)

76 
	#PRINT_INFO


	)

77 
	#PRINT_DEBUG


	)

78 
	#PRINT_ERROR


	)

	@arch/arm/include/arm.h

1 #i‚de‡ 
_ARM_H_


2 
	#_ARM_H_


	)

7 
	#ARM_MODE_USR
 0x10

	)

8 
	#ARM_MODE_FIQ
 0x11

	)

9 
	#ARM_MODE_IRQ
 0x12

	)

10 
	#ARM_MODE_SVC
 0x13

	)

11 
	#ARM_MODE_ABT
 0x17

	)

12 
	#ARM_MODE_UND
 0x1B

	)

13 
	#ARM_MODE_SYS
 0x1F

	)

18 
	#ARM_I_BIT
 0x80

	)

19 
	#ARM_F_BIT
 0x40

	)

	@arch/arm/include/asm/linkage.h

1 #i‚de‡
__ASM_LINKAGE_H


2 
	#__ASM_LINKAGE_H


	)

4 
	#__ALIGN
 .
Æign
 0

	)

5 
	#__ALIGN_STR
 ".Æig¿0"

	)

	@arch/arm/irq_mapping.h

18 #i‚de‡
__IRQ_MAPPING_H__


19 
	#__IRQ_MAPPING_H__


	)

21 
	#TIMER0_INT
 0

	)

	@arch/arm/lib/div0.c

25 
	~<Ro£RTOS.h
>

26 
	$__div0
 ()

28 
	`¥_∑nic
("### ERROR ### Please RESETÅhe board ###\n");

29 
	}
}

	@arch/arm/osport.c

17 
	~"o•‹t.h
"

18 
	~<RosX.h
>

21 
	$rx_exô_¸ôiˇl
 (
key
)

23 if(
__c⁄ãxt
 || !(
__¸ôiˇl
))

27 
__¸ôiˇl
 = 0;

28 
	}
}

31 
	$rx_íãr_¸ôiˇl
 ()

33 if(
__c⁄ãxt
 || 
__¸ôiˇl
)

37 
__¸ôiˇl
 = 1;

40 
	}
}

	@arch/arm/osport.h

19 #i‚de‡
__OSPORT_H__


20 
	#__OSPORT_H__


	)

22 
	~"úq_m≠pög.h
"

24 
	#_ASMLANGUAGE


	)

26 
__swôch_to
();

28 
	#__sched__
(
¥ev
, 
√xt
) \

30 } 0)

	)

32 
	#__öô_tcb__
(
tcb
) \

34 } 0)

	)

36 
	#__¥ìm±__
(
tcb
) \

38 }0)

	)

41 
rx_íãr_¸ôiˇl
 ();

42 
rx_exô_¸ôiˇl
 ();

44 
	#__¥ötk
(...Ë{}

	)

46 vﬁ©ûê
	g__c⁄ãxt
;

47 vﬁ©ûê
	g__¸ôiˇl
;

49 
	#__IRQ
 1

	)

50 
	#__USER
 0

	)

	@arch/arm/rpi/bcm2835.h

11 #i‚de‡
_BCM2835_H_


12 
	#_BCM2835_H_


	)

14 
	~<°ddef.h
>

21 
	#PERIPHERALS_BASE
 0x20000000

	)

24 
	#SYSTEM_TIMER_REGS_BASE
 (
PERIPHERALS_BASE
 + 0x3000)

	)

27 
	#INTERRUPT_REGS_BASE
 (
PERIPHERALS_BASE
 + 0xB200)

	)

30 
	#MAILBOX_REGS_BASE
 (
PERIPHERALS_BASE
 + 0xB880)

	)

33 
	#PM_REGS_BASE
 (
PERIPHERALS_BASE
 + 0x100000)

	)

36 
	#PL011_REGS_BASE
 (
PERIPHERALS_BASE
 + 0x201000)

	)

39 
	#SDHCI_REGS_BASE
 (
PERIPHERALS_BASE
 + 0x300000)

	)

42 
	#DWC_REGS_BASE
 (
PERIPHERALS_BASE
 + 0x980000)

	)

52 
	#IRQ_SYSTEM_TIMER_0
 0

	)

53 
	#IRQ_SYSTEM_TIMER_1
 1

	)

54 
	#IRQ_SYSTEM_TIMER_2
 2

	)

55 
	#IRQ_SYSTEM_TIMER_3
 3

	)

59 
	#IRQ_TIMER
 
IRQ_SYSTEM_TIMER_3


	)

62 
	#IRQ_USB
 9

	)

65 
	#IRQ_PCM
 55

	)

68 
	#IRQ_PL011
 57

	)

71 
	#IRQ_SD
 62

	)

78 
	ebﬂrd_powî_„©uª
 {

79 
	mPOWER_SD
 = 0,

80 
	mPOWER_UART_0
 = 1,

81 
	mPOWER_UART_1
 = 2,

82 
	mPOWER_USB
 = 3,

85 
bcm2835_£çowî
(
bﬂrd_powî_„©uª
 
„©uª
, 
boﬁ
 
⁄
);

86 
bcm2835_powî_öô
();

88 
	#bﬂrd_£çowî
 
bcm2835_£çowî


	)

98 
dmb
();

101 
	#¥e_≥rùhîÆ_ªad_mb
 
dmb


	)

102 
	#po°_≥rùhîÆ_ªad_mb
 
dmb


	)

105 
	#¥e_≥rùhîÆ_wrôe_mb
 
dmb


	)

106 
	#po°_≥rùhîÆ_wrôe_mb
 
dmb


	)

110 
	#¥e_≥rùhîÆ_ac˚ss_mb
 
dmb


	)

111 
	#po°_≥rùhîÆ_ac˚ss_mb
 
dmb


	)

	@arch/arm/rpi/dispatch.c

17 
	~<öãºu±.h
>

18 
	~<kî√l.h
>

19 
	~<°ddef.h
>

20 
	~"bcm2835.h
"

21 
	~<úq.h
>

24 
	sbcm2835_öãºu±_ªgi°îs
 {

25 
uöt
 
	mIRQ_basic_≥ndög
;

26 
uöt
 
	mIRQ_≥ndög_1
;

27 
uöt
 
	mIRQ_≥ndög_2
;

28 
uöt
 
	mFIQ_c⁄åﬁ
;

29 
uöt
 
	mE«bÀ_IRQs_1
;

30 
uöt
 
	mE«bÀ_IRQs_2
;

31 
uöt
 
	mE«bÀ_Basic_IRQs
;

32 
uöt
 
	mDißbÀ_IRQs_1
;

33 
uöt
 
	mDißbÀ_IRQs_2
;

34 
uöt
 
	mDißbÀ_Basic_IRQs
;

37 vﬁ©ûê
bcm2835_öãºu±_ªgi°îs
 * c⁄° 
	gªgs
 =

38 (vﬁ©ûê
bcm2835_öãºu±_ªgi°îs
*)
INTERRUPT_REGS_BASE
;

41 
uöt
 
	g¨m_íabÀd_úqs
[3];

45 
	$check_úq_≥ndög
(
uch¨
 
úq_num
)

47 
boﬁ
 
h™dÀ
 = 
FALSE
;

50 i‡(
úq_num
 >= 64)

52 i‡(
ªgs
->
IRQ_basic_≥ndög
 & (1 << (
úq_num
 - 64)))

54 
h™dÀ
 = 
TRUE
;

57 i‡(
úq_num
 >= 32)

59 i‡(
ªgs
->
IRQ_≥ndög_2
 & (1 << (
úq_num
 - 32)))

61 
h™dÀ
 = 
TRUE
;

66 i‡(
ªgs
->
IRQ_≥ndög_1
 & (1 << 
úq_num
))

68 
h™dÀ
 = 
TRUE
;

71 i‡(
h™dÀ
)

73 
	`__úq_h™dÀr
(
úq_num
);

78 
	}
}

81 
ölöe
 
ul⁄g
 
	$fú°_£t_bô
(
ul⁄g
 
w‹d
)

83  31 - 
	`__buûtö_˛z
(
w‹d
);

84 
	}
}

94 
	$di•©ch
()

96 
uöt
 
i
;

98 
i
 = 0; i < 3; i++)

100 
uöt
 
mask
 = 
¨m_íabÀd_úqs
[
i
];

101 
mask
 != 0)

103 
uöt
 
bô
 = 
	`fú°_£t_bô
(
mask
);

104 
mask
 ^(1 << 
bô
);

105 
	`check_úq_≥ndög
(
bô
 + (
i
 << 5));

108 
	}
}

116 
	$__íabÀ_úq
(
úqmask
 
úq_num
)

118 i‡(
úq_num
 < 32)

120 
ªgs
->
E«bÀ_IRQs_1
 = 1 << 
úq_num
;

121 
¨m_íabÀd_úqs
[0] |1 << 
úq_num
;

123 i‡(
úq_num
 < 64)

125 
ªgs
->
E«bÀ_IRQs_2
 = 1 << (
úq_num
 - 32);

126 
¨m_íabÀd_úqs
[1] |1 << (
úq_num
 - 32);

130 
ªgs
->
E«bÀ_Basic_IRQs
 = 1 << (
úq_num
 - 64);

131 
¨m_íabÀd_úqs
[2] |1 << (
úq_num
 - 64);

133 
	}
}

141 
	$__dißbÀ_úq
(
úqmask
 
úq_num
)

143 i‡(
úq_num
 < 32)

145 
ªgs
->
DißbÀ_IRQs_1
 = 1 << 
úq_num
;

146 
¨m_íabÀd_úqs
[0] &~(1 << 
úq_num
);

148 i‡(
úq_num
 < 64)

150 
ªgs
->
DißbÀ_IRQs_2
 = 1 << (
úq_num
 - 32);

151 
¨m_íabÀd_úqs
[1] &~(1 << (
úq_num
 - 32));

155 
ªgs
->
DißbÀ_Basic_IRQs
 = 1 << (
úq_num
 - 64);

156 
¨m_íabÀd_úqs
[2] &~(1 << (
úq_num
 - 64));

158 
	}
}

	@arch/arm/rpi/interrupt.h

8 #i‚de‡
_INTERRUPT_H_


9 
	#_INTERRUPT_H_


	)

11 
	~<úq.h
>

13 
__íabÀ_úq_globÆ
();

14 
__dißbÀ_úq_globÆ
();

15 
__ª°‹e_úq_globÆ
();

17 
__íabÀ_úq
();

18 
__dißbÀ_úq
();

20 
	#__CONFIG_IRQS
 1

	)

23 
	#BCM2835_NUM_GPU_SHARED_IRQS
 64

	)

27 
	#BCM2835_NUM_ARM_SPECIFIC_IRQS
 8

	)

30 
	#BCM2835_NUM_IRQS
 (
BCM2835_NUM_GPU_SHARED_IRQS
 + 
BCM2835_NUM_ARM_SPECIFIC_IRQS
)

	)

31 
	#__CONFIG_IRQ_COUNT
 
BCM2835_NUM_IRQS


	)

33 
	~"bcm2835.h
"

	@arch/arm/rpi/rpi_linker.c

1 
	~"deföes.h
"

3 
	gMEMORY


5 
	gøm
 : 
ORIGIN
 = 0x8000, 
	gLENGTH
 = 0x2000000

8 
	gSECTIONS


10 .
	gãxt
 : {

11 
out
/
¨ch
/
¨m
/
˝u
/
¨mv7
/
°¨t
.
o
 (.
ãxt
*)

12 *(.
ãxt
*)

13 } > 
øm


15 . = 
ALIGN
(4);

17 .
	gd©a
 : {

18 
__d©a_°¨t__
 = .;

19 *(.
	gd©a
*)

20 } > 
øm


21 
	g__d©a_íd__
 = .;

22 
	g__d©a_size__
 = 
__d©a_íd__
 - 
__d©a_°¨t__
;

24 . = 
ALIGN
(4);

26 .
	gbss
 : {

27 
__bss_°¨t__
 = .;

28 *(.
	gbss
*)

29 } > 
øm


30 
	g__bss_íd__
 = .;

31 
	g__bss_size__
 = 
__bss_íd__
 - 
__bss_°¨t__
;

33 . = 
ALIGN
(4);

36 
	g__byãpoﬁ_°¨t
 = .;

37 . +
CONFIG_BYTEPOOL_SIZE
;

39 . = 
ALIGN
(4);

42 
	g__rx_°ack_°¨t_±r
 = 
ORIGIN
(
øm
Ë+ 
LENGTH
(ram);

	@arch/x86/bitops.h

1 #i‚de‡
_I386_BITOPS_H


2 
	#_I386_BITOPS_H


	)

17 
	~<asm-gíîic/bô›s/Ês.h
>

18 
	~<asm-gíîic/bô›s/__Ês.h
>

19 
	~<asm-gíîic/bô›s/Ês64.h
>

21 #ifde‡
CONFIG_SMP


22 
	#LOCK_PREFIX
 "lock ; "

	)

24 
	#LOCK_PREFIX
 ""

	)

27 
	#ADDR
 (*(vﬁ©ûê*Ë
addr
)

	)

39 
__ölöe__
 
	$£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

41 
__asm__
 
	`__vﬁ©ûe__
–
LOCK_PREFIX


43 :"=m" (
ADDR
)

44 :"Ir" (
ƒ
));

45 
	}
}

56 
__ölöe__
 
	$__£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

58 
	`__asm__
(

60 :"=m" (
ADDR
)

61 :"Ir" (
ƒ
));

62 
	}
}

74 
__ölöe__
 
	$˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

76 
__asm__
 
	`__vﬁ©ûe__
–
LOCK_PREFIX


78 :"=m" (
ADDR
)

79 :"Ir" (
ƒ
));

80 
	}
}

81 
	#smp_mb__bef‹e_˛ór_bô
(Ë
	`b¨rõr
()

	)

82 
	#smp_mb__a·î_˛ór_bô
(Ë
	`b¨rõr
()

	)

93 
__ölöe__
 
	$__ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

95 
__asm__
 
	`__vﬁ©ûe__
(

97 :"=m" (
ADDR
)

98 :"Ir" (
ƒ
));

99 
	}
}

110 
__ölöe__
 
	$ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

112 
__asm__
 
	`__vﬁ©ûe__
–
LOCK_PREFIX


114 :"=m" (
ADDR
)

115 :"Ir" (
ƒ
));

116 
	}
}

126 
__ölöe__
 
	$ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

128 
ﬁdbô
;

130 
__asm__
 
	`__vﬁ©ûe__
–
LOCK_PREFIX


132 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

133 :"Ir" (
ƒ
) : "memory");

134  
ﬁdbô
;

135 
	}
}

146 
__ölöe__
 
	$__ã°_™d_£t_bô
(
ƒ
, vﬁ©ûê* 
addr
)

148 
ﬁdbô
;

150 
	`__asm__
(

152 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

153 :"Ir" (
ƒ
));

154  
ﬁdbô
;

155 
	}
}

165 
__ölöe__
 
	$ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

167 
ﬁdbô
;

169 
__asm__
 
	`__vﬁ©ûe__
–
LOCK_PREFIX


171 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

172 :"Ir" (
ƒ
) : "memory");

173  
ﬁdbô
;

174 
	}
}

185 
__ölöe__
 
	$__ã°_™d_˛ór_bô
(
ƒ
, vﬁ©ûê* 
addr
)

187 
ﬁdbô
;

189 
	`__asm__
(

191 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

192 :"Ir" (
ƒ
));

193  
ﬁdbô
;

194 
	}
}

197 
__ölöe__
 
	$__ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

199 
ﬁdbô
;

201 
__asm__
 
	`__vﬁ©ûe__
(

203 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

204 :"Ir" (
ƒ
) : "memory");

205  
ﬁdbô
;

206 
	}
}

216 
__ölöe__
 
	$ã°_™d_ch™ge_bô
(
ƒ
, vﬁ©ûê* 
addr
)

218 
ﬁdbô
;

220 
__asm__
 
	`__vﬁ©ûe__
–
LOCK_PREFIX


222 :"Ù" (
ﬁdbô
),"=m" (
ADDR
)

223 :"Ir" (
ƒ
) : "memory");

224  
ﬁdbô
;

225 
	}
}

233 
ã°_bô
(
ƒ
, c⁄° vﬁ©ûê* 
addr
);

236 
__ölöe__
 
	$c⁄°™t_ã°_bô
(
ƒ
, c⁄° vﬁ©ûê* 
addr
)

238  ((1UL << (
ƒ
 & 31)Ë& (((c⁄° vﬁ©ûê*Ë
addr
)[nr >> 5])) != 0;

239 
	}
}

241 
__ölöe__
 
	$v¨übÀ_ã°_bô
(
ƒ
, vﬁ©ûê* 
addr
)

243 
ﬁdbô
;

245 
__asm__
 
	`__vﬁ©ûe__
(

247 :"Ù" (
ﬁdbô
)

248 :"m" (
ADDR
),"Ir" (
ƒ
));

249  
ﬁdbô
;

250 
	}
}

252 
	#ã°_bô
(
ƒ
,
addr
) \

253 (
	`__buûtö_c⁄°™t_p
(
ƒ
) ? \

254 
	`c⁄°™t_ã°_bô
((
ƒ
),(
addr
)) : \

255 
	`v¨übÀ_ã°_bô
((
ƒ
),(
addr
)))

	)

265 
__ölöe__
 
	$föd_fú°_zîo_bô
(* 
addr
, 
size
)

267 
d0
, 
d1
, 
d2
;

268 
ªs
;

270 i‡(!
size
)

273 
__asm__
 
	`__vﬁ©ûe__
(

284 :"=d" (
ªs
), "=&c" (
d0
), "=&D" (
d1
), "=&a" (
d2
)

285 :"1" ((
size
 + 31Ë>> 5), "2" (
addr
), "b" (addr));

286  
ªs
;

287 
	}
}

295 
__ölöe__
 
	$föd_√xt_zîo_bô
 (* 
addr
, 
size
, 
off£t
)

297 * 
p
 = ((*Ë
addr
Ë+ (
off£t
 >> 5);

298 
£t
 = 0, 
bô
 = 
off£t
 & 31, 
ªs
;

300 i‡(
bô
) {

304 
	`__asm__
("bsfl %1,%0\n\t"

308 : "Ù" (
£t
)

309 : "r" (~(*
p
 >> 
bô
)));

310 i‡(
£t
 < (32 - 
bô
))

311  
£t
 + 
off£t
;

312 
£t
 = 32 - 
bô
;

313 
p
++;

318 
ªs
 = 
	`föd_fú°_zîo_bô
 (
p
, 
size
 - 32 * (∞- (*Ë
addr
));

319  (
off£t
 + 
£t
 + 
ªs
);

320 
	}
}

328 
__ölöe__
 
	$ffz
(
w‹d
)

330 
	`__asm__
("bsfl %1,%0"

331 :"Ù" (
w‹d
)

332 :"r" (~
w‹d
));

333  
w‹d
;

334 
	}
}

336 #ifde‡
__KERNEL__


344 
ölöe
 
	$__ffs
(
w‹d
)

346 
	`__asm__
("rep; bsf %1,%0"

347 : "Ù" (
w‹d
)

348 : "rm" (
w‹d
));

349  
w‹d
;

350 
	}
}

360 
__ölöe__
 
	$ffs
(
x
)

362 
r
;

364 
	`__asm__
("bsfl %1,%0\n\t"

367 "1:" : "Ù" (
r
Ë: "rm" (
x
));

369  
r
+1;

370 
	}
}

371 
	#PLATFORM_FFS


	)

373 
ölöe
 
	$__ûog2
(
x
)

375  
	`gíîic_Ês
(
x
) - 1;

376 
	}
}

385 
	#hweight32
(
x
Ë
	`gíîic_hweight32
(x)

	)

386 
	#hweight16
(
x
Ë
	`gíîic_hweight16
(x)

	)

387 
	#hweight8
(
x
Ë
	`gíîic_hweight8
(x)

	)

391 #ifde‡
__KERNEL__


393 
	#ext2_£t_bô
 
__ã°_™d_£t_bô


	)

394 
	#ext2_˛ór_bô
 
__ã°_™d_˛ór_bô


	)

395 
	#ext2_ã°_bô
 
ã°_bô


	)

396 
	#ext2_föd_fú°_zîo_bô
 
föd_fú°_zîo_bô


	)

397 
	#ext2_föd_√xt_zîo_bô
 
föd_√xt_zîo_bô


	)

400 
	#möix_ã°_™d_£t_bô
(
ƒ
,
addr
Ë
	`__ã°_™d_£t_bô
“r,addr)

	)

401 
	#möix_£t_bô
(
ƒ
,
addr
Ë
	`__£t_bô
“r,addr)

	)

402 
	#möix_ã°_™d_˛ór_bô
(
ƒ
,
addr
Ë
	`__ã°_™d_˛ór_bô
“r,addr)

	)

403 
	#möix_ã°_bô
(
ƒ
,
addr
Ë
	`ã°_bô
“r,addr)

	)

404 
	#möix_föd_fú°_zîo_bô
(
addr
,
size
Ë
	`föd_fú°_zîo_bô
◊ddr,size)

	)

	@arch/x86/byteorder.h

1 #i‚de‡
_I386_BYTEORDER_H


2 
	#_I386_BYTEORDER_H


	)

4 
	~<asm/ty≥s.h
>

6 #ifde‡
__GNUC__


9 
__ölöe__
 
__u32
 
	$___¨ch__swab32
(
__u32
 
x
)

11 
	`__asm__
("bsw≠ %0" : "Ù" (
x
) : "0" (x));

13  
x
;

14 
	}
}

16 
	#_c⁄°™t_swab16
(
x
Ë((
__u16
)( \

17 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

18 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

20 
__ölöe__
 
__u16
 
	$___¨ch__swab16
(
__u16
 
x
)

22 #ifde‡
CONFIG_IS_X86_64


23  
	`_c⁄°™t_swab16
(
x
);

25 
	`__asm__
("xchgb %b0,%h0" \

26 : "=q" (
x
) \

27 : "0" (
x
)); \

28  
x
;

30 
	}
}

32 
	#__¨ch__swab32
(
x
Ë
	`___¨ch__swab32
(x)

	)

33 
	#__¨ch__swab16
(
x
Ë
	`___¨ch__swab16
(x)

	)

35 #i‡!
deföed
(
__STRICT_ANSI__
Ë|| deföed(
__KERNEL__
)

36 
	#__BYTEORDER_HAS_U64__


	)

37 
	#__SWAB_64_THRU_32__


	)

42 
	~<löux/byã‹dî/lôée_ídün.h
>

	@arch/x86/interrupt.h

1 #i‚de‡
_INTERRUPT_H_


2 
	#_INTERRUPT_H_


	)

5 
__íabÀ_úq_globÆ
();

6 
__dißbÀ_úq_globÆ
();

7 
__ª°‹e_úq_globÆ
();

9 
__íabÀ_úq
();

10 
__dißbÀ_úq
();

12 
	#__CONFIG_IRQS
 1

	)

13 
	#__CONFIG_IRQ_COUNT
 10

	)

	@arch/x86/irq_mapping.h

18 #i‚de‡
__IRQ_MAPPING_H__


19 
	#__IRQ_MAPPING_H__


	)

21 
	#RX_TIMER0_INT
 0

	)

	@arch/x86/osport.c

17 
	~<Ro£RTOS.h
>

18 
	~<sig«l.h
>

20 
	$__ª°‹e_úq_globÆ
(
key
)

22 if(
__c⁄ãxt
 || !(
__¸ôiˇl
))

25 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, &
‹ig_mask
, 
NULL
) < 0) {

26 
	`¥_öfo
("rx_enter_critical: sigprocmask failed");

27 
	`exô
(1);

29 
__¸ôiˇl
 = 0;

30 
	}
}

33 
	$__dißbÀ_úq_globÆ
()

35 if(
__c⁄ãxt
 || 
__¸ôiˇl
)

38 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
mask
, &
‹ig_mask
) < 0) {

39 
	`¥_öfo
("rx_enter_critical: sigprocmask failed");

40 
	`exô
(1);

42 
__¸ôiˇl
 = 1;

45 
	}
}

47 
	$__íabÀ_úq
(
num
)

50 
	}
}

52 
	$__dißbÀ_úq
(
num
)

55 
	}
}

	@arch/x86/osport.h

18 #i‚de‡
__x86_PORT_H__


19 
	#__x86_PORT_H__


	)

20 
	~"x86_sim.h
"

22 
	#_ASMLANGUAGE


	)

24 
	#__rx_öô_tcb__
(
tcb
) \

26 
__asm__
 volatile("pushl %%ebp\n\t" \

37 :[
tcb_•_o
] "=m" (
tcb
->
cuº_°ack_±r
), \

38 [
cuº_•_o
] "=m" (
tcb
->
ù
) \

40 :[
tcb_•
] "m" (
tcb
->
°ack_°¨t_±r
), \

41 [
cuº_•
] "m" (
tcb
->
ù
)); \

42 } 0)

	)

44 
	#__rx_¥ìm±__
(
tcb
) \

46 
__asm__
 volatile("movl 68(%%ebp), %%ebx\n\t" \

49 :[
tcb_p
] "=m" (
tcb
->
¥ìm±
) \

53 }0)

	)

56 
__ª°‹e_úq_globÆ
(
key
);

57 
__dißbÀ_úq_globÆ
();

58 
__íabÀ_úq
();

59 
__dißbÀ_úq
();

	@arch/x86/switch.h

20 #i‚de‡
__x86_SWITCH_H__


21 
	#__x86_SWITCH_H__


	)

23 
	~"x86_sim.h
"

25 
	#_ASMLANGUAGE


	)

27 
__swôch_to
();

29 
	#__sched__
(
¥ev
, 
√xt
) \

39 
__asm__
 volatile("pushfl\n\t" \

51 : [
¥ev_•
] "=m" (
¥ev
->
cuº_°ack_±r
), \

52 [
¥ev_ù
] "=m" (
¥ev
->
ù
) \

55 : [
√xt_•
] "m" (
√xt
->
cuº_°ack_±r
), \

56 [
√xt_ù
] "m" (
√xt
->
ù
), \

57 [
√xt_bp
] "m" (
√xt
->
bp
)); \

58 } 0)

	)

	@arch/x86/types.h

1 #i‚de‡
__ASM_I386_TYPES_H


2 
	#__ASM_I386_TYPES_H


	)

4 
	tumode_t
;

11 
__sig√d__
 
	t__s8
;

12 
	t__u8
;

14 
__sig√d__
 
	t__s16
;

15 
	t__u16
;

17 
__sig√d__
 
	t__s32
;

18 
	t__u32
;

20 #i‡
deföed
(
__GNUC__
)

21 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

22 
__exãnsi⁄__
 
	t__u64
;

28 #ifde‡
__KERNEL__


30 sig√d 
	ts8
;

31 
	tu8
;

33 sig√d 
	ts16
;

34 
	tu16
;

36 sig√d 
	ts32
;

37 
	tu32
;

39 #i‡!
deföed
(
CONFIG_USE_STDINT
Ë|| !deföed(
__INT64_TYPE__
)

40 sig√d 
	ts64
;

41 
	tu64
;

43 
__INT64_TYPE__
 
	ts64
;

44 
__UINT64_TYPE__
 
	tu64
;

47 #ifde‡
CONFIG_IS_X86_64


48 
	#BITS_PER_LONG
 64

	)

50 
	#BITS_PER_LONG
 32

	)

53 #ifde‡
__GNUC__


54 
	t__kî√l_loff_t
;

57 
	t__kî√l_±rdiff_t
;

61 
u32
 
	tdma_addr_t
;

63 
	tphys_addr_t
;

64 
	tphys_size_t
;

	@arch/x86/x86_sim.c

20 
	~<RosX.h
>

21 
	~<uni°d.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sig«l.h
>

24 
	~<sys/ùc.h
>

25 
	~<sys/shm.h
>

26 
	~<î∫o.h
>

28 
	sshm_°ru˘
 {

29 
pid_t
 
	mpid
;

30 
	mnum
;

33 
pid_t
 
	gpid
;

34 
key_t
 
	gmem_key
;

35 
	gshm_id
;

36 
shm_°ru˘
 *
	gshm_±r
;

39 
	$sig_h™dÀr
(
signum
)

41 
RX_TASK
 *
tcb
 = 
__rx_cuº_ru¬ög_èsk
;

43 
__c⁄ãxt
 = 
__IRQ
;

45 i‡(
signum
 =
SIGUSR1
)

47 
	`__rx_úq_h™dÀr
(
shm_±r
->
num
);

49 #ifde‡
CONFIG_KERNEL_PREEMPT


51 if(
__rx_√ed_ªsched
) {

52 
__rx_√ed_ªsched
 = 0;

53 
tcb
->
°©e
 = 
RX_TASK_READY
;

54 
	`__rx_¥ìm±__
(
tcb
);

59 
__c⁄ãxt
 = 
__USER
;

60 
	}
}

63 
	$öô_sig«ls
()

65 
	`mem£t
 (&
a˘
, 0, (act));

66 
a˘
.
ß_h™dÀr
 = 
sig_h™dÀr
;

68 i‡(
	`siga˘i⁄
(
SIGUSR1
, &
a˘
, 0)) {

69 
	`__rx_óæy_¥ötk
("sigactionÉrror");

70 
	`exô
(1);

73 
	`sigem±y£t
 (&
mask
);

74 
	`sigadd£t
 (&
mask
, 
SIGUSR1
);

75 
	}
}

77 
	$maö
()

80 
pid
 = 
	`gëpid
();

82 
mem_key
 = 
	`·ok
(".", 'c');

84 if–-1 =(
shm_id
 = 
	`shmgë
(
mem_key
, (
shm_°ru˘
), 
IPC_CREAT
 | 0666))) {

85 
	`__rx_óæy_¥ötk
("Shget failed \n");

86 
	`exô
(1);

89 if((*)-1 =(
shm_±r
 = (
shm_°ru˘
 *Ë
	`shm©
(
shm_id
, 
NULL
, 0))) {

90 
	`__rx_óæy_¥ötk
("Shmat failed\n");

91 
	`exô
(1);

94 
shm_±r
->
pid
 =Öid;

95 
	`öô_sig«ls
();

99 #ifde‡
CONFIG_STACK_ALLOC_DYNAMIC


100 
__rx_°ack_°¨t_±r
 = ((*)
	`mÆloc
(
CONFIG_SYSTEM_STACK_SIZE
) + CONFIG_SYSTEM_STACK_SIZE);

101 if(!
__rx_°ack_°¨t_±r
) {

102 
	`__rx_óæy_¥ötk
("System stackállocation failed\n");

103 
	`exô
(1);

105 
	`__rx_óæy_¥ötk
("__rx_°ack_°¨t_±∏%p\n", 
__rx_°ack_°¨t_±r
);

108 #ifde‡
CONFIG_PRINT_BUFFER


109 
__rx_¥ötk_buf„r_°¨t_±r
 = (*)
	`mÆloc
(
CONFIG_PRINT_BUFFER_SIZE
);

110 if(!
__rx_¥ötk_buf„r_°¨t_±r
) {

111 
	`__rx_óæy_¥ötk
("SystemÖrint bufferállocation failed\n");

112 
	`exô
(1);

116 
__rx_byãpoﬁ_°¨t
 = (*)
	`mÆloc
(
CONFIG_BYTEPOOL_SIZE
);

117 if(!
__rx_byãpoﬁ_°¨t
) {

118 
	`__rx_óæy_¥ötk
("System bytepoolállocation failed\n");

119 
	`exô
(1);

124 
	`__rx_kî√l_íãr
();

126 
	}
}

	@arch/x86/x86_sim.h

18 #i‚de‡
__X86_SIM_H__


19 
	#__X86_SIM_H__


	)

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<rosx/°rög.h
>

24 
	~<sig«l.h
>

25 
	~"úq_m≠pög.h
"

27 
	#__¥ötk
(...) \

29 
	`¥ötf
(
__VA_ARGS__
); \

30 
	`fÊush
(
°dout
); \

31 }

	)

34 
	#__rx_óæy_¥ötk
(...) \

36 
	`¥ötf
(
__VA_ARGS__
); \

37 
	`fÊush
(
°dout
); \

38 }

	)

40 
sig£t_t
 
	gmask
;

41 
sig£t_t
 
	g‹ig_mask
;

42 
siga˘i⁄
 
	ga˘
;

43 vﬁ©ûê
	g__c⁄ãxt
;

44 vﬁ©ûê
	g__¸ôiˇl
;

46 
	#__IRQ
 1

	)

47 
	#__USER
 0

	)

	@drivers/simulator/x86sim.c

18 
	~<RosX.h
>

20 
x86_simuœt‹_öô
();

21 
devi˚_›s
 
	gf›s
;

23 
	$x86_simuœt‹_öô
()

25 i‡–0 =
	`ªgi°î_drivî
("simx86", &
f›s
)) {

26 
	`__rx_óæy_¥ötk
("simx86 DriverÑegistered\n");

28 
	`__rx_óæy_¥ötk
("simx86 DriverÑegisteration failed\n");

32 
	}
}

34 
	$x86_sim_›í
(
devfûe
 *
dev
)

38 
	}
}

40 
	$x86_sim_ªÀa£
(
devfûe
 *
dev
)

44 
	}
}

46 
	$x86_sim_wrôe
(
devfûe
 *
dev
, c⁄° *
§c
, 
size_t
 
size
)

48 
	`__¥ötk
("%c", *(*)
§c
);

49  
size
;

50 
	}
}

52 
devi˚_›s
 
	gf›s
 = {

53 .
›í
 = 
x86_sim_›í
,

54 .
	gªÀa£
 = 
x86_sim_ªÀa£
,

55 .
	gwrôe
 = 
x86_sim_wrôe


	@include/asm-generic/bitops/__ffs.h

1 #i‚de‡
_ASM_GENERIC_BITOPS___FFS_H_


2 
	#_ASM_GENERIC_BITOPS___FFS_H_


	)

4 
	~<asm/ty≥s.h
>

12 
__Æways_ölöe
 
	$__ffs
(
w‹d
)

14 
num
 = 0;

16 #i‡
BITS_PER_LONG
 == 64

17 i‡((
w‹d
 & 0xffffffff) == 0) {

18 
num
 += 32;

19 
w‹d
 >>= 32;

22 i‡((
w‹d
 & 0xffff) == 0) {

23 
num
 += 16;

24 
w‹d
 >>= 16;

26 i‡((
w‹d
 & 0xff) == 0) {

27 
num
 += 8;

28 
w‹d
 >>= 8;

30 i‡((
w‹d
 & 0xf) == 0) {

31 
num
 += 4;

32 
w‹d
 >>= 4;

34 i‡((
w‹d
 & 0x3) == 0) {

35 
num
 += 2;

36 
w‹d
 >>= 2;

38 i‡((
w‹d
 & 0x1) == 0)

39 
num
 += 1;

40  
num
;

41 
	}
}

	@include/asm-generic/bitops/__fls.h

1 #i‚de‡
_ASM_GENERIC_BITOPS___FLS_H_


2 
	#_ASM_GENERIC_BITOPS___FLS_H_


	)

4 
	~<asm/ty≥s.h
>

12 
__Æways_ölöe
 
	$__Ês
(
w‹d
)

14 
num
 = 
BITS_PER_LONG
 - 1;

16 #i‡
BITS_PER_LONG
 == 64

17 i‡(!(
w‹d
 & (~0ul << 32))) {

18 
num
 -= 32;

19 
w‹d
 <<= 32;

22 i‡(!(
w‹d
 & (~0u»<< (
BITS_PER_LONG
-16)))) {

23 
num
 -= 16;

24 
w‹d
 <<= 16;

26 i‡(!(
w‹d
 & (~0u»<< (
BITS_PER_LONG
-8)))) {

27 
num
 -= 8;

28 
w‹d
 <<= 8;

30 i‡(!(
w‹d
 & (~0u»<< (
BITS_PER_LONG
-4)))) {

31 
num
 -= 4;

32 
w‹d
 <<= 4;

34 i‡(!(
w‹d
 & (~0u»<< (
BITS_PER_LONG
-2)))) {

35 
num
 -= 2;

36 
w‹d
 <<= 2;

38 i‡(!(
w‹d
 & (~0u»<< (
BITS_PER_LONG
-1))))

39 
num
 -= 1;

40  
num
;

41 
	}
}

	@include/asm-generic/bitops/fls.h

1 #i‚de‡
_ASM_GENERIC_BITOPS_FLS_H_


2 
	#_ASM_GENERIC_BITOPS_FLS_H_


	)

12 
__Æways_ölöe
 
	$Ês
(
x
)

14 
r
 = 32;

16 i‡(!
x
)

18 i‡(!(
x
 & 0xffff0000u)) {

19 
x
 <<= 16;

20 
r
 -= 16;

22 i‡(!(
x
 & 0xff000000u)) {

23 
x
 <<= 8;

24 
r
 -= 8;

26 i‡(!(
x
 & 0xf0000000u)) {

27 
x
 <<= 4;

28 
r
 -= 4;

30 i‡(!(
x
 & 0xc0000000u)) {

31 
x
 <<= 2;

32 
r
 -= 2;

34 i‡(!(
x
 & 0x80000000u)) {

35 
x
 <<= 1;

36 
r
 -= 1;

38  
r
;

39 
	}
}

	@include/asm-generic/bitops/fls64.h

1 #i‚de‡
_ASM_GENERIC_BITOPS_FLS64_H_


2 
	#_ASM_GENERIC_BITOPS_FLS64_H_


	)

4 
	~<asm/ty≥s.h
>

17 #i‡
BITS_PER_LONG
 == 32

18 
__Æways_ölöe
 
	$Ês64
(
__u64
 
x
)

20 
__u32
 
h
 = 
x
 >> 32;

21 i‡(
h
)

22  
	`Ês
(
h
) + 32;

23  
	`Ês
(
x
);

24 
	}
}

25 #ñi‡
BITS_PER_LONG
 == 64

26 
__Æways_ölöe
 
	$Ês64
(
__u64
 
x
)

28 i‡(
x
 == 0)

30  
	`__Ês
(
x
) + 1;

31 
	}
}

33 #îr‹ 
BITS_PER_LONG
 
nŸ
 32 
‹
 64

	@include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

4 #i‚de‡
BITS_PER_LONG_LONG


5 
	#BITS_PER_LONG_LONG
 64

	)

	@include/charset.h

9 #i‚de‡
__CHARSET_H_


10 
	#__CHARSET_H_


	)

12 
	~<rosx/ty≥s.h
>

14 
	#MAX_UTF8_PER_UTF16
 3

	)

25 
size_t
 
utf16_°æí
(c⁄° 
uöt16_t
 *
ö
);

39 
size_t
 
utf16_°∫Àn
(c⁄° 
uöt16_t
 *
ö
, size_à
cou¡
);

44 
uöt16_t
 *
utf16_°r˝y
(uöt16_à*
de°
, c⁄° uöt16_à*
§c
);

49 
uöt16_t
 *
utf16_°rdup
(c⁄° uöt16_à*
s
);

65 
uöt8_t
 *
utf16_to_utf8
(uöt8_à*
de°
, c⁄° 
uöt16_t
 *
§c
, 
size_t
 
size
);

78 
uöt16_t
 *
utf8_to_utf16
(uöt16_à*
de°
, c⁄° 
uöt8_t
 *
§c
, 
size_t
 
size
);

	@include/common.h

1 #i‚de‡
__COMMON_H_


2 
	#__COMMON_H_
 1

	)

4 #i‚de‡
__ASSEMBLY__


6 
	~<rosx/kî√l.h
>

7 
	~<rosx/°rög.h
>

8 
	~<rosx/ty≥s.h
>

11 
	~<v•rötf.h
>

	@include/compiler.h

5 #i‚de‡
__COMPILER_H__


6 
	#__COMPILER_H__


	)

8 
	~<°ddef.h
>

10 #ifde‡
USE_HOSTCC


12 #i‡
deföed
(
__BEOS__
) || \

13 
deföed
(
__NëBSD__
) || \

14 
deföed
(
__FªeBSD__
) || \

15 
deföed
(
__sun__
) || \

16 
	$deföed
(
__APPLE__
)

17 
	~<öây≥s.h
>

18 #ñi‡
	`deföed
(
__löux__
Ë|| deföed(
__WIN32__
Ë|| deföed(
__MINGW32__
Ë|| deföed(
__O≥nBSD__
)

19 
	~<°döt.h
>

22 
	~<î∫o.h
>

23 
	~<°dlib.h
>

24 
	~<°döt.h
>

25 
	~<°dio.h
>

26 
	~<rosx/°rög.h
>

28 #i‡!
	`deföed
(
__WIN32__
Ë&& !deföed(
__MINGW32__
)

29 
	~<sys/mm™.h
>

35 #i‚de‡
MAP_FAILED


36 
	#MAP_FAILED
 ((*)-1)

	)

39 
	~<f˙é.h
>

40 #i‚de‡
O_BINARY


41 
	#O_BINARY
 0

	)

44 #ifde‡
__löux__


45 
	~<ídün.h
>

46 
	~<byãsw≠.h
>

47 #ñi‡
	`deföed
(
__MACH__
Ë|| deföed(
__FªeBSD__
)

48 
	~<machöe/ídün.h
>

49 
	tul⁄g
;

51 #ifde‡
__FªeBSD__


52 
	~<sys/ídün.h
>

53 
	#__BYTE_ORDER
 
BYTE_ORDER


	)

54 
	#__LITTLE_ENDIAN
 
LITTLE_ENDIAN


	)

55 
	#__BIG_ENDIAN
 
BIG_ENDIAN


	)

56 #ñi‡
	`deföed
(
__O≥nBSD__
)

57 
	~<ídün.h
>

58 
	#__BYTE_ORDER
 
BYTE_ORDER


	)

59 
	#__LITTLE_ENDIAN
 
LITTLE_ENDIAN


	)

60 
	#__BIG_ENDIAN
 
BIG_ENDIAN


	)

63 
	~<time.h
>

65 
uöt8_t
 
	t__u8
;

66 
uöt16_t
 
	t__u16
;

67 
uöt32_t
 
	t__u32
;

68 
	tuöt
;

70 
	#usw≠_16
(
x
) \

71 ((((
x
) & 0xff00) >> 8) | \

72 (((
x
Ë& 0x00ffË<< 8))

	)

73 
	#usw≠_32
(
x
) \

74 ((((
x
) & 0xff000000) >> 24) | \

75 (((
x
) & 0x00ff0000) >> 8) | \

76 (((
x
) & 0x0000ff00) << 8) | \

77 (((
x
Ë& 0x000000ffË<< 24))

	)

78 
	#_usw≠_64
(
x
, 
sfx
) \

79 ((((
x
Ë& 0xff00000000000000##
sfx
) >> 56) | \

80 (((
x
Ë& 0x00ff000000000000##
sfx
) >> 40) | \

81 (((
x
Ë& 0x0000ff0000000000##
sfx
) >> 24) | \

82 (((
x
Ë& 0x000000ff00000000##
sfx
) >> 8) | \

83 (((
x
Ë& 0x00000000ff000000##
sfx
) << 8) | \

84 (((
x
Ë& 0x0000000000ff0000##
sfx
) << 24) | \

85 (((
x
Ë& 0x000000000000ff00##
sfx
) << 40) | \

86 (((
x
Ë& 0x00000000000000ff##
sfx
Ë<< 56))

	)

87 #i‡
	`deföed
(
__GNUC__
)

88 
	#usw≠_64
(
x
Ë
	`_usw≠_64
(x, 
uŒ
)

	)

90 
	#usw≠_64
(
x
Ë
	`_usw≠_64
(x, )

	)

93 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


94 
	#˝u_to_À16
(
x
Ë(x)

	)

95 
	#˝u_to_À32
(
x
Ë(x)

	)

96 
	#˝u_to_À64
(
x
Ë(x)

	)

97 
	#À16_to_˝u
(
x
Ë(x)

	)

98 
	#À32_to_˝u
(
x
Ë(x)

	)

99 
	#À64_to_˝u
(
x
Ë(x)

	)

100 
	#˝u_to_be16
(
x
Ë
	`usw≠_16
(x)

	)

101 
	#˝u_to_be32
(
x
Ë
	`usw≠_32
(x)

	)

102 
	#˝u_to_be64
(
x
Ë
	`usw≠_64
(x)

	)

103 
	#be16_to_˝u
(
x
Ë
	`usw≠_16
(x)

	)

104 
	#be32_to_˝u
(
x
Ë
	`usw≠_32
(x)

	)

105 
	#be64_to_˝u
(
x
Ë
	`usw≠_64
(x)

	)

107 
	#˝u_to_À16
(
x
Ë
	`usw≠_16
(x)

	)

108 
	#˝u_to_À32
(
x
Ë
	`usw≠_32
(x)

	)

109 
	#˝u_to_À64
(
x
Ë
	`usw≠_64
(x)

	)

110 
	#À16_to_˝u
(
x
Ë
	`usw≠_16
(x)

	)

111 
	#À32_to_˝u
(
x
Ë
	`usw≠_32
(x)

	)

112 
	#À64_to_˝u
(
x
Ë
	`usw≠_64
(x)

	)

113 
	#˝u_to_be16
(
x
Ë(x)

	)

114 
	#˝u_to_be32
(
x
Ë(x)

	)

115 
	#˝u_to_be64
(
x
Ë(x)

	)

116 
	#be16_to_˝u
(
x
Ë(x)

	)

117 
	#be32_to_˝u
(
x
Ë(x)

	)

118 
	#be64_to_˝u
(
x
Ë(x)

	)

123 #ifde‡
CONFIG_USE_STDINT


125 
	~<°döt.h
>

128 
	tuöçå_t
;

131 
	~<rosx/°rög.h
>

132 
	~<rosx/ty≥s.h
>

133 
	~<asm/byã‹dî.h
>

135 #i‡
__SIZEOF_LONG__
 == 8

136 
	#__WORDSIZE
 64

	)

137 #ñi‡
__SIZEOF_LONG__
 == 4

138 
	#__WORDSIZE
 32

	)

144 
	#__WORDSIZE
 32

	)

149 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

150 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

	@include/div64.h

1 #i‚de‡
_ASM_GENERIC_DIV64_H


2 
	#_ASM_GENERIC_DIV64_H


	)

23 
	~<rosx/ty≥s.h
>

24 
	~<rosx/compûî.h
>

26 #i‡
BITS_PER_LONG
 == 64

28 
	#do_div
(
n
,
ba£
) ({ \

29 
uöt32_t
 
__ba£
 = (
ba£
); \

30 
uöt32_t
 
__ªm
; \

31 
__ªm
 = ((
uöt64_t
)(
n
)Ë% 
__ba£
; \

32 (
n
Ë((
uöt64_t
)“)Ë/ 
__ba£
; \

33 
__ªm
; \

34 })

	)

36 #ñi‡
BITS_PER_LONG
 == 32

38 
	~<rosx/log2.h
>

50 #i‚de‡
__div64_c⁄°32_is_OK


51 
	#__div64_c⁄°32_is_OK
 (
__GNUC__
 >4)

	)

54 
	#__div64_c⁄°32
(
n
, 
___b
) \

65 
uöt64_t
 
___ªs
, 
___x
, 
___t
, 
___m
, 
___n
 = (
n
); \

66 
uöt32_t
 
___p
, 
___büs
; \

69 
___p
 = 1 << 
	`ûog2
(
___b
); \

72 
___m
 = (~0ULL / 
___b
Ë* 
___p
; \

73 
___m
 +(((~0ULL % 
___b
 + 1Ë* 
___p
) + ___b - 1) / ___b; \

76 
___x
 = ~0ULL / 
___b
 * ___b - 1; \

79 
___ªs
 = ((
___m
 & 0xffffffffË* (
___x
 & 0xffffffff)) >> 32; \

80 
___t
 = 
___ªs
 +(
___m
 & 0xffffffffË* (
___x
 >> 32); \

81 
___ªs
 +(
___x
 & 0xffffffffË* (
___m
 >> 32); \

82 
___t
 = (
___ªs
 < ___t) ? (1ULL << 32) : 0; \

83 
___ªs
 = (___ª†>> 32Ë+ 
___t
; \

84 
___ªs
 +(
___m
 >> 32Ë* (
___x
 >> 32); \

85 
___ªs
 /
___p
; \

88 i‡(~0ULL % (
___b
 / (___b & -___b)) == 0) { \

90 
___n
 /(
___b
 & -___b); \

91 
___m
 = ~0ULL / (
___b
 / (___b & -___b)); \

92 
___p
 = 1; \

93 
___büs
 = 1; \

94 } i‡(
___ªs
 !
___x
 / 
___b
) { \

103 
___büs
 = 1; \

105 
___m
 = (~0ULL / 
___b
Ë* 
___p
; \

106 
___m
 +((~0ULL % 
___b
 + 1Ë* 
___p
) / ___b; \

113 
uöt32_t
 
___bôs
 = -(
___m
 & -___m); \

114 
___bôs
 |
___m
 >> 32; \

115 
___bôs
 = (~___bits) << 1; \

122 i‡(!
___bôs
) { \

123 
___p
 /(
___m
 & -___m); \

124 
___m
 /= (___m & -___m); \

126 
___p
 >>
	`ûog2
(
___bôs
); \

127 
___m
 >>
	`ûog2
(
___bôs
); \

130 
___büs
 = 0; \

144 
___ªs
 = 
	`__¨ch_x¥od_64
(
___m
, 
___n
, 
___büs
); \

146 
___ªs
 /
___p
; \

147 })

	)

149 #i‚de‡
__¨ch_x¥od_64


160 
ölöe
 
uöt64_t
 
	$__¨ch_x¥od_64
(c⁄° 
uöt64_t
 
m
, uöt64_à
n
, 
boﬁ
 
büs
)

162 
uöt32_t
 
m_lo
 = 
m
;

163 
uöt32_t
 
m_hi
 = 
m
 >> 32;

164 
uöt32_t
 
n_lo
 = 
n
;

165 
uöt32_t
 
n_hi
 = 
n
 >> 32;

166 
uöt64_t
 
ªs
, 
tmp
;

168 i‡(!
büs
) {

169 
ªs
 = ((
uöt64_t
)
m_lo
 * 
n_lo
) >> 32;

170 } i‡(!(
m
 & ((1ULL << 63) | (1ULL << 31)))) {

172 
ªs
 = (
m
 + (
uöt64_t
)
m_lo
 * 
n_lo
) >> 32;

174 
ªs
 = 
m
 + (
uöt64_t
)
m_lo
 * 
n_lo
;

175 
tmp
 = (
ªs
 < 
m
) ? (1ULL << 32) : 0;

176 
ªs
 = (ª†>> 32Ë+ 
tmp
;

179 i‡(!(
m
 & ((1ULL << 63) | (1ULL << 31)))) {

181 
ªs
 +(
uöt64_t
)
m_lo
 * 
n_hi
;

182 
ªs
 +(
uöt64_t
)
m_hi
 * 
n_lo
;

183 
ªs
 >>= 32;

185 
tmp
 = 
ªs
 +(
uöt64_t
)
m_lo
 * 
n_hi
;

186 
ªs
 +(
uöt64_t
)
m_hi
 * 
n_lo
;

187 
tmp
 = (
ªs
 <Åmp) ? (1ULL << 32) : 0;

188 
ªs
 = (ª†>> 32Ë+ 
tmp
;

191 
ªs
 +(
uöt64_t
)
m_hi
 * 
n_hi
;

193  
ªs
;

194 
	}
}

197 #i‚de‡
__div64_32


198 
uöt32_t
 
__div64_32
(
uöt64_t
 *
dividíd
, uöt32_à
divis‹
);

204 
	#do_div
(
n
,
ba£
) ({ \

205 
uöt32_t
 
__ba£
 = (
ba£
); \

206 
uöt32_t
 
__ªm
; \

207 ()(((
	`ty≥of
((
n
)Ë*)0Ë=((
uöt64_t
 *)0)); \

208 i‡(
	`__buûtö_c⁄°™t_p
(
__ba£
) && \

209 
	`is_powî_of_2
(
__ba£
)) { \

210 
__ªm
 = (
n
Ë& (
__ba£
 - 1); \

211 (
n
Ë>>
	`ûog2
(
__ba£
); \

212 } i‡(
__div64_c⁄°32_is_OK
 && \

213 
	`__buûtö_c⁄°™t_p
(
__ba£
) && \

214 
__ba£
 != 0) { \

215 
uöt32_t
 
__ªs_lo
, 
__n_lo
 = (
n
); \

216 (
n
Ë
	`__div64_c⁄°32
“, 
__ba£
); \

218 
__ªs_lo
 = (
n
); \

219 
__ªm
 = 
__n_lo
 - 
__ªs_lo
 * 
__ba£
; \

220 } i‡(
	`likñy
(((
n
) >> 32) == 0)) { \

221 
__ªm
 = (
uöt32_t
)(
n
Ë% 
__ba£
; \

222 (
n
Ë(
uöt32_t
)“Ë/ 
__ba£
; \

224 
__ªm
 = 
	`__div64_32
(&(
n
), 
__ba£
); \

225 
__ªm
; \

226 })

	)

230 #îr‹ 
do_div
(Ë
d€s
 
nŸ
 
yë
 
suµ‹t
 
the
 
C64


237 
ölöe
 
uöt64_t
 
	$Œdiv
(
uöt64_t
 
dividíd
, 
uöt32_t
 
divis‹
)

239 
uöt64_t
 
__ªs
 = 
dividíd
;

240 
	`do_div
(
__ªs
, 
divis‹
);

241 (
__ªs
);

242 
	}
}

	@include/rosx/bitops.h

1 #i‚de‡
_LINUX_BITOPS_H


2 
	#_LINUX_BITOPS_H


	)

4 
	~<rosx/compûî.h
>

5 
	~<asm/ty≥s.h
>

6 
	~<asm-gíîic/bô•îl⁄g.h
>

8 #ifdef 
__KERNEL__


9 
	#BIT
(
ƒ
Ë(1UL << (ƒ))

	)

10 
	#BIT_ULL
(
ƒ
Ë(1ULL << (ƒ))

	)

11 
	#BIT_MASK
(
ƒ
Ë(1UL << (“rË% 
BITS_PER_LONG
))

	)

12 
	#BIT_WORD
(
ƒ
Ë(“rË/ 
BITS_PER_LONG
)

	)

13 
	#BIT_ULL_MASK
(
ƒ
Ë(1ULL << (“rË% 
BITS_PER_LONG_LONG
))

	)

14 
	#BIT_ULL_WORD
(
ƒ
Ë(“rË/ 
BITS_PER_LONG_LONG
)

	)

15 
	#BITS_PER_BYTE
 8

	)

16 
	#BITS_TO_LONGS
(
ƒ
Ë
	`DIV_ROUND_UP
“r, 
BITS_PER_BYTE
 * ())

	)

24 
	#GENMASK
(
h
, 
l
) \

25 (((~0ULË<< (
l
)Ë& (~0UL >> (
BITS_PER_LONG
 - 1 - (
h
))))

	)

27 
	#GENMASK_ULL
(
h
, 
l
) \

28 (((~0ULLË<< (
l
)Ë& (~0ULL >> (
BITS_PER_LONG_LONG
 - 1 - (
h
))))

	)

36 
ölöe
 
	$gíîic_ffs
(
x
)

38 
r
 = 1;

40 i‡(!
x
)

42 i‡(!(
x
 & 0xffff)) {

43 
x
 >>= 16;

44 
r
 += 16;

46 i‡(!(
x
 & 0xff)) {

47 
x
 >>= 8;

48 
r
 += 8;

50 i‡(!(
x
 & 0xf)) {

51 
x
 >>= 4;

52 
r
 += 4;

54 i‡(!(
x
 & 3)) {

55 
x
 >>= 2;

56 
r
 += 2;

58 i‡(!(
x
 & 1)) {

59 
x
 >>= 1;

60 
r
 += 1;

62  
r
;

63 
	}
}

72 
ölöe
 
	$gíîic_Ês
(
x
)

74 
r
 = 32;

76 i‡(!
x
)

78 i‡(!(
x
 & 0xffff0000u)) {

79 
x
 <<= 16;

80 
r
 -= 16;

82 i‡(!(
x
 & 0xff000000u)) {

83 
x
 <<= 8;

84 
r
 -= 8;

86 i‡(!(
x
 & 0xf0000000u)) {

87 
x
 <<= 4;

88 
r
 -= 4;

90 i‡(!(
x
 & 0xc0000000u)) {

91 
x
 <<= 2;

92 
r
 -= 2;

94 i‡(!(
x
 & 0x80000000u)) {

95 
x
 <<= 1;

96 
r
 -= 1;

98  
r
;

99 
	}
}

107 
ölöe
 
	$gíîic_hweight32
(
w
)

109 
ªs
 = (
w
 & 0x55555555) + ((w >> 1) & 0x55555555);

110 
ªs
 = (res & 0x33333333) + ((res >> 2) & 0x33333333);

111 
ªs
 = (res & 0x0F0F0F0F) + ((res >> 4) & 0x0F0F0F0F);

112 
ªs
 = (res & 0x00FF00FF) + ((res >> 8) & 0x00FF00FF);

113  (
ªs
 & 0x0000FFFF) + ((res >> 16) & 0x0000FFFF);

114 
	}
}

116 
ölöe
 
	$gíîic_hweight16
(
w
)

118 
ªs
 = (
w
 & 0x5555) + ((w >> 1) & 0x5555);

119 
ªs
 = (res & 0x3333) + ((res >> 2) & 0x3333);

120 
ªs
 = (res & 0x0F0F) + ((res >> 4) & 0x0F0F);

121  (
ªs
 & 0x00FF) + ((res >> 8) & 0x00FF);

122 
	}
}

124 
ölöe
 
	$gíîic_hweight8
(
w
)

126 
ªs
 = (
w
 & 0x55) + ((w >> 1) & 0x55);

127 
ªs
 = (res & 0x33) + ((res >> 2) & 0x33);

128  (
ªs
 & 0x0F) + ((res >> 4) & 0x0F);

129 
	}
}

131 
	~<asm/bô›s.h
>

135 #i‚de‡
PLATFORM__SET_BIT


136 
	#__£t_bô
 
gíîic_£t_bô


	)

139 #i‚de‡
PLATFORM__CLEAR_BIT


140 
	#__˛ór_bô
 
gíîic_˛ór_bô


	)

143 #i‚de‡
PLATFORM_FFS


144 
	#ffs
 
gíîic_ffs


	)

147 #i‚de‡
PLATFORM_FLS


148 
	#Ês
 
gíîic_Ês


	)

151 
ölöe
 
	$Ês_l⁄g
(
l
)

153 i‡((
l
) == 4)

154  
	`Ês
(
l
);

155  
	`Ês64
(
l
);

156 
	}
}

166 
ölöe
 
	$__ffs64
(
u64
 
w‹d
)

168 #i‡
BITS_PER_LONG
 == 32

169 i‡(((
u32
)
w‹d
) == 0UL)

170  
	`__ffs
((
u32
)(
w‹d
 >> 32)) + 32;

171 #ñi‡
BITS_PER_LONG
 != 64

172 #îr‹ 
BITS_PER_LONG
 
nŸ
 32 
‹
 64

174  
	`__ffs
(()
w‹d
);

175 
	}
}

186 
ölöe
 
	$gíîic_£t_bô
(
ƒ
, vﬁ©ûê*
addr
)

188 
mask
 = 
	`BIT_MASK
(
ƒ
);

189 *
p
 = ((*)
addr
Ë+ 
	`BIT_WORD
(
ƒ
);

191 *
p
 |
mask
;

192 
	}
}

194 
ölöe
 
	$gíîic_˛ór_bô
(
ƒ
, vﬁ©ûê*
addr
)

196 
mask
 = 
	`BIT_MASK
(
ƒ
);

197 *
p
 = ((*)
addr
Ë+ 
	`BIT_WORD
(
ƒ
);

199 *
p
 &~
mask
;

200 
	}
}

	@include/rosx/byteorder/big_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_BIG_ENDIAN_H


2 
	#_LINUX_BYTEORDER_BIG_ENDIAN_H


	)

4 #i‚de‡
__BIG_ENDIAN


5 
	#__BIG_ENDIAN
 4321

	)

7 #i‚de‡
__BIG_ENDIAN_BITFIELD


8 
	#__BIG_ENDIAN_BITFIELD


	)

10 
	#__BYTE_ORDER
 
__BIG_ENDIAN


	)

12 
	~<löux/compûî.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/byã‹dî/swab.h
>

16 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__f‹˚
 
__be32
)(
__u32
)(x))

	)

17 
	#__c⁄°™t_¡ohl
(
x
Ë((
__f‹˚
 
__u32
)(
__be32
)(x))

	)

18 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__f‹˚
 
__be16
)(
__u16
)(x))

	)

19 
	#__c⁄°™t_¡ohs
(
x
Ë((
__f‹˚
 
__u16
)(
__be16
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__f‹˚
 
__À64
)
	`___c⁄°™t_swab64
((x)))

	)

21 
	#__c⁄°™t_À64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__f‹˚
 
__u64
)(
__À64
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__f‹˚
 
__À32
)
	`___c⁄°™t_swab32
((x)))

	)

23 
	#__c⁄°™t_À32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__f‹˚
 
__u32
)(
__À32
)(x))

	)

24 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__f‹˚
 
__À16
)
	`___c⁄°™t_swab16
((x)))

	)

25 
	#__c⁄°™t_À16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__f‹˚
 
__u16
)(
__À16
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__f‹˚
 
__be64
)(
__u64
)(x))

	)

27 
	#__c⁄°™t_be64_to_˝u
(
x
Ë((
__f‹˚
 
__u64
)(
__be64
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__f‹˚
 
__be32
)(
__u32
)(x))

	)

29 
	#__c⁄°™t_be32_to_˝u
(
x
Ë((
__f‹˚
 
__u32
)(
__be32
)(x))

	)

30 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__f‹˚
 
__be16
)(
__u16
)(x))

	)

31 
	#__c⁄°™t_be16_to_˝u
(
x
Ë((
__f‹˚
 
__u16
)(
__be16
)(x))

	)

32 
	#__˝u_to_À64
(
x
Ë((
__f‹˚
 
__À64
)
	`__swab64
((x)))

	)

33 
	#__À64_to_˝u
(
x
Ë
	`__swab64
((
__f‹˚
 
__u64
)(
__À64
)(x))

	)

34 
	#__˝u_to_À32
(
x
Ë((
__f‹˚
 
__À32
)
	`__swab32
((x)))

	)

35 
	#__À32_to_˝u
(
x
Ë
	`__swab32
((
__f‹˚
 
__u32
)(
__À32
)(x))

	)

36 
	#__˝u_to_À16
(
x
Ë((
__f‹˚
 
__À16
)
	`__swab16
((x)))

	)

37 
	#__À16_to_˝u
(
x
Ë
	`__swab16
((
__f‹˚
 
__u16
)(
__À16
)(x))

	)

38 
	#__˝u_to_be64
(
x
Ë((
__f‹˚
 
__be64
)(
__u64
)(x))

	)

39 
	#__be64_to_˝u
(
x
Ë((
__f‹˚
 
__u64
)(
__be64
)(x))

	)

40 
	#__˝u_to_be32
(
x
Ë((
__f‹˚
 
__be32
)(
__u32
)(x))

	)

41 
	#__be32_to_˝u
(
x
Ë((
__f‹˚
 
__u32
)(
__be32
)(x))

	)

42 
	#__˝u_to_be16
(
x
Ë((
__f‹˚
 
__be16
)(
__u16
)(x))

	)

43 
	#__be16_to_˝u
(
x
Ë((
__f‹˚
 
__u16
)(
__be16
)(x))

	)

45 
ölöe
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

47  (
__f‹˚
 
__À64
)
	`__swab64p
(
p
);

48 
	}
}

49 
ölöe
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

51  
	`__swab64p
((
__u64
 *)
p
);

52 
	}
}

53 
ölöe
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

55  (
__f‹˚
 
__À32
)
	`__swab32p
(
p
);

56 
	}
}

57 
ölöe
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

59  
	`__swab32p
((
__u32
 *)
p
);

60 
	}
}

61 
ölöe
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

63  (
__f‹˚
 
__À16
)
	`__swab16p
(
p
);

64 
	}
}

65 
ölöe
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

67  
	`__swab16p
((
__u16
 *)
p
);

68 
	}
}

69 
ölöe
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

71  (
__f‹˚
 
__be64
)*
p
;

72 
	}
}

73 
ölöe
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

75  (
__f‹˚
 
__u64
)*
p
;

76 
	}
}

77 
ölöe
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

79  (
__f‹˚
 
__be32
)*
p
;

80 
	}
}

81 
ölöe
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

83  (
__f‹˚
 
__u32
)*
p
;

84 
	}
}

85 
ölöe
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

87  (
__f‹˚
 
__be16
)*
p
;

88 
	}
}

89 
ölöe
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

91  (
__f‹˚
 
__u16
)*
p
;

92 
	}
}

93 
	#__˝u_to_À64s
(
x
Ë
	`__swab64s
((x))

	)

94 
	#__À64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

95 
	#__˝u_to_À32s
(
x
Ë
	`__swab32s
((x))

	)

96 
	#__À32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

97 
	#__˝u_to_À16s
(
x
Ë
	`__swab16s
((x))

	)

98 
	#__À16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

99 
	#__˝u_to_be64s
(
x
Ëdÿ{ ()(x); } 0)

	)

100 
	#__be64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

101 
	#__˝u_to_be32s
(
x
Ëdÿ{ ()(x); } 0)

	)

102 
	#__be32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

103 
	#__˝u_to_be16s
(
x
Ëdÿ{ ()(x); } 0)

	)

104 
	#__be16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

106 #ifde‡
__KERNEL__


107 
	~<löux/byã‹dî/gíîic.h
>

	@include/rosx/byteorder/generic.h

1 #i‚de‡
_LINUX_BYTEORDER_GENERIC_H


2 
	#_LINUX_BYTEORDER_GENERIC_H


	)

82 #i‡
deföed
(
__KERNEL__
)

87 
	#˝u_to_À64
 
__˝u_to_À64


	)

88 
	#À64_to_˝u
 
__À64_to_˝u


	)

89 
	#˝u_to_À32
 
__˝u_to_À32


	)

90 
	#À32_to_˝u
 
__À32_to_˝u


	)

91 
	#˝u_to_À16
 
__˝u_to_À16


	)

92 
	#À16_to_˝u
 
__À16_to_˝u


	)

93 
	#˝u_to_be64
 
__˝u_to_be64


	)

94 
	#be64_to_˝u
 
__be64_to_˝u


	)

95 
	#˝u_to_be32
 
__˝u_to_be32


	)

96 
	#be32_to_˝u
 
__be32_to_˝u


	)

97 
	#˝u_to_be16
 
__˝u_to_be16


	)

98 
	#be16_to_˝u
 
__be16_to_˝u


	)

99 
	#˝u_to_À64p
 
__˝u_to_À64p


	)

100 
	#À64_to_˝up
 
__À64_to_˝up


	)

101 
	#˝u_to_À32p
 
__˝u_to_À32p


	)

102 
	#À32_to_˝up
 
__À32_to_˝up


	)

103 
	#˝u_to_À16p
 
__˝u_to_À16p


	)

104 
	#À16_to_˝up
 
__À16_to_˝up


	)

105 
	#˝u_to_be64p
 
__˝u_to_be64p


	)

106 
	#be64_to_˝up
 
__be64_to_˝up


	)

107 
	#˝u_to_be32p
 
__˝u_to_be32p


	)

108 
	#be32_to_˝up
 
__be32_to_˝up


	)

109 
	#˝u_to_be16p
 
__˝u_to_be16p


	)

110 
	#be16_to_˝up
 
__be16_to_˝up


	)

111 
	#˝u_to_À64s
 
__˝u_to_À64s


	)

112 
	#À64_to_˝us
 
__À64_to_˝us


	)

113 
	#˝u_to_À32s
 
__˝u_to_À32s


	)

114 
	#À32_to_˝us
 
__À32_to_˝us


	)

115 
	#˝u_to_À16s
 
__˝u_to_À16s


	)

116 
	#À16_to_˝us
 
__À16_to_˝us


	)

117 
	#˝u_to_be64s
 
__˝u_to_be64s


	)

118 
	#be64_to_˝us
 
__be64_to_˝us


	)

119 
	#˝u_to_be32s
 
__˝u_to_be32s


	)

120 
	#be32_to_˝us
 
__be32_to_˝us


	)

121 
	#˝u_to_be16s
 
__˝u_to_be16s


	)

122 
	#be16_to_˝us
 
__be16_to_˝us


	)

140 #unde‡
¡ohl


141 #unde‡
¡ohs


142 #unde‡
ht⁄l


143 #unde‡
ht⁄s


149 #i‡
deföed
(
__KERNEL__
Ë|| (deföed (
__GLIBC__
) && __GLIBC__ >= 2)

150 
__u32
 
¡ohl
(__u32);

151 
__u32
 
ht⁄l
(__u32);

153 
¡ohl
();

154 
ht⁄l
();

156 
¡ohs
();

157 
ht⁄s
();

160 #i‡
deföed
(
__GNUC__
) && (__GNUC__ >= 2)

162 
	#___ht⁄l
(
x
Ë
	`__˝u_to_be32
(x)

	)

163 
	#___ht⁄s
(
x
Ë
	`__˝u_to_be16
(x)

	)

164 
	#___¡ohl
(
x
Ë
	`__be32_to_˝u
(x)

	)

165 
	#___¡ohs
(
x
Ë
	`__be16_to_˝u
(x)

	)

167 #i‡
deföed
(
__KERNEL__
Ë|| (deföed (
__GLIBC__
) && __GLIBC__ >= 2)

168 
	#ht⁄l
(
x
Ë
	`___ht⁄l
(x)

	)

169 
	#¡ohl
(
x
Ë
	`___¡ohl
(x)

	)

171 
	#ht⁄l
(
x
Ë(()
	`___ht⁄l
(x))

	)

172 
	#¡ohl
(
x
Ë(()
	`___¡ohl
(x))

	)

174 
	#ht⁄s
(
x
Ë
	`___ht⁄s
(x)

	)

175 
	#¡ohs
(
x
Ë
	`___¡ohs
(x)

	)

	@include/rosx/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

10 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

12 
	~<löux/compûî.h
>

13 
	~<löux/ty≥s.h
>

14 
	~<löux/byã‹dî/swab.h
>

16 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__f‹˚
 
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

17 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__f‹˚
 
__be32
)(x))

	)

18 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__f‹˚
 
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

19 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__f‹˚
 
__be16
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__f‹˚
 
__À64
)(
__u64
)(x))

	)

21 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__f‹˚
 
__u64
)(
__À64
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__f‹˚
 
__À32
)(
__u32
)(x))

	)

23 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__f‹˚
 
__u32
)(
__À32
)(x))

	)

24 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__f‹˚
 
__À16
)(
__u16
)(x))

	)

25 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__f‹˚
 
__u16
)(
__À16
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__f‹˚
 
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

27 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__f‹˚
 
__u64
)(
__be64
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__f‹˚
 
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

29 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__f‹˚
 
__u32
)(
__be32
)(x))

	)

30 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__f‹˚
 
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

31 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__f‹˚
 
__u16
)(
__be16
)(x))

	)

32 
	#__˝u_to_À64
(
x
Ë((
__f‹˚
 
__À64
)(
__u64
)(x))

	)

33 
	#__À64_to_˝u
(
x
Ë((
__f‹˚
 
__u64
)(
__À64
)(x))

	)

34 
	#__˝u_to_À32
(
x
Ë((
__f‹˚
 
__À32
)(
__u32
)(x))

	)

35 
	#__À32_to_˝u
(
x
Ë((
__f‹˚
 
__u32
)(
__À32
)(x))

	)

36 
	#__˝u_to_À16
(
x
Ë((
__f‹˚
 
__À16
)(
__u16
)(x))

	)

37 
	#__À16_to_˝u
(
x
Ë((
__f‹˚
 
__u16
)(
__À16
)(x))

	)

38 
	#__˝u_to_be64
(
x
Ë((
__f‹˚
 
__be64
)
	`__swab64
((x)))

	)

39 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__f‹˚
 
__u64
)(
__be64
)(x))

	)

40 
	#__˝u_to_be32
(
x
Ë((
__f‹˚
 
__be32
)
	`__swab32
((x)))

	)

41 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__f‹˚
 
__u32
)(
__be32
)(x))

	)

42 
	#__˝u_to_be16
(
x
Ë((
__f‹˚
 
__be16
)
	`__swab16
((x)))

	)

43 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__f‹˚
 
__u16
)(
__be16
)(x))

	)

45 
ölöe
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

47  (
__f‹˚
 
__À64
)*
p
;

48 
	}
}

49 
ölöe
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

51  (
__f‹˚
 
__u64
)*
p
;

52 
	}
}

53 
ölöe
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

55  (
__f‹˚
 
__À32
)*
p
;

56 
	}
}

57 
ölöe
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

59  (
__f‹˚
 
__u32
)*
p
;

60 
	}
}

61 
ölöe
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

63  (
__f‹˚
 
__À16
)*
p
;

64 
	}
}

65 
ölöe
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

67  (
__f‹˚
 
__u16
)*
p
;

68 
	}
}

69 
ölöe
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

71  (
__f‹˚
 
__be64
)
	`__swab64p
(
p
);

72 
	}
}

73 
ölöe
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

75  
	`__swab64p
((
__u64
 *)
p
);

76 
	}
}

77 
ölöe
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

79  (
__f‹˚
 
__be32
)
	`__swab32p
(
p
);

80 
	}
}

81 
ölöe
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

83  
	`__swab32p
((
__u32
 *)
p
);

84 
	}
}

85 
ölöe
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

87  (
__f‹˚
 
__be16
)
	`__swab16p
(
p
);

88 
	}
}

89 
ölöe
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

91  
	`__swab16p
((
__u16
 *)
p
);

92 
	}
}

93 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

98 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

99 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

100 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

101 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

102 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

103 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

104 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

106 #ifde‡
__KERNEL__


107 
	~<löux/byã‹dî/gíîic.h
>

	@include/rosx/byteorder/swab.h

1 #i‚de‡
_LINUX_BYTEORDER_SWAB_H


2 
	#_LINUX_BYTEORDER_SWAB_H


	)

21 
	#___swab16
(
x
) \

22 ((
__u16
)( \

23 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

24 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8Ë))

	)

25 
	#___swab32
(
x
) \

26 ((
__u32
)( \

27 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

28 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

29 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

30 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24Ë))

	)

31 
	#___swab64
(
x
) \

32 ((
__u64
)( \

33 (
__u64
)(((__u64)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

34 (
__u64
)(((__u64)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

35 (
__u64
)(((__u64)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

36 (
__u64
)(((__u64)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

37 (
__u64
)(((__u64)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

38 (
__u64
)(((__u64)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

39 (
__u64
)(((__u64)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

40 (
__u64
)(((__u64)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56Ë))

	)

45 #i‚de‡
__¨ch__swab16


46 
	#__¨ch__swab16
(
x
Ë
	`___swab16
(x)

	)

48 #i‚de‡
__¨ch__swab32


49 
	#__¨ch__swab32
(
x
Ë
	`___swab32
(x)

	)

51 #i‚de‡
__¨ch__swab64


52 
	#__¨ch__swab64
(
x
Ë
	`___swab64
(x)

	)

55 #i‚de‡
__¨ch__swab16p


56 
	#__¨ch__swab16p
(
x
Ë
	`__swab16
(*(x))

	)

58 #i‚de‡
__¨ch__swab32p


59 
	#__¨ch__swab32p
(
x
Ë
	`__swab32
(*(x))

	)

61 #i‚de‡
__¨ch__swab64p


62 
	#__¨ch__swab64p
(
x
Ë
	`__swab64
(*(x))

	)

65 #i‚de‡
__¨ch__swab16s


66 
	#__¨ch__swab16s
(
x
Ëdÿ{ *(xË
	`__swab16p
((x)); } 0)

	)

68 #i‚de‡
__¨ch__swab32s


69 
	#__¨ch__swab32s
(
x
Ëdÿ{ *(xË
	`__swab32p
((x)); } 0)

	)

71 #i‚de‡
__¨ch__swab64s


72 
	#__¨ch__swab64s
(
x
Ëdÿ{ *(xË
	`__swab64p
((x)); } 0)

	)

79 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ >2Ë&& deföed(
__OPTIMIZE__
)

80 
	#__swab16
(
x
) \

81 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

82 
	`___swab16
((
x
)) : \

83 
	`__fswab16
((
x
)))

	)

84 
	#__swab32
(
x
) \

85 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

86 
	`___swab32
((
x
)) : \

87 
	`__fswab32
((
x
)))

	)

88 
	#__swab64
(
x
) \

89 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

90 
	`___swab64
((
x
)) : \

91 
	`__fswab64
((
x
)))

	)

93 
	#__swab16
(
x
Ë
	`__fswab16
(x)

	)

94 
	#__swab32
(
x
Ë
	`__fswab32
(x)

	)

95 
	#__swab64
(
x
Ë
	`__fswab64
(x)

	)

99 
__ölöe__
 
__©åibuã__
((c⁄°)Ë
__u16
 
	$__fswab16
(
__u16
 
x
)

101  
	`__¨ch__swab16
(
x
);

102 
	}
}

103 
__ölöe__
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
x
)

105  
	`__¨ch__swab16p
(
x
);

106 
	}
}

107 
__ölöe__
 
	$__swab16s
(
__u16
 *
addr
)

109 
	`__¨ch__swab16s
(
addr
);

110 
	}
}

112 
__ölöe__
 
__©åibuã__
((c⁄°)Ë
__u32
 
	$__fswab32
(
__u32
 
x
)

114  
	`__¨ch__swab32
(
x
);

115 
	}
}

116 
__ölöe__
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
x
)

118  
	`__¨ch__swab32p
(
x
);

119 
	}
}

120 
__ölöe__
 
	$__swab32s
(
__u32
 *
addr
)

122 
	`__¨ch__swab32s
(
addr
);

123 
	}
}

125 
__ölöe__
 
__©åibuã__
((c⁄°)Ë
__u64
 
	$__fswab64
(
__u64
 
x
)

127 #ifde‡
__SWAB_64_THRU_32__


128 
__u32
 
h
 = 
x
 >> 32;

129 
__u32
 
l
 = 
x
 & ((1ULL<<32)-1);

130  (((
__u64
)
	`__swab32
(
l
)Ë<< 32Ë| ((__u64)(__swab32(
h
)));

132  
	`__¨ch__swab64
(
x
);

134 
	}
}

135 
__ölöe__
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
x
)

137  
	`__¨ch__swab64p
(
x
);

138 
	}
}

139 
__ölöe__
 
	$__swab64s
(
__u64
 *
addr
)

141 
	`__¨ch__swab64s
(
addr
);

142 
	}
}

144 #i‡
deföed
(
__KERNEL__
)

145 
	#swab16
 
__swab16


	)

146 
	#swab32
 
__swab32


	)

147 
	#swab64
 
__swab64


	)

148 
	#swab16p
 
__swab16p


	)

149 
	#swab32p
 
__swab32p


	)

150 
	#swab64p
 
__swab64p


	)

151 
	#swab16s
 
__swab16s


	)

152 
	#swab32s
 
__swab32s


	)

153 
	#swab64s
 
__swab64s


	)

	@include/rosx/compiler-gcc.h

1 #i‚de‡
__LINUX_COMPILER_H


8 
	#GCC_VERSION
 (
__GNUC__
 * 10000 \

9 + 
__GNUC_MINOR__
 * 100 \

10 + 
__GNUC_PATCHLEVEL__
)

	)

15 
	#b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

29 
	#b¨rõr_d©a
(
±r
Ë
__asm__
 
	`__vﬁ©ûe__
("": :"r"’åË:"mem‹y")

	)

49 
	#RELOC_HIDE
(
±r
, 
off
) \

51 
__±r
; \

52 
	`__asm__
 ("" : "Ù"(
__±r
Ë: "0"(
±r
)); \

53 (
	`ty≥of
(
±r
)Ë(
__±r
 + (
off
)); \

54 })

	)

57 
	#OPTIMIZER_HIDE_VAR
(
v¨
) \

58 
	`__asm__
 ("" : "Ù" (
v¨
Ë: "0" (v¨))

	)

60 #ifde‡
__CHECKER__


61 
	#__mu°_be_¨øy
(
a
Ë0

	)

64 
	#__mu°_be_¨øy
(
a
Ë
	`BUILD_BUG_ON_ZERO
(
	`__ßme_ty≥
(◊), &◊)[0]))

	)

71 #i‡!
deföed
(
CONFIG_ARCH_SUPPORTS_OPTIMIZED_INLINING
) || \

72 !
deföed
(
CONFIG_OPTIMIZE_INLINING
Ë|| (
	g__GNUC__
 < 4)

73 
	#ölöe
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
)Ë
nŸø˚


	)

74 
	#__ölöe__
 
__ölöe__
 
	`__©åibuã__
((
Æways_ölöe
)Ë
nŸø˚


	)

75 
	#__ölöe
 
__ölöe
 
	`__©åibuã__
((
Æways_ölöe
)Ë
nŸø˚


	)

78 
	#ölöe
 
ölöe
 
nŸø˚


	)

79 
	#__ölöe__
 
__ölöe__
 
nŸø˚


	)

80 
	#__ölöe
 
__ölöe
 
nŸø˚


	)

83 #unde‡
__Æways_ölöe


84 
	#__Æways_ölöe
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

85 
	#noölöe
 
	`__©åibuã__
((
noölöe
))

	)

87 
	#__dïªˇãd
 
	`__©åibuã__
((
dïªˇãd
))

	)

88 
	#__∑cked
 
	`__©åibuã__
((
∑cked
))

	)

89 
	#__wók
 
	`__©åibuã__
((
wók
))

	)

90 
	#__Æüs
(
symbﬁ
Ë
	`__©åibuã__
((
	`Æüs
(#symbﬁ)))

	)

104 
	#__«ked
 
	`__©åibuã__
((
«ked
)Ë
noölöe
 
__no˛⁄e
 
nŸø˚


	)

106 
	#__n‹ëu∫
 
	`__©åibuã__
((
n‹ëu∫
))

	)

118 
	#__puª
 
	`__©åibuã__
((
puª
))

	)

119 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

120 
	#__¥ötf
(
a
, 
b
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,á, b)))

	)

121 
	#__sˇnf
(
a
, 
b
Ë
	`__©åibuã__
((
	`f‹m©
(
sˇnf
,á, b)))

	)

122 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
((
__c⁄°__
))

	)

123 
	#__maybe_unu£d
 
	`__©åibuã__
((
unu£d
))

	)

124 
	#__Æways_unu£d
 
	`__©åibuã__
((
unu£d
))

	)

128 #i‡
GCC_VERSION
 < 30200

129 #îr‹ 
S‹ry
, 
your
 
compûî
 
is
 
too
 
ﬁd
 - 
∂ó£
 
upgøde
 
ô
.

132 #i‡
GCC_VERSION
 < 30300

133 
	#__u£d
 
	`__©åibuã__
((
__unu£d__
))

	)

135 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

138 #ifde‡
CONFIG_GCOV_KERNEL


139 #i‡
GCC_VERSION
 < 30400

144 #i‡
GCC_VERSION
 >= 30400

145 
	#__mu°_check
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

148 #i‡
GCC_VERSION
 >= 40000

151 #ifde‡
__KERNEL__


152 #i‡
GCC_VERSION
 >= 40100 && GCC_VERSION <= 40101

153 #îr‹ 
Your
 
vîsi⁄
 
of
 
gcc
 
miscompûes
 
the
 
__wók
 
dúe˘ive


157 
	#__u£d
 
	`__©åibuã__
((
__u£d__
))

	)

158 
	#__compûî_off£tof
(
a
, 
b
) \

159 
	`__buûtö_off£tof
(
a
, 
b
)

	)

161 #i‡
GCC_VERSION
 >= 40100 && GCC_VERSION < 40600

162 
	#__compûëime_obje˘_size
(
obj
Ë
	`__buûtö_obje˘_size
(obj, 0)

	)

165 #i‡
GCC_VERSION
 >= 40300

180 
	#__cﬁd
 
	`__©åibuã__
((
__cﬁd__
))

	)

182 
	#__UNIQUE_ID
(
¥efix
Ë
	`__PASTE
(__PASTE(
__UNIQUE_ID_
,Öªfix), 
__COUNTER__
)

	)

184 #i‚de‡
__CHECKER__


185 
	#__compûëime_w¨nög
(
mesßge
Ë
	`__©åibuã__
((
	`w¨nög
(mesßge)))

	)

186 
	#__compûëime_îr‹
(
mesßge
Ë
	`__©åibuã__
((
	`îr‹
(mesßge)))

	)

190 #i‡
GCC_VERSION
 >= 40500

200 
	#uƒóchabÀ
(Ë
	`__buûtö_uƒóchabÀ
()

	)

203 
	#__no˛⁄e
 
	`__©åibuã__
((
__no˛⁄e__
))

	)

207 #i‡
GCC_VERSION
 >= 40600

214 
	#__visibÀ
 
	`__©åibuã__
((
exã∫Æly_visibÀ
))

	)

218 #i‡
GCC_VERSION
 >40900 && !
deföed
(
__CHECKER__
)

231 
	#__assume_Æig√d
(
a
, ...Ë
	`__©åibuã__
((
	`__assume_Æig√d__
◊, ## 
__VA_ARGS__
)))

	)

243 
	#asm_vﬁ©ûe_gŸo
(
x
...Ëdÿ{ 
asm
 (x); 
	`asm
 (""); } 0)

	)

245 #ifde‡
CONFIG_ARCH_USE_BUILTIN_BSWAP


246 #i‡
GCC_VERSION
 >= 40400

247 
	#__HAVE_BUILTIN_BSWAP32__


	)

248 
	#__HAVE_BUILTIN_BSWAP64__


	)

250 #i‡
GCC_VERSION
 >40800 || (
deföed
(
__powîpc__
) && GCC_VERSION >= 40600)

251 
	#__HAVE_BUILTIN_BSWAP16__


	)

255 #i‡
GCC_VERSION
 >= 50000

256 
	#KASAN_ABI_VERSION
 4

	)

257 #ñi‡
GCC_VERSION
 >= 40902

258 
	#KASAN_ABI_VERSION
 3

	)

261 #i‡
GCC_VERSION
 >= 40902

267 
	#__no_ßnôize_addªss
 
	`__©åibuã__
((
no_ßnôize_addªss
))

	)

272 #i‡!
deföed
(
__no˛⁄e
)

273 
	#__no˛⁄e


	)

276 #i‡!
deföed
(
__no_ßnôize_addªss
)

277 
	#__no_ßnôize_addªss


	)

284 
	#unöôülized_v¨
(
x
Ëx = 
	)
x

	@include/rosx/compiler.h

1 #i‚de‡
__LINUX_COMPILER_H


2 
	#__LINUX_COMPILER_H


	)

4 #i‚de‡
__ASSEMBLY__


7 
	#___PASTE
(
a
,
b
Ëa##
	)
b

8 
	#__PASTE
(
a
,
b
Ë
	`___PASTE
◊,b)

	)

10 #ifde‡
__KERNEL__


12 #ifde‡
__GNUC__


13 
	~<rosx/compûî-gcc.h
>

16 #i‡
deföed
(
CC_USING_HOTPATCH
Ë&& !deföed(
__CHECKER__
)

17 
	#nŸø˚
 
	`__©åibuã__
((
	`hŸ∑tch
(0,0)))

	)

19 
	#nŸø˚
 
	`__©åibuã__
((
no_ö°rumít_fun˘i⁄
))

	)

25 #ifde‡
__INTEL_COMPILER


26 
	~<löux/compûî-öãl.h
>

32 #ifde‡
__˛™g__


33 
	~<löux/compûî-˛™g.h
>

42 
	s·ø˚_bønch_d©a
 {

43 c⁄° *
	mfunc
;

44 c⁄° *
	mfûe
;

45 
	mlöe
;

48 
	mc‹ª˘
;

49 
	möc‹ª˘
;

52 
	mmiss
;

53 
	mhô
;

55 
	mmiss_hô
[2];

63 #i‡
deföed
(
CONFIG_TRACE_BRANCH_PROFILING
) \

64 && !
deföed
(
DISABLE_BRANCH_PROFILING
Ë&& !
	$deföed
(
__CHECKER__
)

65 
	`·ø˚_likñy_upd©e
(
·ø˚_bønch_d©a
 *
f
, 
vÆ
, 
ex≥˘
);

67 
	#likñy_nŸø˚
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

68 
	#u∆ikñy_nŸø˚
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

70 
	#__bønch_check__
(
x
, 
ex≥˘
) ({ \

71 
______r
; \

72 
·ø˚_bønch_d©a
 \

73 
	`__©åibuã__
((
	`__Æig√d__
(4))) \

74 
	`__©åibuã__
((
	`£˘i⁄
("_ftrace_annotated_branch"))) \

75 
______f
 = { \

76 .
func
 = 
__func__
, \

77 .
fûe
 = 
__FILE__
, \

78 .
löe
 = 
__LINE__
, \

80 
______r
 = 
	`likñy_nŸø˚
(
x
); \

81 
	`·ø˚_likñy_upd©e
(&
______f
, 
______r
, 
ex≥˘
); \

82 
______r
; \

83 
	}
})

	)

90 #i‚de‡
likñy


91 
	#likñy
(
x
Ë(
	`__buûtö_c⁄°™t_p
(xË? !!(xË: 
	`__bønch_check__
(x, 1))

	)

93 #i‚de‡
u∆ikñy


94 
	#u∆ikñy
(
x
Ë(
	`__buûtö_c⁄°™t_p
(xË? !!(xË: 
	`__bønch_check__
(x, 0))

	)

97 #ifde‡
CONFIG_PROFILE_ALL_BRANCHES


102 
c⁄d
, ...Ë
	`__åa˚_if
–(c⁄d , ## 
__VA_ARGS__
Ë)

	)

103 
	#__åa˚_if
(
c⁄d
) \

104 i‡(
	`__buûtö_c⁄°™t_p
(!!(
c⁄d
)) ? !!(cond) : \

106 
______r
; \

107 
·ø˚_bønch_d©a
 \

108 
	`__©åibuã__
((
	`__Æig√d__
(4))) \

109 
	`__©åibuã__
((
	`£˘i⁄
("_ftrace_branch"))) \

110 
______f
 = { \

111 .
func
 = 
__func__
, \

112 .
fûe
 = 
__FILE__
, \

113 .
löe
 = 
__LINE__
, \

115 
______r
 = !!(
c⁄d
); \

116 
______f
.
miss_hô
[
______r
]++; \

117 
______r
; \

118 }))

	)

122 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

123 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

127 #i‚de‡
b¨rõr


128 
	#b¨rõr
(Ë
	`__mem‹y_b¨rõr
()

	)

131 #i‚de‡
b¨rõr_d©a


132 
	#b¨rõr_d©a
(
±r
Ë
	`b¨rõr
()

	)

136 #i‚de‡
uƒóchabÀ


137 
	#uƒóchabÀ
(Ëdÿ{ } 1)

	)

140 #i‚de‡
RELOC_HIDE


141 
	#RELOC_HIDE
(
±r
, 
off
) \

142 ({ 
__±r
; \

143 
__±r
 = (Ë(
±r
); \

144 (
	`ty≥of
(
±r
)Ë(
__±r
 + (
off
)); })

	)

147 #i‚de‡
OPTIMIZER_HIDE_VAR


148 
	#OPTIMIZER_HIDE_VAR
(
v¨
Ë
	`b¨rõr
()

	)

152 #i‚de‡
__UNIQUE_ID


153 
	#__UNIQUE_ID
(
¥efix
Ë
	`__PASTE
(__PASTE(
__UNIQUE_ID_
,Öªfix), 
__LINE__
)

	)

156 
	~<löux/ty≥s.h
>

158 
	#__READ_ONCE_SIZE
 \

160 
size
) { \

161 1: *(
__u8
 *)
ªs
 = *(vﬁ©ûê__u8 *)
p
; ; \

162 2: *(
__u16
 *)
ªs
 = *(vﬁ©ûê__u16 *)
p
; ; \

163 4: *(
__u32
 *)
ªs
 = *(vﬁ©ûê__u32 *)
p
; ; \

164 8: *(
__u64
 *)
ªs
 = *(vﬁ©ûê__u64 *)
p
; ; \

166 
	`b¨rõr
(); \

167 
	`__buûtö_mem˝y
((*)
ªs
, (c⁄° *)
p
, 
size
); \

168 
	`b¨rõr
(); \

170 })

	)

172 
__Æways_ölöe


173 
	$__ªad_⁄˚_size
(c⁄° vﬁ©ûê*
p
, *
ªs
, 
size
)

175 
__READ_ONCE_SIZE
;

176 
	}
}

178 #ifde‡
CONFIG_KASAN


185 
__no_ßnôize_addªss
 
__maybe_unu£d


186 
	$__ªad_⁄˚_size_nocheck
(c⁄° vﬁ©ûê*
p
, *
ªs
, 
size
)

188 
__READ_ONCE_SIZE
;

189 
	}
}

191 
__Æways_ölöe


192 
	$__ªad_⁄˚_size_nocheck
(c⁄° vﬁ©ûê*
p
, *
ªs
, 
size
)

194 
__READ_ONCE_SIZE
;

195 
	}
}

198 
__Æways_ölöe
 
	$__wrôe_⁄˚_size
(vﬁ©ûê*
p
, *
ªs
, 
size
)

200 
size
) {

201 1: *(vﬁ©ûê
__u8
 *)
p
 = *(__u8 *)
ªs
; ;

202 2: *(vﬁ©ûê
__u16
 *)
p
 = *(__u16 *)
ªs
; ;

203 4: *(vﬁ©ûê
__u32
 *)
p
 = *(__u32 *)
ªs
; ;

204 8: *(vﬁ©ûê
__u64
 *)
p
 = *(__u64 *)
ªs
; ;

206 
	`b¨rõr
();

207 
	`__buûtö_mem˝y
((*)
p
, (c⁄° *)
ªs
, 
size
);

208 
	`b¨rõr
();

210 
	}
}

234 
	#__READ_ONCE
(
x
, 
check
) \

236 uni⁄ { 
	`ty≥of
(
x
Ë
__vÆ
; 
__c
[1]; } 
__u
; \

237 i‡(
check
) \

238 
	`__ªad_⁄˚_size
(&(
x
), 
__u
.
__c
, (x)); \

240 
	`__ªad_⁄˚_size_nocheck
(&(
x
), 
__u
.
__c
, (x)); \

241 
__u
.
__vÆ
; \

242 })

	)

243 
	#READ_ONCE
(
x
Ë
	`__READ_ONCE
(x, 1)

	)

249 
	#READ_ONCE_NOCHECK
(
x
Ë
	`__READ_ONCE
(x, 0)

	)

251 
	#WRITE_ONCE
(
x
, 
vÆ
) \

253 uni⁄ { 
	`ty≥of
(
x
Ë
__vÆ
; 
__c
[1]; } 
__u
 = \

254 { .
__vÆ
 = (
__f‹˚
 
	`ty≥of
(
x
)Ë(
vÆ
) }; \

255 
	`__wrôe_⁄˚_size
(&(
x
), 
__u
.
__c
, (x)); \

256 
__u
.
__vÆ
; \

257 })

	)

270 
	#smp_c⁄d_acquúe
(
c⁄d
) do { \

271 !(
c⁄d
)) \

272 
	`˝u_ªœx
(); \

273 
	`smp_rmb
(); \

274 } 0)

	)

280 #ifde‡
__KERNEL__


287 #i‚de‡
__dïªˇãd


288 
	#__dïªˇãd


	)

291 #ifde‡
MODULE


292 
	#__dïªˇãd_f‹_moduÀs
 
__dïªˇãd


	)

294 
	#__dïªˇãd_f‹_moduÀs


	)

297 #i‚de‡
__mu°_check


298 
	#__mu°_check


	)

301 #i‚de‡
CONFIG_ENABLE_MUST_CHECK


302 #unde‡
__mu°_check


303 
	#__mu°_check


	)

305 #i‚de‡
CONFIG_ENABLE_WARN_DEPRECATED


306 #unde‡
__dïªˇãd


307 #unde‡
__dïªˇãd_f‹_moduÀs


308 
	#__dïªˇãd


	)

309 
	#__dïªˇãd_f‹_moduÀs


	)

330 #i‚de‡
__u£d


331 
	#__u£d


	)

334 #i‚de‡
__maybe_unu£d


335 
	#__maybe_unu£d


	)

338 #i‚de‡
__Æways_unu£d


339 
	#__Æways_unu£d


	)

342 #i‚de‡
noölöe


343 
	#noölöe


	)

350 
	#noölöe_f‹_°ack
 
noölöe


	)

352 #i‚de‡
__Æways_ölöe


353 
	#__Æways_ölöe
 
ölöe


	)

372 #i‚de‡
__©åibuã_c⁄°__


373 
	#__©åibuã_c⁄°__


	)

381 #i‚de‡
__cﬁd


382 
	#__cﬁd


	)

386 #i‚de‡
__£˘i⁄


387 
	#__£˘i⁄
(
S
Ë
	`__©åibuã__
 ((
	`__£˘i⁄__
(#S)))

	)

390 #i‚de‡
__visibÀ


391 
	#__visibÀ


	)

397 #i‚de‡
__assume_Æig√d


398 
	#__assume_Æig√d
(
a
, ...)

	)

403 #i‚de‡
__ßme_ty≥


404 
	#__ßme_ty≥
(
a
, 
b
Ë
	`__buûtö_ty≥s_com∑tibÀ_p
(
	`ty≥of
◊),Åy≥of(b))

	)

408 #i‚de‡
__«tive_w‹d


409 
	#__«tive_w‹d
(
t
Ë(—Ë=(Ë|| —Ë=(Ë|| —Ë=(Ë|| —Ë=())

	)

413 #i‚de‡
__compûëime_obje˘_size


414 
	#__compûëime_obje˘_size
(
obj
Ë-1

	)

416 #i‚de‡
__compûëime_w¨nög


417 
	#__compûëime_w¨nög
(
mesßge
)

	)

419 #i‚de‡
__compûëime_îr‹


420 
	#__compûëime_îr‹
(
mesßge
)

	)

427 #i‚de‡
__CHECKER__


428 
	#__compûëime_îr‹_ÁŒback
(
c⁄dôi⁄
) \

429 dÿ{ (()([1 - 2 * 
c⁄dôi⁄
])); } 0)

	)

432 #i‚de‡
__compûëime_îr‹_ÁŒback


433 
	#__compûëime_îr‹_ÁŒback
(
c⁄dôi⁄
Ëdÿ{ } 0)

	)

436 #ifde‡
__OPTIMIZE__


437 
	#__compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
¥efix
, 
suffix
) \

439 
boﬁ
 
__c⁄d
 = !(
c⁄dôi⁄
); \

440 
¥efix
 ## 
	`suffix
(Ë
	`__compûëime_îr‹
(
msg
); \

441 i‡(
__c⁄d
) \

442 
¥efix
 ## 
	`suffix
(); \

443 
	`__compûëime_îr‹_ÁŒback
(
__c⁄d
); \

444 } 0)

	)

446 
	#__compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
¥efix
, 
suffix
Ëdÿ{ } 0)

	)

449 
	#_compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
¥efix
, 
suffix
) \

450 
	`__compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
¥efix
, 
suffix
)

	)

461 
	#compûëime_as£π
(
c⁄dôi⁄
, 
msg
) \

462 
	`_compûëime_as£π
(
c⁄dôi⁄
, 
msg
, 
__compûëime_as£π_
, 
__LINE__
)

	)

464 
	#compûëime_as£π_©omic_ty≥
(
t
) \

465 
	`compûëime_as£π
(
	`__«tive_w‹d
(
t
), \

466 "NìdÇ©ivêw‹d sized st‹es/lﬂd†f‹átomicôy.")

	)

488 
	#__ACCESS_ONCE
(
x
) ({ \

489 
__maybe_unu£d
 
	`ty≥of
(
x
Ë
__v¨
 = (
__f‹˚
Åypeof(x)) 0; \

490 (vﬁ©ûê
	`ty≥of
(
x
Ë*)&(x); })

	)

491 
	#ACCESS_ONCE
(
x
Ë(*
	`__ACCESS_ONCE
(x))

	)

501 
	#lockÀss_dîe„ªn˚
(
p
) \

503 
	`ty≥of
(
p
Ë
_________p1
 = 
	`READ_ONCE
(p); \

504 
	`smp_ªad_b¨rõr_dïíds
(); \

505 (
_________p1
); \

506 })

	)

509 #ifde‡
CONFIG_KPROBES


510 
	#__k¥obes
 
	`__©åibuã__
((
	`__£˘i⁄__
(".k¥obes.ãxt")))

	)

511 
	#nok¥obe_ölöe
 
__Æways_ölöe


	)

513 
	#__k¥obes


	)

514 
	#nok¥obe_ölöe
 
ölöe


	)

	@include/rosx/ctype.h

1 #i‚de‡
_LINUX_CTYPE_H


2 
	#_LINUX_CTYPE_H


	)

9 
	#_U
 0x01

	)

10 
	#_L
 0x02

	)

11 
	#_D
 0x04

	)

12 
	#_C
 0x08

	)

13 
	#_P
 0x10

	)

14 
	#_S
 0x20

	)

15 
	#_X
 0x40

	)

16 
	#_SP
 0x80

	)

18 c⁄° 
_˘y≥
[];

20 
	#__ismask
(
x
Ë(
_˘y≥
[()()(x)])

	)

22 
	#iß um
(
c
Ë((
	`__ismask
(c)&(
_U
|
_L
|
_D
)Ë!0)

	)

23 
	#ißÕha
(
c
Ë((
	`__ismask
(c)&(
_U
|
_L
)Ë!0)

	)

24 
	#is˙ål
(
c
Ë((
	`__ismask
(c)&(
_C
)Ë!0)

	)

25 
	#isdigô
(
c
Ë((
	`__ismask
(c)&(
_D
)Ë!0)

	)

26 
	#isgøph
(
c
Ë((
	`__ismask
(c)&(
_P
|
_U
|
_L
|
_D
)Ë!0)

	)

27 
	#i¶owî
(
c
Ë((
	`__ismask
(c)&(
_L
)Ë!0)

	)

28 
	#i•röt
(
c
Ë((
	`__ismask
(c)&(
_P
|
_U
|
_L
|
_D
|
_SP
)Ë!0)

	)

29 
	#i•un˘
(
c
Ë((
	`__ismask
(c)&(
_P
)Ë!0)

	)

30 
	#is•a˚
(
c
Ë((
	`__ismask
(c)&(
_S
)Ë!0)

	)

31 
	#isuµî
(
c
Ë((
	`__ismask
(c)&(
_U
)Ë!0)

	)

32 
	#isxdigô
(
c
Ë((
	`__ismask
(c)&(
_D
|
_X
)Ë!0)

	)

38 
	#isbœnk
(
c
Ë(¯=' ' || c ='\t')

	)

40 
	#ißscii
(
c
Ë((()(c))<=0x7f)

	)

41 
	#tﬂscii
(
c
Ë((()(c))&0x7f)

	)

43 
ölöe
 
	$__tﬁowî
(
c
)

45 i‡(
	`isuµî
(
c
))

46 
c
 -= 'A'-'a';

47  
c
;

48 
	}
}

50 
ölöe
 
	$__touµî
(
c
)

52 i‡(
	`i¶owî
(
c
))

53 
c
 -= 'a'-'A';

54  
c
;

55 
	}
}

57 
	#tﬁowî
(
c
Ë
	`__tﬁowî
(c)

	)

58 
	#touµî
(
c
Ë
	`__touµî
(c)

	)

	@include/rosx/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

39 
	#EDEADLK
 35

	)

40 
	#ENAMETOOLONG
 36

	)

41 
	#ENOLCK
 37

	)

43 
	#ENOSYS
 38

	)

45 
	#ENOTEMPTY
 39

	)

46 
	#ELOOP
 40

	)

47 
	#EWOULDBLOCK
 
EAGAIN


	)

48 
	#ENOMSG
 42

	)

49 
	#EIDRM
 43

	)

50 
	#ECHRNG
 44

	)

51 
	#EL2NSYNC
 45

	)

52 
	#EL3HLT
 46

	)

53 
	#EL3RST
 47

	)

54 
	#ELNRNG
 48

	)

55 
	#EUNATCH
 49

	)

56 
	#ENOCSI
 50

	)

57 
	#EL2HLT
 51

	)

58 
	#EBADE
 52

	)

59 
	#EBADR
 53

	)

60 
	#EXFULL
 54

	)

61 
	#ENOANO
 55

	)

62 
	#EBADRQC
 56

	)

63 
	#EBADSLT
 57

	)

65 
	#EDEADLOCK
 
EDEADLK


	)

67 
	#EBFONT
 59

	)

68 
	#ENOSTR
 60

	)

69 
	#ENODATA
 61

	)

70 
	#ETIME
 62

	)

71 
	#ENOSR
 63

	)

72 
	#ENONET
 64

	)

73 
	#ENOPKG
 65

	)

74 
	#EREMOTE
 66

	)

75 
	#ENOLINK
 67

	)

76 
	#EADV
 68

	)

77 
	#ESRMNT
 69

	)

78 
	#ECOMM
 70

	)

79 
	#EPROTO
 71

	)

80 
	#EMULTIHOP
 72

	)

81 
	#EDOTDOT
 73

	)

82 
	#EBADMSG
 74

	)

83 
	#EOVERFLOW
 75

	)

84 
	#ENOTUNIQ
 76

	)

85 
	#EBADFD
 77

	)

86 
	#EREMCHG
 78

	)

87 
	#ELIBACC
 79

	)

88 
	#ELIBBAD
 80

	)

89 
	#ELIBSCN
 81

	)

90 
	#ELIBMAX
 82

	)

91 
	#ELIBEXEC
 83

	)

92 
	#EILSEQ
 84

	)

93 
	#ERESTART
 85

	)

94 
	#ESTRPIPE
 86

	)

95 
	#EUSERS
 87

	)

96 
	#ENOTSOCK
 88

	)

97 
	#EDESTADDRREQ
 89

	)

98 
	#EMSGSIZE
 90

	)

99 
	#EPROTOTYPE
 91

	)

100 
	#ENOPROTOOPT
 92

	)

101 
	#EPROTONOSUPPORT
 93

	)

102 
	#ESOCKTNOSUPPORT
 94

	)

103 
	#EOPNOTSUPP
 95

	)

104 
	#EPFNOSUPPORT
 96

	)

105 
	#EAFNOSUPPORT
 97

	)

106 
	#EADDRINUSE
 98

	)

107 
	#EADDRNOTAVAIL
 99

	)

108 
	#ENETDOWN
 100

	)

109 
	#ENETUNREACH
 101

	)

110 
	#ENETRESET
 102

	)

111 
	#ECONNABORTED
 103

	)

112 
	#ECONNRESET
 104

	)

113 
	#ENOBUFS
 105

	)

114 
	#EISCONN
 106

	)

115 
	#ENOTCONN
 107

	)

116 
	#ESHUTDOWN
 108

	)

117 
	#ETOOMANYREFS
 109

	)

118 
	#ETIMEDOUT
 110

	)

119 
	#ECONNREFUSED
 111

	)

120 
	#EHOSTDOWN
 112

	)

121 
	#EHOSTUNREACH
 113

	)

122 
	#EALREADY
 114

	)

123 
	#EINPROGRESS
 115

	)

124 
	#ESTALE
 116

	)

125 
	#EUCLEAN
 117

	)

126 
	#ENOTNAM
 118

	)

127 
	#ENAVAIL
 119

	)

128 
	#EISNAM
 120

	)

129 
	#EREMOTEIO
 121

	)

130 
	#EDQUOT
 122

	)

132 
	#ENOMEDIUM
 123

	)

133 
	#EMEDIUMTYPE
 124

	)

134 
	#ECANCELED
 125

	)

135 
	#ENOKEY
 126

	)

136 
	#EKEYEXPIRED
 127

	)

137 
	#EKEYREVOKED
 128

	)

138 
	#EKEYREJECTED
 129

	)

141 
	#EOWNERDEAD
 130

	)

142 
	#ENOTRECOVERABLE
 131

	)

144 
	#ERFKILL
 132

	)

146 
	#EHWPOISON
 133

	)

148 
	#ERESTARTSYS
 512

	)

149 
	#ERESTARTNOINTR
 513

	)

150 
	#ERESTARTNOHAND
 514

	)

151 
	#ENOIOCTLCMD
 515

	)

152 
	#ERESTART_RESTARTBLOCK
 516

	)

153 
	#EPROBE_DEFER
 517

	)

154 
	#EOPENSTALE
 518

	)

157 
	#EBADHANDLE
 521

	)

158 
	#ENOTSYNC
 522

	)

159 
	#EBADCOOKIE
 523

	)

160 
	#ENOTSUPP
 524

	)

161 
	#ETOOSMALL
 525

	)

162 
	#ESERVERFAULT
 526

	)

163 
	#EBADTYPE
 527

	)

164 
	#EJUKEBOX
 528

	)

165 
	#EIOCBQUEUED
 529

	)

166 
	#ERECALLCONFLICT
 530

	)

	@include/rosx/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

5 
	~<löux/ty≥s.h
>

7 
	#USHRT_MAX
 ((
u16
)(~0U))

	)

8 
	#SHRT_MAX
 ((
s16
)(
USHRT_MAX
>>1))

	)

9 
	#SHRT_MIN
 ((
s16
)(-
SHRT_MAX
 - 1))

	)

10 
	#INT_MAX
 (()(~0U>>1))

	)

11 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

12 
	#UINT_MAX
 (~0U)

	)

13 
	#LONG_MAX
 (()(~0UL>>1))

	)

14 
	#LONG_MIN
 (-
LONG_MAX
 - 1)

	)

15 
	#ULONG_MAX
 (~0UL)

	)

16 
	#LLONG_MAX
 (()(~0ULL>>1))

	)

17 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1)

	)

18 
	#ULLONG_MAX
 (~0ULL)

	)

19 #i‚de‡
SIZE_MAX


20 
	#SIZE_MAX
 (~(
size_t
)0)

	)

23 
	#U8_MAX
 ((
u8
)~0U)

	)

24 
	#S8_MAX
 ((
s8
)(
U8_MAX
>>1))

	)

25 
	#S8_MIN
 ((
s8
)(-
S8_MAX
 - 1))

	)

26 
	#U16_MAX
 ((
u16
)~0U)

	)

27 
	#S16_MAX
 ((
s16
)(
U16_MAX
>>1))

	)

28 
	#S16_MIN
 ((
s16
)(-
S16_MAX
 - 1))

	)

29 
	#U32_MAX
 ((
u32
)~0U)

	)

30 
	#S32_MAX
 ((
s32
)(
U32_MAX
>>1))

	)

31 
	#S32_MIN
 ((
s32
)(-
S32_MAX
 - 1))

	)

32 
	#U64_MAX
 ((
u64
)~0ULL)

	)

33 
	#S64_MAX
 ((
s64
)(
U64_MAX
>>1))

	)

34 
	#S64_MIN
 ((
s64
)(-
S64_MAX
 - 1))

	)

36 
	#STACK_MAGIC
 0xdódbìf

	)

38 
	#REPEAT_BYTE
(
x
Ë((~0u»/ 0xffË* (x))

	)

40 
	#ALIGN
(
x
,
a
Ë
	`__ALIGN_MASK
((x),(
	`ty≥of
(x))◊)-1)

	)

41 
	#ALIGN_DOWN
(
x
, 
a
Ë
	`ALIGN
((xË- (◊Ë- 1), (a))

	)

42 
	#__ALIGN_MASK
(
x
,
mask
Ë(((x)+(mask))&~(mask))

	)

43 
	#PTR_ALIGN
(
p
, 
a
Ë((
	`ty≥of
’))
	`ALIGN
(()’), (a)))

	)

44 
	#IS_ALIGNED
(
x
, 
a
Ë(((xË& ((
	`ty≥of
(x))◊Ë- 1)Ë=0)

	)

46 
	#ARRAY_SIZE
(
x
Ë((xË/ ((x)[0]))

	)

54 
	#__round_mask
(
x
, 
y
Ë((
	`__ty≥of__
(x))((y)-1))

	)

55 
	#round_up
(
x
, 
y
Ë((((x)-1Ë| 
	`__round_mask
(x, y))+1)

	)

56 
	#round_down
(
x
, 
y
Ë((xË& ~
	`__round_mask
(x, y))

	)

58 
	#FIELD_SIZEOF
(
t
, 
f
Ë(((—*)0)->f))

	)

59 
	#DIV_ROUND_UP
(
n
,
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

61 
	#DIV_ROUND_DOWN_ULL
(
Œ
, 
d
) \

62 ({ 
_tmp
 = (
Œ
); 
	`do_div
(_tmp, 
d
); _tmp; })

	)

64 
	#DIV_ROUND_UP_ULL
(
Œ
, 
d
Ë
	`DIV_ROUND_DOWN_ULL
(÷lË+ (dË- 1, (d))

	)

66 #i‡
BITS_PER_LONG
 == 32

67 
	#DIV_ROUND_UP_SECTOR_T
(
Œ
,
d
Ë
	`DIV_ROUND_UP_ULL
÷l, d)

	)

69 
	#DIV_ROUND_UP_SECTOR_T
(
Œ
,
d
Ë
	`DIV_ROUND_UP
÷l,d)

	)

73 
	#roundup
(
x
, 
y
) ( \

75 c⁄° 
	`ty≥of
(
y
Ë
__y
 = y; \

76 (((
x
Ë+ (
__y
 - 1)) / __y) * __y; \

78 )

	)

79 
	#rounddown
(
x
, 
y
) ( \

81 
	`ty≥of
(
x
Ë
__x
 = (x); \

82 
__x
 - (__x % (
y
)); \

84 )

	)

91 
	#DIV_ROUND_CLOSEST
(
x
, 
divis‹
)( \

93 
	`ty≥of
(
x
Ë
__x
 = x; \

94 
	`ty≥of
(
divis‹
Ë
__d
 = divisor; \

95 (((
	`ty≥of
(
x
))-1) > 0 || \

96 ((
	`ty≥of
(
divis‹
))-1Ë> 0 || (
__x
) > 0) ? \

97 (((
__x
Ë+ ((
__d
) / 2)) / (__d)) : \

98 (((
__x
Ë- ((
__d
) / 2)) / (__d)); \

100 )

	)

106 
	#mu…_‰ac
(
x
, 
numî
, 
díom
)( \

108 
	`ty≥of
(
x
Ë
quŸ
 = (xË/ (
díom
); \

109 
	`ty≥of
(
x
Ë
ªm
 = (xË% (
díom
); \

110 (
quŸ
 * (
numî
)Ë+ ((
ªm
 * (numî)Ë/ (
díom
)); \

112 )

	)

122 
	#uµî_32_bôs
(
n
Ë((
u32
)((“Ë>> 16Ë>> 16))

	)

128 
	#lowî_32_bôs
(
n
Ë((
u32
)“))

	)

136 
	#abs
(
x
) ({ \

137 
ªt
; \

138 i‡((
x
) == ()) { \

139 
__x
 = (
x
); \

140 
ªt
 = (
__x
 < 0) ? -__x : __x; \

142 
__x
 = (
x
); \

143 
ªt
 = (
__x
 < 0) ? -__x : __x; \

145 
ªt
; \

146 })

	)

148 
	#abs64
(
x
) ({ \

149 
s64
 
__x
 = (
x
); \

150 (
__x
 < 0) ? -__x : __x; \

151 })

	)

158 
	#mö
(
x
, 
y
) ({ \

159 
	`ty≥of
(
x
Ë
_mö1
 = (x); \

160 
	`ty≥of
(
y
Ë
_mö2
 = (y); \

161 (Ë(&
_mö1
 =&
_mö2
); \

162 
_mö1
 < 
_mö2
 ? _mö1 : _mö2; })

	)

164 
	#max
(
x
, 
y
) ({ \

165 
	`ty≥of
(
x
Ë
_max1
 = (x); \

166 
	`ty≥of
(
y
Ë
_max2
 = (y); \

167 (Ë(&
_max1
 =&
_max2
); \

168 
_max1
 > 
_max2
 ? _max1 : _max2; })

	)

170 
	#mö3
(
x
, 
y
, 
z
Ë
	`mö
((
	`ty≥of
(x))mö(x, y), z)

	)

171 
	#max3
(
x
, 
y
, 
z
Ë
	`max
((
	`ty≥of
(x))max(x, y), z)

	)

178 
	#mö_nŸ_zîo
(
x
, 
y
) ({ \

179 
	`ty≥of
(
x
Ë
__x
 = (x); \

180 
	`ty≥of
(
y
Ë
__y
 = (y); \

181 
__x
 =0 ? 
__y
 : ((__y =0Ë? __x : 
	`mö
(__x, __y)); })

	)

192 
	#˛amp
(
vÆ
, 
lo
, 
hi
Ë
	`mö
((
	`ty≥of
(vÆ))
	`max
(vÆ,Üo), hi)

	)

200 
	#mö_t
(
ty≥
, 
x
, 
y
) ({ \

201 
ty≥
 
__mö1
 = (
x
); \

202 
ty≥
 
__mö2
 = (
y
); \

203 
__mö1
 < 
__mö2
 ? __mö1: __mö2; })

	)

205 
	#max_t
(
ty≥
, 
x
, 
y
) ({ \

206 
ty≥
 
__max1
 = (
x
); \

207 
ty≥
 
__max2
 = (
y
); \

208 
__max1
 > 
__max2
 ? __max1: __max2; })

	)

220 
	#˛amp_t
(
ty≥
, 
vÆ
, 
lo
, 
hi
Ë
	`mö_t
—y≥, 
	`max_t
—y≥, vÆ,Üo), hi)

	)

233 
	#˛amp_vÆ
(
vÆ
, 
lo
, 
hi
Ë
	`˛amp_t
(
	`ty≥of
(vÆ), vÆ,Üo, hi)

	)

239 
	#sw≠
(
a
, 
b
) \

240 dÿ{ 
	`ty≥of
(
a
Ë
__tmp
 = (a); (aË(
b
); (bË__tmp; } 0)

	)

249 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

250 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

251 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

	@include/rosx/linkage.h

9 #i‚de‡
_LINUX_LINKAGE_H


10 
	#_LINUX_LINKAGE_H


	)

12 
	~<asm/lökage.h
>

15 #i‚de‡
ASM_NL


16 
	#ASM_NL
 ;

	)

19 #ifde‡
__˝lu•lus


20 
	#CPP_ASMLINKAGE
 "C"

	)

22 
	#CPP_ASMLINKAGE


	)

25 #i‚de‡
asmlökage


26 
	#asmlökage
 
CPP_ASMLINKAGE


	)

29 
	#SYMBOL_NAME_STR
(
X
Ë#X

	)

30 
	#SYMBOL_NAME
(
X
Ë
	)
X

31 #ifde‡
__STDC__


32 
	#SYMBOL_NAME_LABEL
(
X
ËX##:

	)

34 
	#SYMBOL_NAME_LABEL
(
X
ËX:

	)

37 #i‚de‡
__ALIGN


38 
	#__ALIGN
 .
Æign
 4

	)

41 #i‚de‡
__ALIGN_STR


42 
	#__ALIGN_STR
 ".Æig¿4"

	)

45 #ifde‡
__ASSEMBLY__


47 
	#ALIGN
 
__ALIGN


	)

48 
	#ALIGN_STR
 
__ALIGN_STR


	)

50 
	#LENTRY
(
«me
) \

51 
ALIGN
 
ASM_NL
 \

52 
	`SYMBOL_NAME_LABEL
(
«me
)

	)

54 
	#ENTRY
(
«me
) \

55 .
globl
 
	`SYMBOL_NAME
(
«me
Ë
ASM_NL
 \

56 
	`LENTRY
(
«me
)

	)

58 
	#WEAK
(
«me
) \

59 .
wók
 
	`SYMBOL_NAME
(
«me
Ë
ASM_NL
 \

60 
	`LENTRY
(
«me
)

	)

62 #i‚de‡
END


63 
	#END
(
«me
) \

64 .
size
 
«me
, .-
	)
name

67 #i‚de‡
ENDPROC


68 
	#ENDPROC
(
«me
) \

69 .
ty≥
 
«me
 
STT_FUNC
 
ASM_NL
 \

70 
	`END
(
«me
)

	)

	@include/rosx/log2.h

9 #i‚de‡
_LINUX_LOG2_H


10 
	#_LINUX_LOG2_H


	)

12 
	~<rosx/ty≥s.h
>

13 
	~<rosx/bô›s.h
>

18 
__©åibuã__
((c⁄°, 
n‹ëu∫
))

19 
____ûog2_NaN
();

27 #i‚de‡
CONFIG_ARCH_HAS_ILOG2_U32


28 
ölöe
 
__©åibuã__
((const))

29 
	$__ûog2_u32
(
u32
 
n
)

31  
	`Ês
(
n
) - 1;

32 
	}
}

35 #i‚de‡
CONFIG_ARCH_HAS_ILOG2_U64


36 
ölöe
 
__©åibuã__
((const))

37 
	$__ûog2_u64
(
u64
 
n
)

39  
	`Ês64
(
n
) - 1;

40 
	}
}

48 
ölöe
 
__©åibuã__
((const))

49 
boﬁ
 
	$is_powî_of_2
(
n
)

51  (
n
 != 0 && ((n & (n - 1)) == 0));

52 
	}
}

57 
ölöe
 
__©åibuã__
((const))

58 
	$__roundup_pow_of_two
(
n
)

60  1UL << 
	`Ês_l⁄g
(
n
 - 1);

61 
	}
}

66 
ölöe
 
__©åibuã__
((const))

67 
	$__rounddown_pow_of_two
(
n
)

69  1UL << (
	`Ês_l⁄g
(
n
) - 1);

70 
	}
}

82 
	#ûog2
(
n
) \

84 
	`__buûtö_c⁄°™t_p
(
n
) ? ( \

85 (
n
Ë< 1 ? 
	`____ûog2_NaN
() : \

86 (
n
) & (1ULL << 63) ? 63 : \

87 (
n
) & (1ULL << 62) ? 62 : \

88 (
n
) & (1ULL << 61) ? 61 : \

89 (
n
) & (1ULL << 60) ? 60 : \

90 (
n
) & (1ULL << 59) ? 59 : \

91 (
n
) & (1ULL << 58) ? 58 : \

92 (
n
) & (1ULL << 57) ? 57 : \

93 (
n
) & (1ULL << 56) ? 56 : \

94 (
n
) & (1ULL << 55) ? 55 : \

95 (
n
) & (1ULL << 54) ? 54 : \

96 (
n
) & (1ULL << 53) ? 53 : \

97 (
n
) & (1ULL << 52) ? 52 : \

98 (
n
) & (1ULL << 51) ? 51 : \

99 (
n
) & (1ULL << 50) ? 50 : \

100 (
n
) & (1ULL << 49) ? 49 : \

101 (
n
) & (1ULL << 48) ? 48 : \

102 (
n
) & (1ULL << 47) ? 47 : \

103 (
n
) & (1ULL << 46) ? 46 : \

104 (
n
) & (1ULL << 45) ? 45 : \

105 (
n
) & (1ULL << 44) ? 44 : \

106 (
n
) & (1ULL << 43) ? 43 : \

107 (
n
) & (1ULL << 42) ? 42 : \

108 (
n
) & (1ULL << 41) ? 41 : \

109 (
n
) & (1ULL << 40) ? 40 : \

110 (
n
) & (1ULL << 39) ? 39 : \

111 (
n
) & (1ULL << 38) ? 38 : \

112 (
n
) & (1ULL << 37) ? 37 : \

113 (
n
) & (1ULL << 36) ? 36 : \

114 (
n
) & (1ULL << 35) ? 35 : \

115 (
n
) & (1ULL << 34) ? 34 : \

116 (
n
) & (1ULL << 33) ? 33 : \

117 (
n
) & (1ULL << 32) ? 32 : \

118 (
n
) & (1ULL << 31) ? 31 : \

119 (
n
) & (1ULL << 30) ? 30 : \

120 (
n
) & (1ULL << 29) ? 29 : \

121 (
n
) & (1ULL << 28) ? 28 : \

122 (
n
) & (1ULL << 27) ? 27 : \

123 (
n
) & (1ULL << 26) ? 26 : \

124 (
n
) & (1ULL << 25) ? 25 : \

125 (
n
) & (1ULL << 24) ? 24 : \

126 (
n
) & (1ULL << 23) ? 23 : \

127 (
n
) & (1ULL << 22) ? 22 : \

128 (
n
) & (1ULL << 21) ? 21 : \

129 (
n
) & (1ULL << 20) ? 20 : \

130 (
n
) & (1ULL << 19) ? 19 : \

131 (
n
) & (1ULL << 18) ? 18 : \

132 (
n
) & (1ULL << 17) ? 17 : \

133 (
n
) & (1ULL << 16) ? 16 : \

134 (
n
) & (1ULL << 15) ? 15 : \

135 (
n
) & (1ULL << 14) ? 14 : \

136 (
n
) & (1ULL << 13) ? 13 : \

137 (
n
) & (1ULL << 12) ? 12 : \

138 (
n
) & (1ULL << 11) ? 11 : \

139 (
n
) & (1ULL << 10) ? 10 : \

140 (
n
) & (1ULL << 9) ? 9 : \

141 (
n
) & (1ULL << 8) ? 8 : \

142 (
n
) & (1ULL << 7) ? 7 : \

143 (
n
) & (1ULL << 6) ? 6 : \

144 (
n
) & (1ULL << 5) ? 5 : \

145 (
n
) & (1ULL << 4) ? 4 : \

146 (
n
) & (1ULL << 3) ? 3 : \

147 (
n
) & (1ULL << 2) ? 2 : \

148 (
n
) & (1ULL << 1) ? 1 : \

149 (
n
) & (1ULL << 0) ? 0 : \

150 
	`____ûog2_NaN
() \

152 ((
n
) <= 4) ? \

153 
	`__ûog2_u32
(
n
) : \

154 
	`__ûog2_u64
(
n
) \

155 )

	)

165 
	#roundup_pow_of_two
(
n
) \

167 
	`__buûtö_c⁄°™t_p
(
n
) ? ( \

168 (
n
 == 1) ? 1 : \

169 (1UL << (
	`ûog2
((
n
) - 1) + 1)) \

171 
	`__roundup_pow_of_two
(
n
) \

172 )

	)

182 
	#rounddown_pow_of_two
(
n
) \

184 
	`__buûtö_c⁄°™t_p
(
n
) ? ( \

185 (1UL << 
	`ûog2
(
n
))) : \

186 
	`__rounddown_pow_of_two
(
n
) \

187 )

	)

203 
	#‹dî_ba£_2
(
n
Ë
	`ûog2
(
	`roundup_pow_of_two
“))

	)

	@include/rosx/math64.h

1 #i‚de‡
_LINUX_MATH64_H


2 
	#_LINUX_MATH64_H


	)

4 
	~<div64.h
>

5 
	~<rosx/bô›s.h
>

6 
	~<rosx/ty≥s.h
>

8 #i‡
BITS_PER_LONG
 == 64

10 
	#div64_l⁄g
(
x
, 
y
Ë
	`div64_s64
((x), (y))

	)

11 
	#div64_ul
(
x
, 
y
Ë
	`div64_u64
((x), (y))

	)

19 
ölöe
 
u64
 
	$div_u64_ªm
(
u64
 
dividíd
, 
u32
 
divis‹
, u32 *
ªmaödî
)

21 *
ªmaödî
 = 
dividíd
 % 
divis‹
;

22  
dividíd
 / 
divis‹
;

23 
	}
}

28 
ölöe
 
s64
 
	$div_s64_ªm
(
s64
 
dividíd
, 
s32
 
divis‹
, s32 *
ªmaödî
)

30 *
ªmaödî
 = 
dividíd
 % 
divis‹
;

31  
dividíd
 / 
divis‹
;

32 
	}
}

37 
ölöe
 
u64
 
	$div64_u64_ªm
(
u64
 
dividíd
, u64 
divis‹
, u64 *
ªmaödî
)

39 *
ªmaödî
 = 
dividíd
 % 
divis‹
;

40  
dividíd
 / 
divis‹
;

41 
	}
}

46 
ölöe
 
u64
 
	$div64_u64
(
u64
 
dividíd
, u64 
divis‹
)

48  
dividíd
 / 
divis‹
;

49 
	}
}

54 
ölöe
 
s64
 
	$div64_s64
(
s64
 
dividíd
, s64 
divis‹
)

56  
dividíd
 / 
divis‹
;

57 
	}
}

59 #ñi‡
BITS_PER_LONG
 == 32

61 
	#div64_l⁄g
(
x
, 
y
Ë
	`div_s64
((x), (y))

	)

62 
	#div64_ul
(
x
, 
y
Ë
	`div_u64
((x), (y))

	)

64 #i‚de‡
div_u64_ªm


65 
ölöe
 
u64
 
	$div_u64_ªm
(
u64
 
dividíd
, 
u32
 
divis‹
, u32 *
ªmaödî
)

67 *
ªmaödî
 = 
	`do_div
(
dividíd
, 
divis‹
);

68  
dividíd
;

69 
	}
}

72 #i‚de‡
div_s64_ªm


73 
s64
 
div_s64_ªm
(s64 
dividíd
, 
s32
 
divis‹
, s32 *
ªmaödî
);

76 #i‚de‡
div64_u64_ªm


77 
u64
 
div64_u64_ªm
(u64 
dividíd
, u64 
divis‹
, u64 *
ªmaödî
);

80 #i‚de‡
div64_u64


81 
u64
 
div64_u64
(u64 
dividíd
, u64 
divis‹
);

84 #i‚de‡
div64_s64


85 
s64
 
div64_s64
(s64 
dividíd
, s64 
divis‹
);

97 #i‚de‡
div_u64


98 
ölöe
 
u64
 
	$div_u64
(
u64
 
dividíd
, 
u32
 
divis‹
)

100 
u32
 
ªmaödî
;

101  
	`div_u64_ªm
(
dividíd
, 
divis‹
, &
ªmaödî
);

102 
	}
}

108 #i‚de‡
div_s64


109 
ölöe
 
s64
 
	$div_s64
(
s64
 
dividíd
, 
s32
 
divis‹
)

111 
s32
 
ªmaödî
;

112  
	`div_s64_ªm
(
dividíd
, 
divis‹
, &
ªmaödî
);

113 
	}
}

116 
u32
 
ôî_div_u64_ªm
(
u64
 
dividíd
, u32 
divis‹
, u64 *
ªmaödî
);

118 
__Æways_ölöe
 
u32


119 
	$__ôî_div_u64_ªm
(
u64
 
dividíd
, 
u32
 
divis‹
, u64 *
ªmaödî
)

121 
u32
 
ªt
 = 0;

123 
dividíd
 >
divis‹
) {

126 
	`asm
("" : "+rm"(
dividíd
));

128 
dividíd
 -
divis‹
;

129 
ªt
++;

132 *
ªmaödî
 = 
dividíd
;

134  
ªt
;

135 
	}
}

137 #i‚de‡
mul_u32_u32


141 
ölöe
 
u64
 
	$mul_u32_u32
(
u32
 
a
, u32 
b
)

143  (
u64
)
a
 * 
b
;

144 
	}
}

147 #i‡
deföed
(
CONFIG_ARCH_SUPPORTS_INT128
Ë&& deföed(
__SIZEOF_INT128__
)

149 #i‚de‡
mul_u64_u32_shr


150 
ölöe
 
u64
 
	$mul_u64_u32_shr
(
u64
 
a
, 
u32
 
mul
, 
shi·
)

152  (
u64
)(((
__öt128
)
a
 * 
mul
Ë>> 
shi·
);

153 
	}
}

156 #i‚de‡
mul_u64_u64_shr


157 
ölöe
 
u64
 
	$mul_u64_u64_shr
(
u64
 
a
, u64 
mul
, 
shi·
)

159  (
u64
)(((
__öt128
)
a
 * 
mul
Ë>> 
shi·
);

160 
	}
}

165 #i‚de‡
mul_u64_u32_shr


166 
ölöe
 
u64
 
	$mul_u64_u32_shr
(
u64
 
a
, 
u32
 
mul
, 
shi·
)

168 
u32
 
ah
, 
Æ
;

169 
u64
 
ªt
;

171 
Æ
 = 
a
;

172 
ah
 = 
a
 >> 32;

174 
ªt
 = 
	`mul_u32_u32
(
Æ
, 
mul
Ë>> 
shi·
;

175 i‡(
ah
)

176 
ªt
 +
	`mul_u32_u32
(
ah
, 
mul
Ë<< (32 - 
shi·
);

178  
ªt
;

179 
	}
}

182 #i‚de‡
mul_u64_u64_shr


183 
ölöe
 
u64
 
	$mul_u64_u64_shr
(
u64
 
a
, u64 
b
, 
shi·
)

186 
u64
 
Œ
;

188 #ifde‡
__BIG_ENDIAN


189 
u32
 
high
, 
low
;

191 
u32
 
low
, 
high
;

193 } 
l
;

194 } 
æ
, 
rm
, 
∫
, 
rh
, 
a0
, 
b0
;

195 
u64
 
c
;

197 
a0
.
Œ
 = 
a
;

198 
b0
.
Œ
 = 
b
;

200 
æ
.
Œ
 = 
	`mul_u32_u32
(
a0
.
l
.
low
, 
b0
.l.low);

201 
rm
.
Œ
 = 
	`mul_u32_u32
(
a0
.
l
.
low
, 
b0
.l.
high
);

202 
∫
.
Œ
 = 
	`mul_u32_u32
(
a0
.
l
.
high
, 
b0
.l.
low
);

203 
rh
.
Œ
 = 
	`mul_u32_u32
(
a0
.
l
.
high
, 
b0
.l.high);

210 
æ
.
l
.
high
 = 
c
 = (
u64
Ïl.l.high + 
rm
.l.
low
 + 
∫
.l.low;

211 
rh
.
l
.
low
 = 
c
 = (¯>> 32Ë+ 
rm
.l.
high
 + 
∫
.l.high +Ñh.l.low;

212 
rh
.
l
.
high
 = (
c
 >> 32) +Ñh.l.high;

218 i‡(
shi·
 == 0)

219  
æ
.
Œ
;

220 i‡(
shi·
 < 64)

221  (
æ
.
Œ
 >> 
shi·
Ë| (
rh
.ll << (64 - shift));

222  
rh
.
Œ
 >> (
shi·
 & 63);

223 
	}
}

228 #i‚de‡
mul_u64_u32_div


229 
ölöe
 
u64
 
	$mul_u64_u32_div
(
u64
 
a
, 
u32
 
mul
, u32 
divis‹
)

232 
u64
 
Œ
;

234 #ifde‡
__BIG_ENDIAN


235 
u32
 
high
, 
low
;

237 
u32
 
low
, 
high
;

239 } 
l
;

240 } 
u
, 
æ
, 
rh
;

242 
u
.
Œ
 = 
a
;

243 
æ
.
Œ
 = 
	`mul_u32_u32
(
u
.
l
.
low
, 
mul
);

244 
rh
.
Œ
 = 
	`mul_u32_u32
(
u
.
l
.
high
, 
mul
Ë+ 
æ
.l.high;

247 
æ
.
l
.
high
 = 
	`do_div
(
rh
.
Œ
, 
divis‹
);

250 
	`do_div
(
æ
.
Œ
, 
divis‹
);

252 
æ
.
l
.
high
 = 
rh
.l.
low
;

253  
æ
.
Œ
;

254 
	}
}

	@include/rosx/rbtree.h

94 #i‚def 
_LINUX_RBTREE_H


95 
	#_LINUX_RBTREE_H


	)

97 
	~<rosx/kî√l.h
>

98 
	~<rosx/°ddef.h
>

100 
	srb_node


102 
	mrb_∑ª¡_cﬁ‹
;

103 
	#RB_RED
 0

	)

104 
	#RB_BLACK
 1

	)

105 
rb_node
 *
	mrb_right
;

106 
rb_node
 *
	mrb_À·
;

107 } 
__©åibuã__
((
Æig√d
(())));

110 
	srb_roŸ


112 
rb_node
 *
	mrb_node
;

116 
	#rb_∑ª¡
(
r
Ë((
rb_node
 *)(‘)->
rb_∑ª¡_cﬁ‹
 & ~3))

	)

117 
	#rb_cﬁ‹
(
r
Ë(‘)->
rb_∑ª¡_cﬁ‹
 & 1)

	)

118 
	#rb_is_ªd
(
r
Ë(!
	`rb_cﬁ‹
‘))

	)

119 
	#rb_is_bœck
(
r
Ë
	`rb_cﬁ‹
‘)

	)

120 
	#rb_£t_ªd
(
r
Ëdÿ{ (r)->
rb_∑ª¡_cﬁ‹
 &~1; } 0)

	)

121 
	#rb_£t_bœck
(
r
Ëdÿ{ (r)->
rb_∑ª¡_cﬁ‹
 |1; } 0)

	)

123 
ölöe
 
	$rb_£t_∑ª¡
(
rb_node
 *
rb
, rb_nodê*
p
)

125 
rb
->
rb_∑ª¡_cﬁ‹
 = (rb->rb_∑ª¡_cﬁ‹ & 3Ë| ()
p
;

126 
	}
}

127 
ölöe
 
	$rb_£t_cﬁ‹
(
rb_node
 *
rb
, 
cﬁ‹
)

129 
rb
->
rb_∑ª¡_cﬁ‹
 = (rb->rb_∑ª¡_cﬁ‹ & ~1Ë| 
cﬁ‹
;

130 
	}
}

132 
	#RB_ROOT
 (
rb_roŸ
Ë{ 
NULL
, }

	)

133 
	#rb_íåy
(
±r
, 
ty≥
, 
membî
Ë
	`c⁄èöî_of
’å,Åy≥, membî)

	)

135 
	#RB_EMPTY_ROOT
(
roŸ
Ë(‘oŸ)->
rb_node
 =
NULL
)

	)

136 
	#RB_EMPTY_NODE
(
node
Ë(
	`rb_∑ª¡
“odeË=node)

	)

137 
	#RB_CLEAR_NODE
(
node
Ë(
	`rb_£t_∑ª¡
“ode,Çode))

	)

139 
ölöe
 
	$rb_öô_node
(
rb_node
 *
rb
)

141 
rb
->
rb_∑ª¡_cﬁ‹
 = 0;

142 
rb
->
rb_right
 = 
NULL
;

143 
rb
->
rb_À·
 = 
NULL
;

144 
	`RB_CLEAR_NODE
(
rb
);

145 
	}
}

147 
rb_ö£π_cﬁ‹
(
rb_node
 *, 
rb_roŸ
 *);

148 
rb_îa£
(
rb_node
 *, 
rb_roŸ
 *);

150 (*
	trb_augmít_f
)(
	trb_node
 *
	tnode
, *
	td©a
);

152 
	`rb_augmít_ö£π
(
rb_node
 *
node
,

153 
rb_augmít_f
 
func
, *
d©a
);

154 
rb_node
 *
	`rb_augmít_îa£_begö
(rb_nodê*
node
);

155 
	`rb_augmít_îa£_íd
(
rb_node
 *
node
,

156 
rb_augmít_f
 
func
, *
d©a
);

159 
rb_node
 *
	`rb_√xt
(const rb_node *);

160 
rb_node
 *
	`rb_¥ev
(const rb_node *);

161 
rb_node
 *
	`rb_fú°
(c⁄° 
rb_roŸ
 *);

162 
rb_node
 *
	`rb_œ°
(c⁄° 
rb_roŸ
 *);

165 
	`rb_ª∂a˚_node
(
rb_node
 *
vi˘im
, rb_nodê*
√w
,

166 
rb_roŸ
 *
roŸ
);

168 
ölöe
 
	$rb_lök_node
(
rb_node
 * 
node
, rb_nodê* 
∑ª¡
,

169 
rb_node
 ** 
rb_lök
)

171 
node
->
rb_∑ª¡_cﬁ‹
 = ()
∑ª¡
;

172 
node
->
rb_À·
 =Çode->
rb_right
 = 
NULL
;

174 *
rb_lök
 = 
node
;

175 
	}
}

	@include/rosx/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

4 
	~<rosx/compûî.h
>

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

13 #ifde‡
__KERNEL__


16 
	mÁl£
 = 0,

17 
	måue
 = 1

20 #unde‡
off£tof


21 #ifde‡
__compûî_off£tof


22 
	#off£tof
(
TYPE
,
MEMBER
Ë
	`__compûî_off£tof
(TYPE,MEMBER)

	)

24 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

	@include/rosx/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

4 
	~<rosx/ty≥s.h
>

6 #ifde‡
__˝lu•lus


10 * 
___°πok
;

11 * 
°Ωbrk
(const *,const *);

12 * 
°πok
(*,const *);

13 * 
°r£p
(**,const *);

14 
__kî√l_size_t
 
°r•n
(const *,const *);

16 #i‚de‡
__HAVE_ARCH_STRCPY


17 * 
°r˝y
(*,const *);

19 #i‚de‡
__HAVE_ARCH_STRNCPY


20 * 
°∫˝y
(*,c⁄° *, 
__kî√l_size_t
);

22 #i‚de‡
__HAVE_ARCH_STRCAT


23 * 
°rˇt
(*, const *);

25 #i‚de‡
__HAVE_ARCH_STRNCAT


26 * 
°∫ˇt
(*, c⁄° *, 
__kî√l_size_t
);

28 #i‚de‡
__HAVE_ARCH_STRCMP


29 
°rcmp
(const *,const *);

31 #i‚de‡
__HAVE_ARCH_STRNCMP


32 
°∫cmp
(c⁄° *,c⁄° *,
__kî√l_size_t
);

35 
°∫icmp
(c⁄° *, c⁄° *, 
__kî√l_size_t
);

37 #i‚de‡
__HAVE_ARCH_STRCHR


38 * 
°rchr
(const *,);

40 #i‚de‡
__HAVE_ARCH_STRRCHR


41 * 
°ºchr
(const *,);

43 * 
skù_•a˚s
(const *);

45 *
°rim
(*);

47 #i‚de‡
__HAVE_ARCH_STRSTR


48 * 
°r°r
(const *,const *);

50 #i‚de‡
__HAVE_ARCH_STRLEN


51 
__kî√l_size_t
 
°æí
(const *);

53 #i‚de‡
__HAVE_ARCH_STRNLEN


54 
__kî√l_size_t
 
°∫Àn
(const *,__kernel_size_t);

56 #i‚de‡
__HAVE_ARCH_STRDUP


57 * 
°rdup
(const *);

59 #i‚de‡
__HAVE_ARCH_STRSWAB


60 * 
°rswab
(const *);

63 #i‚de‡
__HAVE_ARCH_MEMSET


64 * 
mem£t
(*,,
__kî√l_size_t
);

66 #i‚de‡
__HAVE_ARCH_MEMCPY


67 * 
mem˝y
(*,c⁄° *,
__kî√l_size_t
);

69 #i‚de‡
__HAVE_ARCH_MEMMOVE


70 * 
memmove
(*,c⁄° *,
__kî√l_size_t
);

72 #i‚de‡
__HAVE_ARCH_MEMSCAN


73 * 
memsˇn
(*,,
__kî√l_size_t
);

75 #i‚de‡
__HAVE_ARCH_MEMCMP


76 
memcmp
(c⁄° *,c⁄° *,
__kî√l_size_t
);

78 #i‚de‡
__HAVE_ARCH_MEMCHR


79 * 
memchr
(c⁄° *,,
__kî√l_size_t
);

82 #ifde‡
__˝lu•lus


	@include/rosx/types.h

18 #i‚de‡
__KERNEL_TYPE_H__


19 
	#__KERNEL_TYPE_H__


	)

20 
	~<asm/ty≥s.h
>

21 
	~<°dboﬁ.h
>

24 
	#OS_NO_WAIT
 0

	)

25 
	#OS_WAIT_FOREVER
 -1

	)

29 
	mOS_OK
 = 0,

30 
	mOS_ERR
 = -1,

31 
	mE_OS_TIMEOUT
 = -2,

32 
	mE_OS_BUSY
 = -3,

33 
	mE_OS_UNAVAIL
 = -4,

34 
	mE_OS_ASSERT_FAIL
 = -5,

35 
	mE_OS_ERR_NO_MEMORY
 = -6,

36 
	mE_OS_ERR_OVERFLOW
 = -7,

37 
	mE_OS_Q_DEL
 = -8,

38 
	mE_OS_ERR_UNKNOWN
,

39 }
	tOS_ERR_TYPE
;

41 
	#TRUE
 1

	)

42 
	#FALSE
 0

	)

43 
	#USED
 1

	)

44 
	#EMPTY
 0

	)

46 
	t__kî√l_size_t
;

47 
	t__kî√l_ssize_t
;

49 #i‚de‡
_SIZE_T


50 
	#_SIZE_T


	)

51 
__kî√l_size_t
 
	tsize_t
;

54 #i‚de‡
_SSIZE_T


55 
	#_SSIZE_T


	)

56 
__kî√l_ssize_t
 
	tssize_t
;

59 #i‚de‡
__BIT_TYPES_DEFINED__


60 
	#__BIT_TYPES_DEFINED__


	)

62 
__u8
 
	tu_öt8_t
;

63 
__s8
 
	töt8_t
;

64 
__u16
 
	tu_öt16_t
;

65 
__s16
 
	töt16_t
;

66 
__u32
 
	tu_öt32_t
;

67 
__s32
 
	töt32_t
;

71 
__u8
 
	tuöt8_t
;

72 
__u16
 
	tuöt16_t
;

73 
__u32
 
	tuöt32_t
;

75 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
) && \

76 (!
deföed
(
CONFIG_USE_STDINT
Ë|| !
	$deföed
(
__INT64_TYPE__
))

77 
__u64
 
	tuöt64_t
;

78 
__u64
 
	tu_öt64_t
;

79 
__s64
 
	töt64_t
;

82 #i‡
	`deföed
(
CONFIG_USE_STDINT
Ë&& deföed(
__INT64_TYPE__
)

83 
__UINT64_TYPE__
 
	tuöt64_t
;

84 
__UINT64_TYPE__
 
	tu_öt64_t
;

85 
__INT64_TYPE__
 
	töt64_t
;

88 #i‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

89 
__kî√l_loff_t
 
	tloff_t
;

92 #i‚de‡
_PTRDIFF_T


93 
	#_PTRDIFF_T


	)

94 
__kî√l_±rdiff_t
 
	t±rdiff_t
;

98 
	tunch¨
;

99 
	tush‹t
;

100 
	tuöt
;

101 
	tul⁄g
;

103 #i‚de‡
NULL


104 
	#NULL
 0

	)

	@include/vsprintf.h

8 #i‚de‡
__VSPRINTF_H


9 
	#__VSPRINTF_H


	)

11 
	~<°d¨g.h
>

12 
	~<rosx/ty≥s.h
>

14 
ul⁄g
 
sim∂e_°πoul
(c⁄° *
˝
, **
ídp
, 
ba£
);

41 
°ri˘_°πoul
(c⁄° *
˝
, 
ba£
, *
ªs
);

42 
sim∂e_°πouŒ
(c⁄° *
˝
, **
ídp
,

43 
ba£
);

44 
sim∂e_°πﬁ
(c⁄° *
˝
, **
ídp
, 
ba£
);

55 
åaûög_°πﬁ
(c⁄° *
°r
);

70 
åaûög_°πﬁn
(c⁄° *
°r
, c⁄° *
íd
);

81 
	$∑nic
(c⁄° *
fmt
, ...)

82 
	`__©åibuã__
 ((
	`f‹m©
 (
__¥ötf__
, 1, 2), 
n‹ëu∫
));

95 
	$∑nic_°r
(c⁄° *
°r
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

109 
	$•rötf
(*
buf
, c⁄° *
fmt
, ...)

110 
	`__©åibuã__
 ((
	`f‹m©
 (
__¥ötf__
, 2, 3)));

125 
	`v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

126 *
	`sim∂e_ôﬂ
(
ul⁄g
 
i
);

142 
	$¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

143 
	`__©åibuã__
 ((
	`f‹m©
 (
__¥ötf__
, 3, 4)));

158 
	$s˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

159 
	`__©åibuã__
 ((
	`f‹m©
 (
__¥ötf__
, 3, 4)));

184 
	`v¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

201 
	`vs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

212 
	`¥öt_grou≥d_uŒ
(
öt_vÆ
, 
digôs
);

214 
boﬁ
 
	`°r2off
(c⁄° *
p
, 
loff_t
 *
num
);

215 
boﬁ
 
	`°r2l⁄g
(c⁄° *
p
, 
ul⁄g
 *
num
);

	@kernel/bytepool.c

18 
	~<RosX.h
>

20 * 
__rx_Æloˇã_block
(
pos
);

21 
__rx_round_off
(
size
);

23 
	g__rx_tŸÆ_mempoﬁ_u£d
;

25 
	spoﬁ_èbÀ
 {

26 
	mnum_of_byãs
;

27 
	mnum_of_blocks
;

28 *
	mpoﬁ_°¨t_±r
;

29 
	mpoﬁ_size
;

30 
	mbô_˘æ
;

31 
	mu£d_blocks
;

32 
	mmax_u£d_blocks
;

35 c⁄° 
	gDeBruijnBôPosôi⁄
[32] = {

39 
	#MAX_BLOCK_SIZE
 32

	)

40 
	#MAX_BLOCK_FROM_POOL
 4096

	)

42 
poﬁ_èbÀ
 
	grx_poﬁ_mem
[] = {

45 {4, 
CONFIG_4_BYTES_BLOCK
,0,0,0,0,0},

46 {8, 
CONFIG_8_BYTES_BLOCK
,0,0,0,0,0},

47 {16, 
CONFIG_16_BYTES_BLOCK
,0,0,0,0,0},

48 {32, 
CONFIG_32_BYTES_BLOCK
,0,0,0,0,0},

49 {64, 
CONFIG_64_BYTES_BLOCK
,0,0,0,0,0},

50 {128, 
CONFIG_128_BYTES_BLOCK
,0,0,0,0,0},

51 {256, 
CONFIG_256_BYTES_BLOCK
,0,0,0,0,0},

52 {512, 
CONFIG_512_BYTES_BLOCK
,0,0,0,0,0},

53 {1024, 
CONFIG_1024_BYTES_BLOCK
,0,0,0,0,0},

54 {2048, 
CONFIG_2048_BYTES_BLOCK
,0,0,0,0,0},

55 {4096, 
CONFIG_4096_BYTES_BLOCK
,0,0,0,0,0}

59 
	$rx_byãpoﬁ_öô
()

61 
i
;

62 *
p
 = 
__rx_byãpoﬁ_°¨t
;

65 if(()
p
 & 0x3) {

66 
	`¥_∑nic
–"__rx_byãpoﬁ_°¨ài†nŸ 32 bôálig√d %p\n", 
p
);

70 
i
 = 0; i < (
rx_poﬁ_mem
)/(
poﬁ_èbÀ
);i ++ )

72 if(
rx_poﬁ_mem
[
i
].
num_of_blocks
 == 0)

76 if(
rx_poﬁ_mem
[
i
].
num_of_blocks
 > 
MAX_BLOCK_SIZE
)

77 
	`¥_∑nic
–"byãpoﬁ_öô: InvÆid block sizê%d\n", 
rx_poﬁ_mem
[
i
].
num_of_blocks
);

79 
p
 =Ö + 4;

80 
p
 =Ö + (
rx_poﬁ_mem
[
i
].
num_of_byãs
 *Ñx_poﬁ_mem[i].
num_of_blocks
);

81 
p
 =Ö + 4;

82 if((()(
p
 - 
__rx_byãpoﬁ_°¨t
Ë> 
CONFIG_BYTEPOOL_SIZE
)) {

83 
	`¥_∑nic
–"byãpoﬁ_öô: FAILED: Insufficõ¡ mem‹yÑeq %dá˘uÆ %d\n", (
p
 - 
__rx_byãpoﬁ_°¨t
), 
CONFIG_BYTEPOOL_SIZE
);

86 
__rx_tŸÆ_mempoﬁ_u£d
 = ()(
p
 - 
__rx_byãpoﬁ_°¨t
);

88 
p
 = 
__rx_byãpoﬁ_°¨t
;

90 
i
 = 0; i < ((
rx_poﬁ_mem
)/(
poﬁ_èbÀ
));i ++ )

92 if(
rx_poﬁ_mem
[
i
].
num_of_blocks
 == 0){

93 
rx_poﬁ_mem
[
i
].
bô_˘æ
 = 0;

97 
rx_poﬁ_mem
[
i
].
poﬁ_°¨t_±r
 = 
p
;

98 *(*)
p
 = 0xDEADBEEF;

99 
p
 =Ö + 4;

101 
p
 =Ö + (
rx_poﬁ_mem
[
i
].
num_of_byãs
 *Ñx_poﬁ_mem[i].
num_of_blocks
);

102 *(*)
p
 = 0xDEADBEEF;

103 
p
 =Ö + 4;

104 
rx_poﬁ_mem
[
i
].
bô_˘æ
 = ~0;

105 
rx_poﬁ_mem
[
i
].
poﬁ_size
 = ()
p
 - ()‘x_poﬁ_mem[i].
poﬁ_°¨t_±r
);

108 
	}
}

111 
	$rx_‰ì
(*
±r
)

113 
i
, 
pos
;

116 
i
 = 0; i < ((
rx_poﬁ_mem
)/ (
poﬁ_èbÀ
)); i++)

118 if(
rx_poﬁ_mem
[
i
].
num_of_blocks
 == 0)

121 if((*)
±r
 < (
rx_poﬁ_mem
[
i
].
poﬁ_°¨t_±r
 +Ñx_poﬁ_mem[i].
poﬁ_size
)){

123 
pos
 = (()
±r
 - ((()
rx_poﬁ_mem
[
i
].
poﬁ_°¨t_±r
 + 4)/rx_poﬁ_mem[i].
num_of_byãs
));

124 
rx_poﬁ_mem
[
i
].
bô_˘æ
 |1 << 
pos
;

129 
	}
}

131 * 
	$__rx_Æloˇã_block
(
pos
)

133 
bô_˘æ
 = 
rx_poﬁ_mem
[
pos
].bit_ctrl;

134 
‰ì_blk
 = -1;

135 if(
bô_˘æ
){

136 
‰ì_blk
 = 
DeBruijnBôPosôi⁄
[((()((
bô_˘æ
 & -bit_ctrl) * 0x077CB531U)) >> 27)];

137 
rx_poﬁ_mem
[
pos
].
bô_˘æ
 &~(1 << 
‰ì_blk
);

138 
rx_poﬁ_mem
[
pos
].
u£d_blocks
 ++;

139 if(
rx_poﬁ_mem
[
pos
].
u£d_blocks
 >Ñx_poﬁ_mem[pos].
max_u£d_blocks
)

140 
rx_poﬁ_mem
[
pos
].
max_u£d_blocks
 =Ñx_poﬁ_mem[pos].
u£d_blocks
;

143  (
rx_poﬁ_mem
[
pos
].
poﬁ_°¨t_±r
 + (4 + (
‰ì_blk
 *Ñx_poﬁ_mem[pos].
num_of_byãs
)));

146  
NULL
;

147 
	}
}

150 *
	$rx_ßŒoc
(
size
)

152 
pos
 = -1;

155 if(
size
 > 
MAX_BLOCK_FROM_POOL
 || size == 0)

156  
NULL
;

158 
size
 --;

159 
size
 = 
	`__rx_round_off
(size);

160 
size
 ++;

162 
pos
 = 
DeBruijnBôPosôi⁄
[(()(
size
 * 0x077CB531U)) >> 27];

163  
	`__rx_Æloˇã_block
(
pos
);

164 
	}
}

166 
	$__rx_round_off
(
size
)

168 
size
 |= size >> 1;

169 
size
 |= size >> 2;

170 
size
 |= size >> 4;

171 
size
 |= size >> 8;

172 
size
 |= size >> 16;

174  
size
;

175 
	}
}

	@kernel/device.c

18 
	~<RosX.h
>

19 
	~<rosx/î∫o.h
>

21 
x86_simuœt‹_öô
();

23 
devfûe
 
	gdesc
[
CONFIG_MAX_DEVICE_DESC
];

26 
devi˚
 
	gdevi˚_èbÀ
[] = {

27 {"simx86", 
NULL
, 0, NULL}

32 
	$rx_dev_›í
(c⁄° *
fûíame
, 
Êags
)

34 
devi˚_èbÀ_id
;

35 
desc_id
;

36 
ªt
;

38 
devi˚_èbÀ_id
 = 0; devi˚_èbÀ_id < ((
devi˚_èbÀ
)/(
devi˚
)); device_table_id ++ )

40 if–0 =
	`°rcmp
(
fûíame
, 
devi˚_èbÀ
[
devi˚_èbÀ_id
].
«me
 ))

42 if(
devi˚_èbÀ
[
devi˚_èbÀ_id
].
devi˚_›s
 =
NULL
)

43  -
ENXIO
;

46 
desc_id
 = 0; desc_id < ((
desc
)/(
devfûe
)); desc_id ++ )

48 if(
desc
[
desc_id
].
dev
 =
NULL
)

51 
desc
[
desc_id
].
dev
 = &
devi˚_èbÀ
[
devi˚_èbÀ_id
];

53 if(0 =(
ªt
 = 
desc
[
desc_id
].
dev
->
devi˚_›s
->
	`›í
(&desc[desc_id]))){

54 
desc
[
desc_id
].
dev
->
devi˚_›í_cou¡
 ++;

55  
desc_id
;

58 
desc
[
desc_id
].
dev
 = 
NULL
;

59  
ªt
;

63  -
ENOMEM
;

66  -
ENODEV
;

67 
	}
}

70 
	$rx_dev_˛o£
(
desc_id
)

72 
ªt
;

73 if(
desc
[
desc_id
].
dev
 !
NULL
) {

75 if(0 =(
ªt
 = 
desc
[
desc_id
].
dev
->
devi˚_›s
->
	`ªÀa£
(&desc[desc_id]))){

77 
desc
[
desc_id
].
dev
->
devi˚_›í_cou¡
 --;

78 
desc
[
desc_id
].
dev
 = 
NULL
;

81  
ªt
;

84  -
ENODEV
;

85 
	}
}

87 
	$rx_dev_ªad
(
desc_id
, *
de°
, 
size_t
 
size
)

89 
ªt
;

90 if(
desc
[
desc_id
].
dev
 !
NULL
) {

92 
ªt
 = 
desc
[
desc_id
].
dev
->
devi˚_›s
->
	`ªad
(&desc[desc_id], 
de°
, 
size
);

93  
ªt
;

95  -
ENODEV
;

96 
	}
}

98 
	$rx_dev_wrôe
(
desc_id
, c⁄° *
§c
, 
size_t
 
size
)

100 
ªt
;

101 if(
desc
[
desc_id
].
dev
 !
NULL
) {

103 
ªt
 = 
desc
[
desc_id
].
dev
->
devi˚_›s
->
	`wrôe
(&desc[desc_id], 
§c
, 
size
);

104  
ªt
;

106  -
ENODEV
;

107 
	}
}

109 
	$rx_dev_io˘l
(
desc_id
, 
cmd
, *
¨g
)

111 
ªt
;

112 if(
desc
[
desc_id
].
dev
 !
NULL
) {

114 
ªt
 = 
desc
[
desc_id
].
dev
->
devi˚_›s
->
	`io˘l
(&desc[desc_id], 
cmd
, 
¨g
 );

115  
ªt
;

117  -
ENODEV
;

118 
	}
}

120 
	$rx_pﬁl_waô
 (
devfûe
 *
d
, 
waô_queue
 *
wq
, 
pﬁl_èbÀ
 *
p
)

123 
	`rx_waô_⁄
(
wq
);

124 
	}
}

126 
	$rx_dev_pﬁl
(
desc_id
, 
evíts
, 
timeout
)

128 
ªt
;

129 
pﬁl_èbÀ
 
pﬁl
;

131 if(
desc
[
desc_id
].
dev
 !
NULL
) {

132 
pﬁl
.
evíts
 =Évents;

133 
pﬁl
.
timeout
 =Åimeout;

134 
ªt
 = 
desc
[
desc_id
].
dev
->
devi˚_›s
->
	`pﬁl
(&desc[desc_id], &
pﬁl
);

135  
ªt
;

137  -
ENODEV
;

138 
	}
}

140 
	$rx_ªgi°î_drivî
(*
«me
, 
devi˚_›s
 *
›s
)

142 
devi˚_èbÀ_id
;

144 
devi˚_èbÀ_id
 = 0; devi˚_èbÀ_id < ((
devi˚_èbÀ
)/(
devi˚
)); device_table_id ++ )

146 if(0 =
	`°rcmp
(
«me
, 
devi˚_èbÀ
[
devi˚_èbÀ_id
].name))

148 if(
devi˚_èbÀ
[
devi˚_èbÀ_id
].
devi˚_›s
 !
NULL
) {

149 
	`__rx_óæy_¥ötk
("Regi°î©i⁄ faûed %s\n", 
«me
 );

150  
ENODEV
;

152 
devi˚_èbÀ
[
devi˚_èbÀ_id
].
devi˚_›s
 = 
›s
;

156  -
ENODEV
;

157 
	}
}

159 
	$rx_drivî_öô
()

161 
	`x86_simuœt‹_öô
();

162 
	}
}

	@kernel/event.c

18 
	~<RosX.h
>

20 
msg_queue
 
	grx_evít_ªcv_q
;

21 
	grx_evít_ªcv_q_°¨t
[(
msg_queue
Ë* 
CONFIG_SYS_EVENT_QUEUE_BLOCKS
];

24 
	sevít
 {

25 *
	mp
;

26 
	mÊag
;

29 
rx_¥o˚ss_evít
(
evít_group
 *, 
Êag
);

38 
	$rx_¸óã_evít_group
(
evít_group
 *
evít
)

40 
imask
 = 
	`rx_íãr_¸ôiˇl
();

42 
evít
->
èsk
 = 
NULL
;

43 
evít
->
√xt
 = 
NULL
;

45 
	`rx_exô_¸ôiˇl
(
imask
);

47  
OS_OK
;

48 
	}
}

51 
	$rx_dñëe_evít_group
(
evít_group
 *
p
)

53 
RX_TASK
 *
ªady
;

54 
imask
 = 
	`rx_íãr_¸ôiˇl
();

57 
p
->
èsk
){

58 
p
->
èsk
->
°©e
 = 
RX_TASK_READY
;

59 
p
->
èsk
->
evít
 = 
NULL
;

60 
ªady
 = 
p
->
èsk
;

61 
p
->
èsk
 =Ö->èsk->
√xt
;

62 
	`__rx_add_to_ªady_q
(
ªady
);

65 
	`rx_exô_¸ôiˇl
(
imask
);

66 
	}
}

69 
	$rx_£t_evít_Êag
(
Êag
)

71 
__rx_cuº_ru¬ög_èsk
->
evít_Êag
 |
Êag
;

72  
OS_OK
;

73 
	}
}

75 
	$rx_˛ór_evít_Êag
(
Êag
)

77 
__rx_cuº_ru¬ög_èsk
->
evít_Êag
 &~
Êag
;

78 
__rx_cuº_ru¬ög_èsk
->
evít_ªcv
 &~
Êag
;

80  
OS_OK
;

81 
	}
}

86 
	$rx_waô_evít_group
(
evít_group
 *
p
, 
Êag
)

88 
RX_TASK
 *
tmp
;

90 
imask
 = 
	`rx_íãr_¸ôiˇl
();

92 
__rx_cuº_ru¬ög_èsk
->
evít_Êag
 |
Êag
;

96 
__rx_cuº_ru¬ög_èsk
->
°©e
 = 
RX_TASK_SUSPEND
;

97 
__rx_cuº_ru¬ög_èsk
->
evít
 = 
p
;

98 
	`__rx_ªmove_‰om_ªady_q
(
__rx_cuº_ru¬ög_èsk
);

99 
__rx_cuº_ru¬ög_èsk
->
√xt
 = 
NULL
;

101 if(!(
p
->
èsk
)) {

102 
p
->
èsk
 = 
__rx_cuº_ru¬ög_èsk
;

105 
tmp
 = 
p
->
èsk
;

106 
tmp
)

107 
tmp
 =Åmp->
√xt
;

109 
tmp
 = 
__rx_cuº_ru¬ög_èsk
;

112 
	`rx_exô_¸ôiˇl
(
imask
);

114 
	`rx_sched
();

116  
__rx_cuº_ru¬ög_èsk
->
evít_ªcv
;

117 
	}
}

120 
	$rx_evít_thªad
()

122 
evít
 
e
;

124 if(
OS_OK
 !
	`rx_¸óã_queue
(&
rx_evít_ªcv_q
, "evít_q", (
evít
), 
CONFIG_SYS_EVENT_QUEUE_BLOCKS
, 
rx_evít_ªcv_q_°¨t
, 
RX_Q_BLOCK
|
RX_Q_CYCLIC_FULL
)) {

125 
	`¥_∑nic
("create_queue failed inÑosx_event_thread\n");

131 
	`rx_ªad_‰om_queue
(&
rx_evít_ªcv_q
, (*)&
e
, (
evít
), 
OS_NO_WAIT
);

132 
	`rx_¥o˚ss_evít
((
evít_group
 *)
e
.
p
,É.
Êag
);

135 
	}
}

138 
	$rx_nŸify_evít
(
evít_group
 *
eg
, 
Êag
)

140 
evít
 
e
;

142 
e
.
p
 = 
eg
;

143 
e
.
Êag
 = flag;

144 
	`rx_wrôe_to_queue
(&
rx_evít_ªcv_q
, (c⁄° *)&
e
, (
evít
), 
OS_WAIT_FOREVER
);

147 
	}
}

150 
	$rx_¥o˚ss_evít
(
evít_group
 *
hód
, 
Êag
)

152 
RX_TASK
 *
°¨t
 = 
NULL
;

153 
RX_TASK
 *
¥ev
 = 
NULL
;

156 
imask
 = 
	`rx_íãr_¸ôiˇl
();

159 
	`__rx_wake
();

161 if(
hód
 =
NULL
) {

162 
	`¥_îr‹
( "InÇotify_event:ÇoÉvent_groupÅoÇotify\n");

163 
	`rx_exô_¸ôiˇl
(
imask
);

164  
OS_ERR
;

167 
°¨t
 = 
¥ev
 = 
hód
->
èsk
;

168 
°¨t
 !
NULL
) {

170 if((
°¨t
->
evít_Êag
 & 
Êag
) != 0) {

171 
°¨t
->
evít_ªcv
 = 
Êag
;

172 
°¨t
->
°©e
 = 
RX_TASK_READY
;

173 
°¨t
->
evít
 = 
NULL
;

174 
°¨t
->
√xt
 = 
NULL
;

176 if(
°¨t
 =
hód
->
èsk
){

177 
hód
->
èsk
 = 
°¨t
->
√xt
;

178 
	`__rx_add_to_ªady_q
(
°¨t
);

179 if(
hód
->
èsk
 =
NULL
)

181 
¥ev
 = 
hód
->
èsk
;

182 
°¨t
 = 
hód
->
èsk
->
√xt
;

184 
¥ev
->
√xt
 = 
°¨t
->next;

185 
	`__rx_add_to_ªady_q
(
°¨t
);

186 
°¨t
 = 
¥ev
->
√xt
;

190 
¥ev
 = 
°¨t
;

191 
°¨t
 = sèπ->
√xt
;

195 
	`rx_exô_¸ôiˇl
(
imask
);

196  
OS_OK
;

197 
	}
}

	@kernel/include/RosX.h

18 #i‚de‡
__ROSE_RTOS_H__


19 
	#__ROSE_RTOS_H__


	)

22 
	~<asm/o•‹t.h
>

23 
	~<asm/swôch.h
>

24 
	~<rosx/°rög.h
>

25 
	~<rosx/ty≥s.h
>

26 
	~<rosx/î∫o.h
>

29 
	~<rx_vîsi⁄.h
>

30 
	~<rx_deföes.h
>

31 
	~<rx_loggî.h
>

32 
	~<rx_èsk.h
>

33 
	~<rx_muãx.h
>

34 
	~<rx_öô.h
>

35 
	~<rx_byãpoﬁ.h
>

36 
	~<rx_queue.h
>

37 
	~<rx_timî.h
>

38 
	~<rx_úq.h
>

39 
	~<rx_sched.h
>

40 
	~<rx_evíts.h
>

41 
	~<rx_£m≠h‹e.h
>

42 
	~<rx_ãrmöÆ.h
>

43 
	~<rx_devi˚.h
>

44 
	~<rx_waô.h
>

46 #ifde‡
CONFIG_PRINT_BUFFER


48 #ifde‡
PRINT_INFO


49 
	#¥_öfo
(
fmt
, 
¨gs
 ...Ë
	`__rx_¥ötk_to_buf„r
(fmt, ##árgs)

	)

51 
	#¥_öfo
(...)

	)

54 #ifde‡
PRINT_DEBUG


55 
	#¥_dbg
(
fmt
, 
¨gs
 ...Ë
	`__rx_¥ötk_to_buf„r
(fmt, ##árgs)

	)

57 
	#¥_dbg
(...)

	)

60 #ifde‡
PRINT_ERROR


61 
	#¥_îr‹
(
fmt
, 
¨gs
 ...Ë
	`__rx_¥ötk_to_buf„r
(fmt, ##árgs)

	)

63 
	#¥_îr‹
(...)

	)

66 
	#¥_∑nic
(
fmt
, 
¨gs
 ...) { \

67 
	`__rx_¥ötk_to_buf„r
(
fmt
, ## 
¨gs
); \

68 }

	)

73 #ifde‡
PRINT_INFO


74 
	#¥_öfo
(...Ë
	`__¥ötk
(
__VA_ARGS__
)

	)

76 
	#¥_öfo
(...)

	)

79 #ifde‡
PRINT_DEBUG


80 
	#¥_dbg
(...Ë
	`__¥ötk
(
__VA_ARGS__
)

	)

82 
	#¥_dbg
(...)

	)

85 #ifde‡
PRINT_ERROR


86 
	#¥_îr‹
(...Ë
	`__¥ötk
(
__VA_ARGS__
)

	)

88 
	#¥_îr‹
(...)

	)

91 
	#¥_∑nic
(...) { \

92 
	`__¥ötk
(
__VA_ARGS__
); \

94 }

	)

	@kernel/include/rx_bytepool.h

18 #i‚de‡
__BYTEPOOL_H__


19 
	#__BYTEPOOL_H__


	)

22 *
	g__rx_byãpoﬁ_°¨t
;

23 
rx_byãpoﬁ_öô
();

26 *
rx_ßŒoc
(
size
);

27 
rx_‰ì
(*);

	@kernel/include/rx_device.h

18 #i‚de‡
__ROSX_DEVICE_H


19 
	#__ROSX_DEVICE_H


	)

21 
	~<RosX.h
>

23 
	gdevi˚
;

24 
	gdevfûe
;

25 
	gpﬁl_èbÀ
;

27 
	sdevi˚_›s
 {

28 (*
	m›í
)(
	mdevfûe
 *);

29 (*
	mªÀa£
)(
	mdevfûe
 *);

30 (*
	mªad
)(
	mdevfûe
 *, *, 
	msize_t
);

31 (*
	mwrôe
)(
	mdevfûe
 *, c⁄° *, 
	msize_t
);

32 (*
	mio˘l
)(
	mdevfûe
 *, , *);

33 (*
	mpﬁl
)(
	mdevfûe
 *, 
	mpﬁl_èbÀ
 *);

37 
	sdevi˚
{

38 c⁄° 
	m«me
[16];

39 
devi˚_›s
 *
	mdevi˚_›s
;

40 
	mdevi˚_›í_cou¡
;

41 *
	m¥iv©e_d©a
;

45 
	sdevfûe
 {

46 
devi˚
 *
	mdev
;

47 
	mÊags
;

50 
	spﬁl_èbÀ
 {

51 
	mevíts
;

52 
	mtimeout
;

55 
rx_ªgi°î_drivî
(*, 
devi˚_›s
 *);

56 
rx_drivî_öô
();

59 
rx_dev_›í
(c⁄° *
fûíame
, 
Êags
);

60 
rx_dev_˛o£
(
fd
);

61 
rx_dev_ªad
(
fd
, *
de°
, 
size_t
);

62 
rx_dev_wrôe
(
fd
, c⁄° *
§c
, 
size_t
);

63 
rx_dev_io˘l
(
fd
, 
cmd
, *
¨g
);

64 
rx_dev_pﬁl
(
desc_id
, 
evíts
, 
timeout
);

65 
rx_pﬁl_waô
 (
devfûe
 *, 
waô_queue
 *, 
pﬁl_èbÀ
 *);

	@kernel/include/rx_events.h

18 #i‚de‡
__EVENTS_H__


19 
	#__EVENTS_H__


	)

22 
	sevít_group
{

23 
RX_TASK
 *
	mèsk
;

24 
evít_group
 *
	m√xt
;

27 
	#RX_DEFINE_EVENTGROUP
(
evít
) \

28 
	`evít_group
 (
evít
Ë
	`__EVENTGROUP_INIT
”vít)

	)

30 
	#__EVENTGROUP_INIT
(
evít
) \

32 .
èsk
 = 
NULL
, \

33 .
√xt
 = 
NULL
 \

34 }

	)

36 
rx_evít_thªad
();

39 
rx_¸óã_evít_group
(
evít_group
 *
p
);

40 
rx_dñëe_evít_group
(
evít_group
 *
p
);

42 
rx_£t_evít_Êag
(
Êag
);

43 
rx_˛ór_evít_Êag
(
Êag
);

44 
rx_waô_evít_group
(
evít_group
 *, 
Êag
);

45 
rx_nŸify_evít
(
evít_group
 *, 
Êag
);

	@kernel/include/rx_init.h

18 #i‚de‡
__INIT_H__


19 
	#__INIT_H__


	)

22 
__rx_kî√l_íãr
();

	@kernel/include/rx_irq.h

18 #i‚de‡
__IRQ_H__


19 
	#__IRQ_H__


	)

21 
	#RX_IRQF_TRIGGER_EDGED
 (1 << 0)

	)

22 
	#RX_IRQF_TRIGGER_LEVEL
 ~
RX_IRQF_TRIGGER_EDGED


	)

24 
	#RX_IRQF_TRIGGER_RISING
 (1 << 1)

	)

25 
	#RX_IRQF_TRIGGER_FALLING
 ~
RX_IRQF_TRIGGER_RISING


	)

27 
	#RX_IRQF_TRIGGER_HIGH
 (1 << 1)

	)

28 
	#RX_IRQF_TRIGGER_LOW
 ~
RX_IRQF_TRIGGER_HIGH


	)

30 
	#RX_IRQF_SHARED
 (1 << 2)

	)

32 
	#RX_IRQ_HANDLED
 0

	)

34 vﬁ©ûê
	g__rx_øw_úq_cou¡î
;

36 
	súq
{

37 
	mdev«me
[8];

38 (*
	múq_h™dÀr
)(
	múq
, *
	mdev_id
);

39 
	mÊags
;

40 *
	mdev_id
;

41 
úq
 *
	m√xt
;

45 
__rx_úq_h™dÀr
(
úq_num
);

46 
	#rx_íabÀ_úq
(
x
Ë
	`__íabÀ_úq
(x)

	)

47 
	#rx_dißbÀ_úq
(
x
Ë
	`__dißbÀ_úq
(x)

	)

48 
	#rx_íãr_¸ôiˇl
(
x
Ë
	`__dißbÀ_úq_globÆ
(x)

	)

49 
	#rx_exô_¸ôiˇl
(
x
Ë
	`__ª°‹e_úq_globÆ
(x)

	)

52 
rx_ªque°_úq
(
úq_num
, (*
úq_h™dÀr
)(, *), 
úq_Êags
, *
dev_«me
, *
dev_id
);

53 
	`rx_‰ì_úq
(
úq_num
, *
p
);

	@kernel/include/rx_logger.h

18 #i‚de‡
__LOGGER_H__


19 
	#__LOGGER_H__


	)

21 
	~<RosX.h
>

23 
__rx_¥ötk_to_buf„r
(c⁄° *
fmt
, ...);

24 
rx_loggî_thªad
();

26 #ifde‡
CONFIG_PRINT_BUFFER


27 *
	g__rx_¥ötk_buf„r_hód
;

28 *
	g__rx_¥ötk_buf„r_èû
;

29 *
	g__rx_¥ötk_buf„r_°¨t_±r
;

	@kernel/include/rx_mutex.h

18 #i‚de‡
__RX_MUTEX_H__


19 
	#__RX_MUTEX_H__


	)

23 
	smuãx
{

25 
	mlock
;

26 
RX_TASK
 *
	mow√r
;

27 
RX_TASK
 *
	mèsk
;

28 
muãx
 *
	m√xt
;

32 
	m__RX_MUTEX_LOCKED
,

33 
	m__RX_MUTEX_UNLOCKED


34 }
	g_RX_MUTEX_LOCK
;

36 
	#RX_MUTEX_WAIT_LOCK
 1

	)

37 
	#RX_MUTEX_NO_WAIT_LOCK
 2

	)

41 
	#RX_DEFINE_MUTEX
(
m
) \

42 
	`muãx
 (
m
Ë
	`__MUTEX_INIT
(m)

	)

44 
	#__MUTEX_INIT
(
m
) \

46 .
lock
 = 
__UNLOCKED
, \

47 .
ow√r
 = 
NULL
, \

48 .
èsk
 = 
NULL
, \

49 .
√xt
 = 
NULL
, \

50 }

	)

52 
rx_¸óã_muãx
(
muãx
 *
m
);

53 
rx_dñëe_muãx
(
muãx
 *
p
);

54 
rx_muãx_u∆ock
(
muãx
 *
p
);

55 
rx_muãx_lock
(
muãx
 *
p
, 
ticks
);

	@kernel/include/rx_queue.h

18 #i‚de‡
__RX_QUEUE_H__


19 
	#__RX_QUEUE_H__


	)

21 
	#RX_Q_NAME_SIZE
 8

	)

24 
	#RX_QUEUE_FULL
 (1 << 0)

	)

25 
	#RX_QUEUE_EMPTY
 ~
RX_QUEUE_FULL


	)

28 
	#RX_Q_CYCLIC_FULL
 (1 << 1)

	)

29 
	#RX_Q_STOP_FULL
 ~(
RX_Q_CYCLIC_FULL
)

	)

31 
	#RX_Q_BLOCK
 (1 << 3)

	)

32 
	#RX_Q_NO_BLOCK
 ~(
RX_Q_BLOCK
)

	)

34 
	#RX_Q_PRIO
 (1 << 2)

	)

35 
	#RX_Q_PRIO_NONE
 ~(
RX_Q_PRIO
)

	)

38 
	smsg_queue
 {

39 
	m«me
[
RX_Q_NAME_SIZE
];

40 *
	m°¨t
;

41 *
	mhód
;

42 *
	mèû
;

43 
	mÊag
;

44 
	msize_of_block
;

45 
	mnum_of_blocks
;

46 
RX_TASK
 *
	mwrôe_èsk
;

47 
RX_TASK
 *
	mªad_èsk
;

51 
rx_¸óã_queue
(
msg_queue
 *
mq
, *
«me
, 
size_of_block
, 
num_of_blocks
, *
queue_°¨t
, 
Êag
);

52 
rx_dñëe_queue
(
msg_queue
 *
mq
);

53 
rx_ªad_‰om_queue
(
msg_queue
 *
mq
, *
msg_buf„r
, 
size
, 
timeout
);

54 
rx_wrôe_to_queue
(
msg_queue
 *
mq
, c⁄° *
msg_buf„r
, 
size
, 
timeout
);

	@kernel/include/rx_sched.h

18 #i‚de‡
__SCHED_H__


19 
	#__SCHED_H__


	)

21 vﬁ©ûê
	g__rx_√ed_ªsched
;

24 
rx_sched
();

	@kernel/include/rx_semaphore.h

18 #i‚de‡
__SEMAPHORE_H__


19 
	#__SEMAPHORE_H__


	)

21 
	s£m≠h‹e
 {

23 
	möô_vÆ
;

24 
	mcuº_vÆ
;

25 
RX_TASK
 *
	mèsk
;

26 
£m≠h‹e
 *
	m√xt
;

29 
	#DEFINE_SEMAPHORE
(
s
,
v
) \

30 
	`£m≠h‹e
 (
s
Ë
	`__SEMAPHORE_INIT
(
v
)

	)

32 
	#__SEMAPHORE_INIT
(
v
) \

33 { .
öô_vÆ
 = (
v
), \

34 .
cuº_vÆ
 = (
v
), \

35 .
èsk
 = 
NULL
, \

36 .
√xt
 = 
NULL
, \

37 }

	)

40 
rx_¸óã_£m≠h‹e
(
£m≠h‹e
 *, 
vÆ
);

41 
rx_dñëe_£m≠h‹e
(
£m≠h‹e
 *
£m
);

42 
rx_£m≠h‹e_po°
(
£m≠h‹e
 *
£m
);

43 
rx_£m≠h‹e_waô
(
£m≠h‹e
 *
£m
, 
timeout
);

	@kernel/include/rx_task.h

18 #i‚de‡
__RX_TASK_H__


19 
	#__RX_TASK_H__


	)

20 
	#RX_TASK_STR_LEN
 
CONFIG_TASK_STR_LEN


	)

26 
	s__rx_èsk_c⁄åﬁ_block


28 *
	m¥ìm±
;

29 
	m«me
[
RX_TASK_STR_LEN
];

30 *
	m°ack_°¨t_±r
;

31 *
	mcuº_°ack_±r
;

32 *
	mù
;

33 *
	mbp
;

34 
	m°ack_size
;

35 
	m¥io
;

36 (*
	mfunc
)();

37 
	m°©e
;

38 #ifde‡
CONFIG_TIME_SLICE


39 
	mtime_¶i˚
;

40 
	mticks
;

42 #ifde‡
CONFIG_PRIO_INHERITANCE


43 
	m‹ig_¥io
;

45 
	mevít_Êag
;

46 
	mevít_ªcv
;

47 
	mtimeout
;

48 
timî_li°
 *
	mtimî
;

49 
£m≠h‹e
 *
	m£m
;

50 
muãx
 *
	mmuãx
;

51 
evít_group
 *
	mevít
;

52 
waô_queue
 *
	mwq
;

53 
msg_queue
 *
	mmq
;

54 
__rx_èsk_c⁄åﬁ_block
 *
	m√xt
;

55 
__rx_èsk_c⁄åﬁ_block
 *
	mli°
;

56 
	mîr
;

59 
__rx_èsk_c⁄åﬁ_block
 
	tRX_TASK
;

60 
	#RX_TASK_LEAST_PRIO
 (
CONFIG_MAX_TASK
 - 1Ë

	)

61 
	#RX_TASK_HIGH_PRIO
 0

	)

65 
	g__rx_cuº_num_èsk
;

66 #ifde‡
CONFIG_STACK_ALLOC_DYNAMIC


67 * 
	g__rx_°ack_°¨t_±r
;

68 * 
	g__rx_cuº_°ack_±r
;

70 
RX_TASK
 *
	g__rx_cuº_ru¬ög_èsk
;

71 
RX_TASK
 *
	g__rx_èsk_ªady_hód
;

72 
RX_TASK
 *
	g__rx_èsk_li°_hód
;

73 
RX_TASK
 
	g__rx_öô_èsk
;

75 
__rx_add_to_ªady_q
(
RX_TASK
 *
p
);

76 
__rx_ªmove_‰om_ªady_q
(
RX_TASK
 *
tid
);

80 
	mRX_TASK_SUSPEND
,

81 
	mRX_TASK_READY
,

82 
	mRX_TASK_RUNNING
,

83 
	mRX_TASK_COMPLETE
,

84 
	mRX_TASK_ABORT
,

85 
	mRX_TASK_INTERRUPTIBLE
,

86 
	mRX_TASK_UNINTERRUPTIBLE
,

88 }
	gRX_TASK_STATE
;

91 
	#MYSELF
 0

	)

93 
rx_¸óã_èsk
(
RX_TASK
 *, *
èsk_«me
, 
¥io
, *
°ack_±r
, 
°ack_size
, (*
func
)(), 
èsk_°©e
, 
time_¶i˚
);

94 
	`rx_dñëe_èsk
(
RX_TASK
 *);

95 
	`rx_com∂ëe_èsk
(
RX_TASK
 *);

96 
	`rx_£t_èsk_¥io
(
RX_TASK
 *, 
¥io
);

97 
	`rx_su•íd_èsk
(
RX_TASK
 *);

98 
	`rx_ªsume_èsk
(
RX_TASK
 *);

99 
	`rx_ab‹t_èsk
(
RX_TASK
 *);

	@kernel/include/rx_terminal.h

18 #i‚de‡
__ROSE_TERMINAL_H__


19 
	#__ROSE_TERMINAL_H__


	)

21 
rx_ãrmöÆ_thªad
();

	@kernel/include/rx_timer.h

18 #i‚de‡
__RX_TIMER_H__


19 
	#__RX_TIMER_H__


	)

22 
	#RX_TIMER_EVENT_IRQ_EVENT
 (1 << 0)

	)

25 
	stimî_li°
 {

26 
	mtime_expúy
;

27 
	mdñay
;

28 
	mÊag
;

29 (* 
	mh™dÀr
)(*);

30 *
	m¥iv
;

31 
RX_TASK
 *
	mèsk
;

32 
timî_li°
 *
	m√xt
;

33 
timî_li°
 *
	m¥ev
;

36 
__rx_timî_tick_úq_h™dÀr
(
úq
, *
a
);

38 #ifde‡
LOG_DBG


40 
	grx_g_timî_poﬁ_u£d
;

44 
	#__RX_TIMER_ENABLED
 (1 << 0)

	)

45 
	#__RX_TIMER_DISABLED
 ~(
__RX_TIMER_ENABLED
)

	)

47 vﬁ©ûê
	gjiffõs
;

48 
evít_group
 
	g__rx_timî_evíts
;

49 
timî_li°
 *
	g__rx_a˘ive_timî_hód
;

52 
rx_timî_thªad
();

53 
__rx_tick_timî
();

54 
__rx_add_timî
(
timî_li°
 *, (*
func
)(*), 
ticks
, 
RX_TASK
 *
tid
);

55 
	`__rx_add_to_a˘ive_timî_li°
(
timî_li°
 *
p
);

56 
	`__rx_ªmove_‰om_timî_li°
(
timî_li°
 *
p
, timî_li° **
hód
);

59 
	`rx_öô_timî
(
timî_li°
 *
timî
, (*
timî_h™dÀr
)(*), *
¥iv
, 
dñay
);

60 
	`rx_¸óã_timî
(
timî_li°
 *, (*
timî_h™dÀr
)(*), *
¥iv
, 
ticks
);

61 
	`rx_dñëe_timî
(
timî_li°
 *
p
);

62 
	`rx_°¨t_timî
(
timî_li°
 *
p
);

63 
	`rx_°›_timî
(
timî_li°
 *
p
);

64 
	`rx_mod_timî
(
timî_li°
 *
p
, 
dñay
);

65 
	`rx_ndñay
();

66 
	`rx_udñay
();

67 
	`rx_mdñay
();

68 
	`rx_m¶ìp
(
m£cs
);

69 
	`rx_s¶ìp
(
£cs
);

74 
	#RX_TICKS_TO_MS
(
ticks
Ë((—icksË* (1000/
CONFIG_HZ
)))

	)

75 
	#RX_TICKS_TO_SECS
(
ticks
Ë(
	`TICKS_TO_MS
—icksË* 1000)

	)

76 
	#RX_SECS_TO_TICKS
(
s
Ë((sË* (1000/
CONFIG_HZ
))

	)

78 
	#__RX_TIMER_OFF
 0

	)

79 
	#__RX_TIMER_ON
 1

	)

	@kernel/include/rx_version.h

1 #i‚de‡
__CONFIG_RELEASE_VERSION_H


2 
	#__CONFIG_RELEASE_VERSION_H


	)

4 
	#CONFIG_RELEASE_VERSION
 "v0_3"

	)

	@kernel/include/rx_wait.h

20 #i‚de‡
__ROSX_WAIT_H__


21 
	#__ROSX_WAIT_H__


	)

23 
	~<rx_èsk.h
>

31 
	swaô_queue
{

32 
RX_TASK
 *
	mèsk
;

34 
waô_queue
 *
	m√xt
;

35 
waô_queue
 *
	m¥ev
;

38 
__rx_föish_waô
();

39 
__rx_add_to_waô_queue
(
waô_queue
 *
wq
, , , 
timî_li°
 *);

41 
	#rx_waô_queue_timeout
(
wq
, 
c⁄dôi⁄
, 
timeout
) \

43 
__ªt
 = 0; \

44 
timî_li°
 
timî
; \

45 i‡(!(
c⁄dôi⁄
)){ \

46 
	`__rx_waô_queue_timeout
(
wq
, 
c⁄dôi⁄
, 
timeout
, 
timî
, 
__ªt
); \

48 
__ªt
; \

49 })

	)

51 
	#__rx_waô_queue_timeout
(
wq
, 
c⁄dôi⁄
, 
timeout
, 
timî
, 
ªt
) \

54 
	`__rx_add_to_waô_queue
(
wq
, 
RX_TASK_INTERRUPTIBLE
, 
timeout
, &
timî
); \

55 
	`rx_sched
(); \

56 if((
c⁄dôi⁄
Ë|| (
E_OS_TIMEOUT
 =((
wq
)->
timeout
) )) { \

59 (
ªt
Ë
	`__rx_föish_waô
(
wq
); \

61 }0)

	)

63 
	#rx_waô_queue
(
wq
, 
c⁄dôi⁄
) \

65 
__ªt
 = 0; \

66 i‡(!(
c⁄dôi⁄
)) \

67 
	`__rx_waô_queue
(
wq
, 
c⁄dôi⁄
, 
__ªt
); \

68 
__ªt
; \

69 })

	)

71 
	#__rx_waô_queue
(
wq
, 
c⁄dôi⁄
, 
ªt
) \

74 
	`__rx_add_to_waô_queue
(
wq
, 
RX_TASK_INTERRUPTIBLE
, 0, 0); \

75 
	`rx_sched
(); \

76 if(
c⁄dôi⁄
) { \

80 (
ªt
Ë
	`__rx_föish_waô
(
wq
); \

81 }0)

	)

84 
	#rx_waô_⁄
(
wq
) \

86 
__ªt
 = 0; \

87 
	`__rx_waô_⁄
(
wq
, 
__ªt
); \

88 
__ªt
; \

89 })

	)

91 
	#__rx_waô_⁄
(
wq
, 
ªt
) \

93 
	`__rx_add_to_waô_queue
(
wq
, 
RX_TASK_UNINTERRUPTIBLE
, 0, 0); \

94 
	`rx_sched
(); \

95 (
ªt
Ë
	`__rx_föish_waô
(
wq
); \

96 }0)

	)

99 
	#rx_waô_⁄_timeout
(
wq
, 
timeout
) \

101 
__ªt
 = 0; \

102 
timî_li°
 
timî
; \

103 
	`__rx_waô_⁄_timeout
(
wq
, 
timeout
, 
timî
, 
__ªt
); \

104 
__ªt
; \

105 })

	)

107 
	#__rx_waô_⁄_timeout
(
wq
, 
timeout
, 
timî
, 
ªt
) \

109 
	`__rx_add_to_waô_queue
(
wq
, 
RX_TASK_UNINTERRUPTIBLE
, 
timeout
, &
timî
); \

110 
	`rx_sched
(); \

111 (
ªt
Ë
	`__rx_föish_waô
(
wq
); \

112 }0)

	)

115 
	#RX_DEFINE_WAITQUEUE
(
wq
) \

116 
waô_queue
 
wq
 = 
	`__RX_WAITEVENT_INIT
(wq)

	)

118 
	#__RX_WAITEVENT_INIT
(
wq
) \

120 .
èsk
 = 
NULL
, \

121 .
√xt
 = 
NULL
, \

122 .
¥ev
 = 
NULL
, \

123 }

	)

125 
__rx_wake
();

126 
rx_wakeup
(
waô_queue
 *);

	@kernel/init.c

18 
	~<RosX.h
>

20 
RX_TASK
 
	grx_timî0_tcb
;

21 
RX_TASK
 
	grx_evít0_tcb
;

22 
RX_TASK
 
	grx_loggî0_tcb
;

23 
RX_TASK
 
	grx_ãrmöÆ0_tcb
;

26 
rx_≠∂iˇti⁄_öô
();

31 
	$__kî√l_íãr
()

34 
	`rx_byãpoﬁ_öô
();

36 
__rx_cuº_°ack_±r
 = 
__rx_°ack_°¨t_±r
;

38 
	`°r˝y
(
__rx_öô_èsk
.
«me
, "init");

39 
__rx_cuº_ru¬ög_èsk
 = &
__rx_öô_èsk
;

40 
__rx_cuº_num_èsk
 = 0;

43 
	`rx_drivî_öô
();

46 
	`rx_¸óã_èsk
(&
rx_timî0_tcb
,"timî0", 0, 0, 8192, 
rx_timî_thªad
, 
RX_TASK_READY
, 0);

47 
	`rx_¸óã_èsk
(&
rx_evít0_tcb
,"evít0", 0, 0, 8192, 
rx_evít_thªad
, 
RX_TASK_READY
, 0);

50 
__rx_¥ötk_buf„r_hód
 = 
__rx_¥ötk_buf„r_èû
 = 
__rx_¥ötk_buf„r_°¨t_±r
;

51 
	`rx_¸óã_èsk
(&
rx_loggî0_tcb
,"loggî0", (
RX_TASK_LEAST_PRIO
 - 1), 0, 8192, 
rx_loggî_thªad
, 
RX_TASK_READY
, 0);

54 
	`rx_¸óã_èsk
(&
rx_ãrmöÆ0_tcb
,"ãrm0", (
RX_TASK_LEAST_PRIO
 - 2), 0, 8192, 
rx_ãrmöÆ_thªad
, 
RX_TASK_READY
, 0);

56 
	`rx_≠∂iˇti⁄_öô
();

58 
	}
}

	@kernel/irq.c

18 
	~<RosX.h
>

20 
úq
 
	g__rx_úq_poﬁ
[
CONFIG_IRQ_COUNT
 - 1];

26 
	$__rx_úq_h™dÀr
(
úq_num
)

30 
__rx_øw_úq_cou¡î
 ++;

33 if–(
__rx_úq_poﬁ
[
úq_num
].
úq_h™dÀr
 !
NULL
Ë|| (__rx_úq_poﬁ[úq_num].
√xt
 != NULL)) {

34 
__rx_úq_poﬁ
[
úq_num
].
	`úq_h™dÀr
(úq_num, __rx_úq_poﬁ[úq_num].
dev_id
);

37 if(
__rx_úq_poﬁ
[
úq_num
].
Êags
 & 
RX_IRQF_SHARED
){

38 
p
 = 
__rx_úq_poﬁ
[
úq_num
].
√xt
;

40 
p
 !
NULL
){

41 
p
->
	`úq_h™dÀr
(
úq_num
,Ö->
dev_id
);

42 
p
 =Ö->
√xt
;

47 
	}
}

56 
	$rx_ªque°_úq
(
úq_num
, (*
úq_h™dÀr
)(, *), 
úq_Êags
, *
dev_«me
, *
dev_id
)

60 if(
úq_num
 > 
CONFIG_IRQ_COUNT
)

61  
OS_ERR
;

65 if(
__rx_úq_poﬁ
[
úq_num
].
úq_h™dÀr
 !
NULL
 || __rx_úq_poﬁ[úq_num].
√xt
 != NULL) {

67 if(!(
úq_Êags
 & 
RX_IRQF_SHARED
Ë|| !(
dev_id
))

68  
E_OS_UNAVAIL
;

71 
p
 = 
__rx_úq_poﬁ
[
úq_num
].
√xt
;

72 
p
 !
NULL
)

73 
p
 =Ö->
√xt
;

75 if(
NULL
 =(
p
 = (
úq
 *)
	`__rx_Æloc_poﬁ
(
RX_SHIRQ_POOL
)))

76  
E_OS_UNAVAIL
;

78 
p
->
úq_h™dÀr
 = irq_handler;

79 
p
->
Êags
 = 
úq_Êags
;

80 
	`°∫˝y
(
p
->
dev«me
, 
dev_«me
, 7);

81 
p
->
dev_id
 = dev_id;

82 
p
->
√xt
 = 
NULL
;

86 
__rx_úq_poﬁ
[
úq_num
].
úq_h™dÀr
 = irq_handler;

87 
__rx_úq_poﬁ
[
úq_num
].
Êags
 = 
úq_Êags
;

88 
	`°∫˝y
(
__rx_úq_poﬁ
[
úq_num
].
dev«me
, 
dev_«me
, 7);

89 
__rx_úq_poﬁ
[
úq_num
].
dev_id
 = dev_id;

90 
__rx_úq_poﬁ
[
úq_num
].
√xt
 = 
NULL
;

94  
OS_OK
;

95 
	}
}

101 
	$rx_‰ì_úq
(
úq_num
, *
dev_id
)

106 if(
úq_num
 > 
CONFIG_IRQ_COUNT
)

107  
E_OS_UNAVAIL
;

109 if(
__rx_úq_poﬁ
[
úq_num
].
Êags
 & 
RX_IRQF_SHARED
) {

111 if(
__rx_úq_poﬁ
[
úq_num
].
dev_id
 == dev_id) {

113 
__rx_úq_poﬁ
[
úq_num
].
úq_h™dÀr
 = 
NULL
;

115 
¥ev
 = 
cuº
 = 
__rx_úq_poﬁ
[
úq_num
].
√xt
;

116 
cuº
 !
NULL
) {

117 if(
cuº
->
dev_id
 == dev_id) {

118 
cuº
->
úq_h™dÀr
 = 
NULL
;

119 
¥ev
->
√xt
 = 
cuº
->next;

120 
	`__rx_‰ì_poﬁ
(
cuº
, 
RX_SHIRQ_POOL
);

123 
cuº
 = cuº->
√xt
;

127 if(
__rx_úq_poﬁ
[
úq_num
].
√xt
 =
NULL
) {

128 
__rx_úq_poﬁ
[
úq_num
].
Êags
 = 0;

133 
__rx_úq_poﬁ
[
úq_num
].
úq_h™dÀr
 = 
NULL
;

135  
OS_OK
;

136 
	}
}

	@kernel/logger.c

18 
	~<RosX.h
>

19 
	~<°d¨g.h
>

21 
	grx_¥öt_buf„r_ªady
 = 0;

25 
	$__rx_¥ötk_to_buf„r
(c⁄° *
fmt
, ...)

27 
va_li°
 
¨g
;

28 
size
;

29 
imask
;

31 
	`va_°¨t
(
¨g
, 
fmt
);

32 
size
 = 
	`v¢¥ötf
(
NULL
, 0, 
fmt
, 
¨g
);

35 if((
size
 + 1Ë> 
CONFIG_PRINT_BUFFER_SIZE
) {

36 
	`¥_îr‹
("InvÆidÖröàªque°;Éx˚ìd†¥öàbuf„∏ˇ∑côy Reque°ed: %d AvaûabÀ: %d\n" , (
size
 + 1), 
CONFIG_PRINT_BUFFER_SIZE
 );

39 
imask
 = 
	`rx_íãr_¸ôiˇl
();

41 if((
__rx_¥ötk_buf„r_hód
 + (
size
 + 1)Ë> (
__rx_¥ötk_buf„r_°¨t_±r
 + 
CONFIG_PRINT_BUFFER_SIZE
)){

43 
	`mem£t
(
__rx_¥ötk_buf„r_hód
, '\0', ((
__rx_¥ötk_buf„r_°¨t_±r
 + 
CONFIG_PRINT_BUFFER_SIZE
) - __rx_printk_buffer_head));

44 
__rx_¥ötk_buf„r_hód
 = 
__rx_¥ötk_buf„r_°¨t_±r
;

48 
	`v•rötf
(
__rx_¥ötk_buf„r_hód
, 
fmt
, 
¨g
);

49 
__rx_¥ötk_buf„r_hód
 = __rx_¥ötk_buf„r_hód + (
size
 + 1);

51 
	`rx_exô_¸ôiˇl
(
imask
);

53 
	`va_íd
 (
¨g
);

54 
	}
}

56 
	$rx_loggî_thªad
()

58 
dd
;

59 
	`RX_DEFINE_WAITQUEUE
(
w
);

61 
rx_¥öt_buf„r_ªady
 = 1;

62 
	`__rx_óæy_¥ötk
("rosx_logger_threadÑeady\n");

64 i‡(0 < (
dd
 = 
	`rx_dev_›í
(
CONFIG_SERIAL
, 0))) {

65 
	`__rx_óæy_¥ötk
("FailedÅo open serial device\n");

70 if(0 =
	`rx_waô_queue
(&
w
, (
__rx_¥ötk_buf„r_hód
 !
__rx_¥ötk_buf„r_èû
))) {

71 
	`rx_dev_wrôe
(
dd
, 
__rx_¥ötk_buf„r_èû
, 1);

72 if((
__rx_¥ötk_buf„r_èû
 + 1Ë> (
__rx_¥ötk_buf„r_°¨t_±r
 + 
CONFIG_PRINT_BUFFER_SIZE
) ) {

74 
__rx_¥ötk_buf„r_èû
 = 
__rx_¥ötk_buf„r_°¨t_±r
;

76 
__rx_¥ötk_buf„r_èû
 = __rx_printk_buffer_tail + 1;

81 
	}
}

	@kernel/mutex.c

18 
	~<RosX.h
>

20 
__rx_muãx_timeout
(
muãx
 *
p
, 
timeout
);

21 
__rx_muãx_h™dÀr
(*
±r
);

24 
	$rx_¸óã_muãx
(
muãx
 *
m
)

27 
imask
 = 
	`rx_íãr_¸ôiˇl
();

29 
m
->
lock
 = 
__RX_MUTEX_UNLOCKED
;

30 
m
->
ow√r
 = 
NULL
;

31 
m
->
√xt
 = 
NULL
;

32 
m
->
èsk
 = 
NULL
;

34 
	`rx_exô_¸ôiˇl
(
imask
);

36  
OS_OK
;

37 
	}
}

40 
	$rx_dñëe_muãx
(
muãx
 *
m
)

42 
RX_TASK
 *
ªady
;

43 
imask
 = 
	`rx_íãr_¸ôiˇl
();

46 
m
->
èsk
){

47 
m
->
èsk
->
°©e
 = 
RX_TASK_READY
;

48 
m
->
èsk
->
muãx
 = 
NULL
;

50 if(
m
->
èsk
->
timî
) {

51 
	`rx_°›_timî
(
m
->
èsk
->
timî
);

52 
m
->
èsk
->
timî
 = 
NULL
;

54 
ªady
 = 
m
->
èsk
;

55 
m
->
èsk
 = m->èsk->
√xt
;

56 
	`__rx_add_to_ªady_q
(
ªady
);

59 
m
->
ow√r
 = 
NULL
;

61 
	`rx_exô_¸ôiˇl
(
imask
);

62 
	}
}

67 
	$rx_muãx_u∆ock
(
muãx
 *
p
)

69 
RX_TASK
 *
t
;

71 
imask
 = 
	`rx_íãr_¸ôiˇl
();

73 if(
p
->
lock
 =
__RX_MUTEX_LOCKED
){

74 if(
p
->
ow√r
 !
__rx_cuº_ru¬ög_èsk
){

75 
	`¥_îr‹
("IŒegÆ muãx u∆ock %†%s\n", 
p
->
ow√r
->
«me
, 
__rx_cuº_ru¬ög_èsk
->name);

76 
	`rx_exô_¸ôiˇl
(
imask
);

77  
OS_ERR
;

79 
p
->
lock
 = 
__RX_MUTEX_UNLOCKED
;

81 #ifde‡
CONFIG_PRIO_INHERITANCE


82 if(
p
->
ow√r
->
¥io
 !p->ow√r->
‹ig_¥io
) {

83 
p
->
ow√r
->
¥io
 =Ö->ow√r->
‹ig_¥io
;

84 
	`¥_dbg
("Muãx ow√∏%†backÅÿ‹igöÆÖriÿ%d\n", 
p
->
ow√r
->
«me
,Ö->ow√r->
¥io
);

86 
	`__rx_ªmove_‰om_ªady_q
(
p
->
ow√r
);

87 
	`__rx_add_to_ªady_q
(
__rx_cuº_ru¬ög_èsk
);

90 
t
 = 
p
->
èsk
;

93 if(
t
) {

94 
p
->
èsk
 =Ö->èsk->
√xt
;

96 if(
t
->
timî
) {

97 
	`rx_°›_timî
(
t
->
timî
);

98 
t
->
timî
 = 
NULL
;

101 
p
->
ow√r
 = 
t
;

102 #ifde‡
CONFIG_PRIO_INHERITANCE


104 
t
 = 
p
->
èsk
;

105 
t
)

107 if(
p
->
ow√r
->
¥io
 > 
t
->prio) {

108 
p
->
ow√r
->
¥io
 = 
t
->prio;

110 
t
 =Å->
√xt
;

113 
p
->
ow√r
->
°©e
 = 
RX_TASK_READY
;

114 
p
->
ow√r
->
muãx
 = 
NULL
;

115 
p
->
lock
 = 
__RX_MUTEX_LOCKED
;

116 
	`__rx_add_to_ªady_q
(
p
->
ow√r
);

120 
	`rx_exô_¸ôiˇl
(
imask
);

121  
OS_OK
;

122 
	}
}

125 
	$__rx_muãx_h™dÀr
(*
±r
)

127 
RX_TASK
 *
èsk
 = (RX_TASK *)
±r
;

128 
muãx
 *muãx = 
èsk
->mutex;

129 
RX_TASK
 *
t1
;

130 
RX_TASK
 *
t2
;

132 if(
muãx
->
ow√r
 =
èsk
)

136 
t1
 = 
t2
 = 
muãx
->
èsk
;

137 if(
t1
 =
èsk
){

138 
muãx
->
èsk
 = muãx->èsk->
√xt
;

141 
t1
 !
èsk
) {

142 
t2
 = 
t1
;

143 
t1
 =Å1->
√xt
;

145 
t2
->
√xt
 = 
t1
->next;

147 #ifde‡
CONFIG_PRIO_INHERITANCE


149 if(
muãx
->
ow√r
->
¥io
 =
èsk
->prio) {

150 
muãx
->
ow√r
->
¥io
 = muãx->ow√r->
‹ig_¥io
;

153 
t1
 = 
muãx
->
èsk
;

154 
t1
)

156 if(
muãx
->
ow√r
->
¥io
 > 
t1
->prio) {

157 
muãx
->
ow√r
->
¥io
 = 
t1
->prio;

159 
t1
 =Å1->
√xt
;

163 if(
muãx
->
ow√r
->
°©e
 =
RX_TASK_READY
) {

164 
	`__rx_ªmove_‰om_ªady_q
(
muãx
->
ow√r
);

165 
	`__rx_add_to_ªady_q
(
muãx
->
ow√r
);

170 
èsk
->
timî
 = 
NULL
;

171 
èsk
->
muãx
 = 
NULL
;

173 
èsk
->
°©e
 = 
RX_TASK_READY
;

174 
	`__rx_add_to_ªady_q
(
èsk
);

175 
	}
}

178 
	$__rx_muãx_timeout
(
muãx
 *
p
, 
timeout
)

180 
timî_li°
 
timî
;

182 
	`rx_öô_timî
(&
timî
, 
__rx_muãx_h™dÀr
, 
__rx_cuº_ru¬ög_èsk
, 
timeout
);

183 
	`rx_°¨t_timî
(&
timî
);

184 
__rx_cuº_ru¬ög_èsk
->
timî
 = &timer;

185 
	`rx_su•íd_èsk
(
MYSELF
);

187 if(
p
->
ow√r
 =
__rx_cuº_ru¬ög_èsk
)

188  
OS_OK
;

190  
E_OS_TIMEOUT
;

191 
	}
}

194 
	$rx_muãx_lock
(
muãx
 *
p
, 
timeout
)

196 
RX_TASK
 *
t1
;

198 
imask
 = 
	`rx_íãr_¸ôiˇl
();

200 if(
p
->
lock
 =
__RX_MUTEX_UNLOCKED
) {

201 
p
->
lock
 = 
__RX_MUTEX_LOCKED
;

202 
p
->
ow√r
 = 
__rx_cuº_ru¬ög_èsk
;

203 
	`rx_exô_¸ôiˇl
(
imask
);

204  
OS_OK
;

207 if(
timeout
 =
OS_NO_WAIT
) {

208 
	`rx_exô_¸ôiˇl
(
imask
);

209  
E_OS_UNAVAIL
;

211 
	`¥_öfo
("íãrögÑx_muãx_lock %s\n", 
__rx_cuº_ru¬ög_èsk
->
«me
);

213 
__rx_cuº_ru¬ög_èsk
->
°©e
 = 
RX_TASK_SUSPEND
;

214 
__rx_cuº_ru¬ög_èsk
->
muãx
 = 
p
;

215 
	`__rx_ªmove_‰om_ªady_q
(
__rx_cuº_ru¬ög_èsk
);

216 
__rx_cuº_ru¬ög_èsk
->
√xt
 = 
NULL
;

219 if(!(
p
->
èsk
)) {

220 
p
->
èsk
 = 
__rx_cuº_ru¬ög_èsk
;

222 
t1
 = 
p
->
èsk
;

224 
t1
->
√xt
)

225 
t1
 =Å1->
√xt
;

227 
t1
->
√xt
 = 
__rx_cuº_ru¬ög_èsk
;

231 #ifde‡
CONFIG_PRIO_INHERITANCE


232 if(
p
->
ow√r
->
¥io
 > 
__rx_cuº_ru¬ög_èsk
->prio) {

233 
p
->
ow√r
->
¥io
 = 
__rx_cuº_ru¬ög_èsk
->prio;

234 
	`¥_dbg
("Muãx ow√∏%†√wÖriÿ%d\n", 
p
->
ow√r
->
«me
,Ö->ow√r->
¥io
);

235 if(
p
->
ow√r
->
°©e
 =
RX_TASK_READY
) {

236 
	`__rx_ªmove_‰om_ªady_q
(
p
->
ow√r
);

237 
	`__rx_add_to_ªady_q
(
p
->
ow√r
);

241 if(
timeout
 > 0) {

242 
	`rx_exô_¸ôiˇl
(
imask
);

243  
	`__muãx_timeout
(
p
, 
timeout
);

245 
	`rx_exô_¸ôiˇl
(
imask
);

247 
	`rx_sched
();

249 if(!
p
)

250  
E_OS_UNAVAIL
;

252  
OS_OK
;

253 
	}
}

	@kernel/queue.c

18 
	~<RosX.h
>

47 
	$rx_¸óã_queue
(
msg_queue
 *
mq
, *
«me
, 
size_of_block
, 
num_of_blocks
, *
queue_°¨t
, 
Êag
)

49 if(
size_of_block
 > 64 || size_of_block <0 || 
num_of_blocks
 == 0){

50 
	`¥_îr‹
( "create_queue: CheckÖarams \n");

51  
OS_ERR
;

54 
	`°∫˝y
(
mq
->
«me
,Çame, 
RX_Q_NAME_SIZE
);

55 
mq
->
°¨t
 = 
queue_°¨t
;

56 
mq
->
size_of_block
 = size_of_block;

57 
mq
->
num_of_blocks
 =Çum_of_blocks;

58 
mq
->
hód
 = mq->
èû
 = mq->
°¨t
;

59 
mq
->
Êag
 |(
RX_QUEUE_EMPTY
 & flag);

60 
mq
->
wrôe_èsk
 = mq->
ªad_èsk
 = 
NULL
;

62  
OS_OK
;

63 
	}
}

68 
	$rx_dñëe_queue
(
msg_queue
 *
mq
)

70 
RX_TASK
 *
ªady
;

71 
imask
 = 
	`rx_íãr_¸ôiˇl
();

74 
mq
->
wrôe_èsk
) {

76 if(
mq
->
wrôe_èsk
->
timî
){

77 
	`rx_°›_timî
(
mq
->
wrôe_èsk
->
timî
);

78 
mq
->
wrôe_èsk
->
timî
 = 
NULL
;

80 
mq
->
wrôe_èsk
->
°©e
 = 
RX_TASK_READY
;

81 
mq
->
wrôe_èsk
->mq = 
NULL
;

83 
ªady
 = 
mq
->
wrôe_èsk
;

84 
mq
->
wrôe_èsk
 = mq->wrôe_èsk->
√xt
;

85 
	`__rx_add_to_ªady_q
(
ªady
);

89 if(
mq
->
ªad_èsk
) {

91 if(
mq
->
ªad_èsk
->
timî
){

92 
	`rx_°›_timî
(
mq
->
ªad_èsk
->
timî
);

93 
mq
->
ªad_èsk
->
timî
 = 
NULL
;

95 
mq
->
ªad_èsk
->
°©e
 = 
RX_TASK_READY
;

96 
mq
->
ªad_èsk
->mq = 
NULL
;

98 
	`__rx_add_to_ªady_q
(
mq
->
ªad_èsk
);

101  
OS_OK
;

103 
	`rx_exô_¸ôiˇl
(
imask
);

104 
	}
}

113 
	$rx_ªad_‰om_queue
(
msg_queue
 *
mq
, *
msg_buf„r
, 
size
, 
timeout
)

115 
imask
;

116 
RX_TASK
 *
ªady
;

118 if((
mq
 =
NULL
Ë|| (
msg_buf„r
 =NULLË|| (
size
 !mq->
size_of_block
)) {

119 
	`¥_îr‹
( "read_from_queue: CheckÖarams\n");

120  
OS_ERR
;

123 
imask
 = 
	`rx_íãr_¸ôiˇl
();

125 if(
mq
->
ªad_èsk
) {

127 
	`rx_exô_¸ôiˇl
(
imask
);

128  
E_OS_BUSY
;

132 if((
mq
->
hód
 =mq->
èû
Ë&& (!(mq->
Êag
 & 
RX_QUEUE_FULL
))) {

134 if((
mq
->
Êag
 & 
RX_Q_BLOCK
)) {

137 if(!
timeout
) {

139 
mq
->
ªad_èsk
 = 
__rx_cuº_ru¬ög_èsk
;

140 
__rx_cuº_ru¬ög_èsk
->
°©e
 = 
RX_TASK_SUSPEND
;

141 
__rx_cuº_ru¬ög_èsk
->
îr
 = 
OS_OK
;

142 
	`__rx_ªmove_‰om_ªady_q
(
__rx_cuº_ru¬ög_èsk
);

143 
	`rx_exô_¸ôiˇl
(
imask
);

144 
	`rx_sched
();

145 
imask
 = 
	`rx_íãr_¸ôiˇl
();

146 if(
__rx_cuº_ru¬ög_èsk
->
îr
){

147 
	`rx_exô_¸ôiˇl
(
imask
);

148  
__rx_cuº_ru¬ög_èsk
->
îr
;

151 
timî_li°
 
timî
;

152 
mq
->
ªad_èsk
 = 
__rx_cuº_ru¬ög_èsk
;

154 
timeout
 =Åimeouà+ 
jiffõs
;

155 
	`rx_exô_¸ôiˇl
(
imask
);

157 
	`__rx_add_timî
(&
timî
, 
NULL
, 
timeout
, 
__rx_cuº_ru¬ög_èsk
);

159 
imask
 = 
	`rx_íãr_¸ôiˇl
();

160 if((
mq
->
hód
 =mq->
èû
Ë&& !(mq->
Êag
 & 
RX_QUEUE_FULL
)){

162 
	`rx_exô_¸ôiˇl
(
imask
);

163  
E_OS_TIMEOUT
;

167 
	`rx_exô_¸ôiˇl
(
imask
);

169  
E_OS_UNAVAIL
;

174 
	`mem˝y
(
msg_buf„r
, 
mq
->
èû
, mq->
size_of_block
);

177 if((
mq
->
èû
 + mq->
size_of_block
Ë> (mq->
°¨t
 + (mq->size_of_block * mq->
num_of_blocks
 )))

178 
mq
->
èû
 = mq->
°¨t
;

180 
mq
->
èû
 +mq->
size_of_block
;

182 if(
mq
->
hód
 =mq->
èû
) {

183 
mq
->
Êag
 &
RX_QUEUE_EMPTY
;

187 if(
mq
->
wrôe_èsk
) {

188 if(
mq
->
wrôe_èsk
->
timî
) {

189 
	`__rx_ªmove_‰om_timî_li°
(
mq
->
wrôe_èsk
->
timî
, &
__rx_a˘ive_timî_hód
);

190 
mq
->
wrôe_èsk
->
timî
 = 
NULL
;

193 
mq
->
wrôe_èsk
->
°©e
 = 
RX_TASK_READY
;

194 
mq
->
wrôe_èsk
->mq = 
NULL
;

195 
ªady
 = 
mq
->
wrôe_èsk
;

196 
mq
->
wrôe_èsk
 = mq->wrôe_èsk->
√xt
;

197 
	`__rx_add_to_ªady_q
(
ªady
);

200 
	`rx_exô_¸ôiˇl
(
imask
);

202  
OS_OK
;

203 
	}
}

211 
	$rx_wrôe_to_queue
(
msg_queue
 *
mq
, c⁄° *
msg_buf„r
, 
size
, 
timeout
)

213 
imask
;

214 
RX_TASK
 *
ride
;

216 if((
mq
 =
NULL
Ë|| (
msg_buf„r
 =NULLË|| (
size
 !mq->
size_of_block
)) {

217 
	`¥_îr‹
( "read_from_queue: CheckÖarams\n");

218  
OS_ERR
;

221 
imask
 = 
	`rx_íãr_¸ôiˇl
();

224 if(
mq
->
hód
 =mq->
èû
) {

226 if((
mq
->
Êag
 & 
RX_QUEUE_FULL
Ë&& !(mq->Êag & 
RX_Q_CYCLIC_FULL
)) {

227 if((
mq
->
Êag
 & 
RX_Q_BLOCK
)) {

229 
__rx_cuº_ru¬ög_èsk
->
°©e
 = 
RX_TASK_SUSPEND
;

230 
__rx_cuº_ru¬ög_èsk
->
îr
 = 
OS_OK
;

231 
	`__rx_ªmove_‰om_ªady_q
(
__rx_cuº_ru¬ög_èsk
);

232 if(!
mq
->
wrôe_èsk
) {

233 
mq
->
wrôe_èsk
 = 
__rx_cuº_ru¬ög_èsk
;

235 
ride
 = 
mq
->
wrôe_èsk
;

236 
ride
->
√xt
)

237 
ride
 =Ñide->
√xt
;

238 
ride
->
√xt
 = 
__rx_cuº_ru¬ög_èsk
;

241 if(!
timeout
){

243 
	`rx_exô_¸ôiˇl
(
imask
);

244 
	`rx_sched
();

245 
imask
 = 
	`rx_íãr_¸ôiˇl
();

246 if(
__rx_cuº_ru¬ög_èsk
->
îr
){

248 
	`rx_exô_¸ôiˇl
(
imask
);

249  
__rx_cuº_ru¬ög_èsk
->
îr
;

253 
timî_li°
 
timî
;

255 
timeout
 =Åimeouà+ 
jiffõs
;

256 
	`rx_exô_¸ôiˇl
(
imask
);

258 
	`__rx_add_timî
(&
timî
, 
NULL
, 
timeout
, 
__rx_cuº_ru¬ög_èsk
);

260 
imask
 = 
	`rx_íãr_¸ôiˇl
();

261 if((
mq
->
hód
 =mq->
èû
Ë&& (mq->
Êag
 & 
RX_QUEUE_FULL
)){

263 
	`rx_exô_¸ôiˇl
(
imask
);

264  
E_OS_TIMEOUT
;

269 
	`¥_îr‹
–"wrôe_to_queue: QueuêFULL!! %s\n", 
mq
->
«me
);

270 
	`rx_exô_¸ôiˇl
(
imask
);

271  
E_OS_UNAVAIL
;

278 
	`mem˝y
(
mq
->
hód
, 
msg_buf„r
, mq->
size_of_block
);

281 if((
mq
->
hód
 + mq->
size_of_block
Ë> (mq->
°¨t
 + (mq->size_of_block * mq->
num_of_blocks
 )))

282 
mq
->
hód
 = mq->
°¨t
;

284 
mq
->
hód
 +mq->
size_of_block
;

286 if(
mq
->
hód
 =mq->
èû
) {

287 
mq
->
Êag
 |
RX_QUEUE_FULL
;

291 if(
mq
->
ªad_èsk
) {

292 if(
mq
->
ªad_èsk
->
timî
) {

293 
	`__rx_ªmove_‰om_timî_li°
(
mq
->
ªad_èsk
->
timî
, &
__rx_a˘ive_timî_hód
);

294 
mq
->
ªad_èsk
->
timî
 = 
NULL
;

296 
mq
->
ªad_èsk
->
°©e
 = 
RX_TASK_READY
;

297 
mq
->
ªad_èsk
->mq = 
NULL
;

298 
	`__rx_add_to_ªady_q
(
mq
->
ªad_èsk
);

299 
mq
->
ªad_èsk
 = 
NULL
;

302 
	`rx_exô_¸ôiˇl
(
imask
);

304  
OS_OK
;

306 
	}
}

	@kernel/sched.c

18 
	~<RosX.h
>

20 
	$rx_sched
()

22 
a
 = 0;

24 if((
__rx_cuº_ru¬ög_èsk
 !
__rx_èsk_ªady_hód
)){

25 
__rx_√ed_ªsched
 = 0;

26 
a
 = 
	`rx_íãr_¸ôiˇl
();

27 
	`__sched__
(
__rx_cuº_ru¬ög_èsk
, 
__rx_èsk_ªady_hód
);

29 
	}
}

32 
	$__rx_swôch_to
()

34 
__rx_cuº_ru¬ög_èsk
 = 
__rx_èsk_ªady_hód
;

35 
__rx_cuº_ru¬ög_èsk
->
°©e
 = 
RX_TASK_RUNNING
;

36 #ifde‡
CONFIG_TIME_SLICE


37 if(
__rx_cuº_ru¬ög_èsk
->
time_¶i˚
 && !__rx_cuº_ru¬ög_èsk->
ticks
) {

38 
__rx_cuº_ru¬ög_èsk
->
ticks
 = __rx_cuº_ru¬ög_èsk->
time_¶i˚
;

41 
	`rx_exô_¸ôiˇl
(1);

43 
	}
}

	@kernel/semaphore.c

18 
	~<RosX.h
>

20 
__rx_£m_h™dÀr
(*
±r
);

24 
	$rx_¸óã_£m≠h‹e
(
£m≠h‹e
 *
£m
, 
vÆ
)

26 
imask
;

28 if(
vÆ
 <=0 ){

29 
	`¥_îr‹
( "invalid semaphore init value\n");

30  
OS_ERR
;

33 
imask
 = 
	`rx_íãr_¸ôiˇl
();

35 
£m
->
öô_vÆ
 = 
vÆ
;

36 
£m
->
cuº_vÆ
 = 
vÆ
;

37 
£m
->
èsk
 = 
NULL
;

39 
	`rx_exô_¸ôiˇl
(
imask
);

40  
OS_OK
;

41 
	}
}

44 
	$rx_dñëe_£m≠h‹e
(
£m≠h‹e
 *
p
)

46 
RX_TASK
 *
ªady
;

47 
imask
 = 
	`rx_íãr_¸ôiˇl
();

50 
p
->
èsk
){

51 
p
->
èsk
->
°©e
 = 
RX_TASK_READY
;

52 
p
->
èsk
->
£m
 = 
NULL
;

54 if(
p
->
èsk
->
timî
) {

55 
	`__rx_ªmove_‰om_timî_li°
(
p
->
èsk
->
timî
, &
__rx_a˘ive_timî_hód
);

56 
p
->
èsk
->
timî
 = 
NULL
;

58 
ªady
 = 
p
->
èsk
;

59 
p
->
èsk
 =Ö->èsk->
√xt
;

60 
	`__rx_add_to_ªady_q
(
ªady
);

63 
	`rx_exô_¸ôiˇl
(
imask
);

66 
	}
}

69 
	$rx_£m≠h‹e_po°
(
£m≠h‹e
 *
£m
)

71 
RX_TASK
 *
t
;

73 
imask
 = 
	`rx_íãr_¸ôiˇl
();

75 if(
£m
->
èsk
) {

76 
t
 = 
£m
->
èsk
;

77 
£m
->
èsk
 = sem->èsk->
√xt
;

78 
t
->
°©e
 = 
RX_TASK_READY
;

79 
t
->
£m
 = 
NULL
;

80 
	`__rx_add_to_ªady_q
(
t
);

81 
£m
->
cuº_vÆ
 ++;

84 
	`rx_exô_¸ôiˇl
(
imask
);

86  
OS_OK
;

87 
	}
}

90 
	$__rx_£m_h™dÀr
(*
±r
)

92 
RX_TASK
 *
Àad
;

93 
RX_TASK
 *
fﬁlow
;

94 
RX_TASK
 *
èsk
 = (RX_TASK *)
±r
;

95 
£m≠h‹e
 *
£m
 = 
èsk
->sem;

97 
	`__rx_óæy_¥ötk
("timî h™dÀ∏°¨à%s\n", 
èsk
->
«me
);

98 if(
èsk
->
£m
 =
NULL
) {

103 
Àad
 = 
fﬁlow
 = 
£m
->
èsk
;

104 if(
Àad
 =
èsk
){

105 
£m
->
èsk
 = sem->èsk->
√xt
;

108 
Àad
 !
èsk
) {

109 
fﬁlow
 = 
Àad
;

110 
Àad
 =Üód->
√xt
;

112 
fﬁlow
->
√xt
 = 
Àad
->next;

114 
£m
->
cuº_vÆ
 ++;

117 
èsk
->
timî
 = 
NULL
;

118 
èsk
->
timeout
 = 
E_OS_TIMEOUT
;

120 
èsk
->
°©e
 = 
RX_TASK_READY
;

121 
	`__rx_add_to_ªady_q
(
èsk
);

124 
èsk
->
£m
 = 
NULL
;

125 
	`__rx_óæy_¥ötk
("timî h™dÀ∏íd %s\n", 
èsk
->
«me
);

126 
	}
}

131 
	$__rx_£m_timeout
(
£m≠h‹e
 *
p
, 
timeout
)

133 
timî_li°
 
timî
;

135 
	`rx_öô_timî
(&
timî
, 
__rx_£m_h™dÀr
, 
__rx_cuº_ru¬ög_èsk
, 
timeout
);

136 
	`rx_°¨t_timî
(&
timî
);

137 
__rx_cuº_ru¬ög_èsk
->
timeout
 = 
__RX_TIMER_ON
;

138 
__rx_cuº_ru¬ög_èsk
->
timî
 = &timer;

139 
	`rx_su•íd_èsk
(
MYSELF
);

141 if(
E_OS_TIMEOUT
 =
__rx_cuº_ru¬ög_èsk
->
timeout
) {

142  
E_OS_TIMEOUT
;

144  
OS_OK
;

146 
	}
}

151 
	$rx_£m≠h‹e_waô
(
£m≠h‹e
 *
£m
, 
timeout
)

153 
RX_TASK
 *
ride
;

155 
imask
 = 
	`rx_íãr_¸ôiˇl
();

158 
£m
->
cuº_vÆ
 --;

159 if(
£m
->
cuº_vÆ
 >= 0) {

160 
	`rx_exô_¸ôiˇl
(
imask
);

161  
OS_OK
;

164 if(
timeout
 =
OS_NO_WAIT
) {

165 
£m
->
cuº_vÆ
 ++;

166 
	`rx_exô_¸ôiˇl
(
imask
);

167  
E_OS_UNAVAIL
;

170 
__rx_cuº_ru¬ög_èsk
->
°©e
 = 
RX_TASK_SUSPEND
;

171 
__rx_cuº_ru¬ög_èsk
->
£m
 = sem;

172 
__rx_cuº_ru¬ög_èsk
->
timeout
 = 
__RX_TIMER_OFF
;

173 
	`__rx_ªmove_‰om_ªady_q
(
__rx_cuº_ru¬ög_èsk
);

174 
__rx_cuº_ru¬ög_èsk
->
√xt
 = 
NULL
;

177 if(!(
£m
->
èsk
)) {

178 
£m
->
èsk
 = 
__rx_cuº_ru¬ög_èsk
;

180 
ride
 = 
£m
->
èsk
;

181 
ride
->
√xt
){

182 
ride
 =Ñide->
√xt
;

184 
ride
->
√xt
 = 
__rx_cuº_ru¬ög_èsk
;

187 if(
timeout
 > 0) {

188 
	`rx_exô_¸ôiˇl
(
imask
);

189  
	`__rx_£m_timeout
(
£m
, 
timeout
);

192 
	`rx_exô_¸ôiˇl
(
imask
);

193 
	`rx_sched
();

195 if(!
£m
){

196  
E_OS_UNAVAIL
;

198  
OS_OK
;

200 
	}
}

	@kernel/task.c

18 
	~<RosX.h
>

30 
	$rx_¸óã_èsk
(
RX_TASK
 *
tcb
, *
èsk_«me
, 
¥io
, *
°ack_±r
, 
°ack_size
, (*
func
)(), 
èsk_°©e
, 
time_¶i˚
)

32 
RX_TASK
 *
tmp
;

33 
imask
;

35 if(
	`°æí
(
èsk_«me
Ë> 
RX_TASK_STR_LEN
){

36 
	`¥_îr‹
–"%†%s\n", "TaskÇamêovîÊow", 
èsk_«me
);

37  
OS_ERR
;

40 
imask
 = 
	`rx_íãr_¸ôiˇl
();

42 #ifde‡
CONFIG_STACK_ALLOC_DYNAMIC


44 if(!
°ack_±r
) {

46 if(((*)
__rx_°ack_°¨t_±r
 - 
CONFIG_SYSTEM_STACK_SIZE
Ë> ((*)
__rx_cuº_°ack_±r
 - 
°ack_size
)){

47 
	`¥_∑nic
–"%†%s\n", "Sèck sizêovîÊow\n", 
èsk_«me
);

48 
	`rx_exô_¸ôiˇl
(
imask
);

49  
OS_ERR
;

51 
°ack_±r
 = 
__rx_cuº_°ack_±r
;

52 
__rx_cuº_°ack_±r
 = ((*)__rx_cuº_°ack_±∏- (
°ack_size
 + 4));

56 
	`°r˝y
((*)
tcb
->
«me
, 
èsk_«me
);

57 
tcb
->
cuº_°ack_±r
 = 
°ack_±r
;

58 
tcb
->
°ack_°¨t_±r
 = 
°ack_±r
;

59 i‡(
¥io
 > 
RX_TASK_LEAST_PRIO
)

60 
¥io
 = 
RX_TASK_LEAST_PRIO
;

62 
tcb
->
¥io
 =Örio;

63 #ifde‡
CONFIG_PRIO_INHERITANCE


64 
tcb
->
‹ig_¥io
 = 
¥io
;

66 
tcb
->
°ack_size
 = stack_size;

67 
tcb
->
func
 = func;

68 
tcb
->
°©e
 = 
èsk_°©e
;

69 
tcb
->
timeout
 = 
__RX_TIMER_OFF
;

70 #ifde‡
CONFIG_TIME_SLICE


71 
tcb
->
time_¶i˚
 =Åime_slice;

72 
tcb
->
ticks
 = 
time_¶i˚
;

73 
tcb
->
timî
 = 
NULL
;

75 
tcb
->
li°
 = 
NULL
;

77 
	`__rx_öô_tcb__
(
tcb
);

79 
tcb
->
ù
 =Åcb->
func
;

81 if(
èsk_°©e
 =
RX_TASK_READY
)

82 
	`__rx_add_to_ªady_q
(
tcb
);

85 if(!
__rx_èsk_li°_hód
){

86 
__rx_èsk_li°_hód
 = 
tcb
;

88 
tmp
 = 
__rx_èsk_li°_hód
;

89 
tmp
->
li°
)

90 
tmp
 =Åmp->
li°
;

92 
tmp
->
li°
 = 
tcb
;

95 
__rx_cuº_num_èsk
 ++;

97 
	`rx_exô_¸ôiˇl
(
imask
);

99  
OS_OK
;

100 
	}
}

103 
	$__rx_add_to_ªady_q
(
RX_TASK
 * 
√w
)

105 
RX_TASK
 *
°¨t
 = 
NULL
;

106 
RX_TASK
 *
¥ev
 = 
NULL
;

107 
imask
;

108 
¥io
 = 
√w
->prio;

110 if(!(
√w
->
°©e
 =
RX_TASK_READY
 ||Çew->°©ê=
RX_TASK_RUNNING
) ){

111 
	`¥_îr‹
–"__rx_add_to_ªady_q:Åask i†nŸ i¿ªady sèã %s, %d\n", 
√w
->
«me
,Çew->
°©e
);

112  
OS_ERR
;

115 
√w
->
√xt
 = 
NULL
;

117 
imask
 = 
	`rx_íãr_¸ôiˇl
();

118 if(!
__rx_èsk_ªady_hód
){

119 
__rx_èsk_ªady_hód
 = 
√w
;

120 
	`rx_exô_¸ôiˇl
(
imask
);

121  
OS_OK
;

124 
°¨t
 = 
__rx_èsk_ªady_hód
;

126 
°¨t
) {

129 if(
°¨t
->
¥io
 >=Örio) {

130 if(
°¨t
->
¥io
 ==Örio)

132 if(
°¨t
->
√xt
) {

133 if(
°¨t
->
√xt
->
¥io
 !=Örio){

134 
√w
->
√xt
 = 
°¨t
->next;

135 
°¨t
->
√xt
 = 
√w
;

136 
d⁄e
;

140 
√w
->
√xt
 = 
°¨t
->next;

141 
°¨t
->
√xt
 = 
√w
;

142 
d⁄e
;

145 
√w
->
√xt
 = 
°¨t
;

146 if(
°¨t
 =
__rx_èsk_ªady_hód
){

148 
__rx_èsk_ªady_hód
 = 
√w
;

149 
d⁄e
;

152 
¥ev
->
√xt
 = 
√w
;

153 
d⁄e
;

157 
¥ev
 = 
°¨t
;

158 
°¨t
 = sèπ->
√xt
;

162 
¥ev
->
√xt
 = 
√w
;

164 
d⁄e
:

165 if(
__rx_cuº_ru¬ög_èsk
 !
__rx_èsk_ªady_hód
){

166 
__rx_√ed_ªsched
 = 1;

168 
	`rx_exô_¸ôiˇl
(
imask
);

169  
OS_OK
;

170 
	}
}

173 
	$__rx_ªmove_‰om_ªady_q
(
RX_TASK
 * 
rmv
)

175 
RX_TASK
 *
°¨t
 = 
NULL
;

176 
RX_TASK
 *
¥ev
 = 
NULL
;

177 
imask
;

179 
imask
 = 
	`rx_íãr_¸ôiˇl
();

181 
°¨t
 = 
__rx_èsk_ªady_hód
;

183 
°¨t
 !
NULL
) {

186 if(
°¨t
 =
rmv
 ) {

188 if(
°¨t
 =
__rx_èsk_ªady_hód
){

190 
__rx_èsk_ªady_hód
 = 
°¨t
->
√xt
;

191 
rmv
->
√xt
 = 
NULL
;

192 
	`rx_exô_¸ôiˇl
(
imask
);

193  
OS_OK
;

196 
¥ev
->
√xt
 = 
°¨t
->next;

197 
rmv
->
√xt
 = 
NULL
;

198 
	`rx_exô_¸ôiˇl
(
imask
);

199  
OS_OK
;

202 
¥ev
 = 
°¨t
;

203 
°¨t
 = sèπ->
√xt
;

206 
¥ev
->
√xt
 = 
NULL
;

207 
rmv
->
√xt
 = 
NULL
;

208 
	`rx_exô_¸ôiˇl
(
imask
);

209  
OS_OK
;

210 
	}
}

215 
	$rx_ab‹t_èsk
(
RX_TASK
 *
tcb
)

217 if(
tcb
 =
__rx_cuº_ru¬ög_èsk
)

218  
OS_ERR
;

221 if(
tcb
->
°©e
 =
RX_TASK_READY
) {

222 
	`__rx_ªmove_‰om_ªady_q
(
tcb
);

225 
tcb
->
°©e
 = 
RX_TASK_ABORT
;

227  
OS_OK
;

228 
	}
}

232 
	$rx_com∂ëe_èsk
(
RX_TASK
 *
tcb
)

234 if(
tcb
 !
__rx_cuº_ru¬ög_èsk
)

235  
OS_ERR
;

237 
	`__rx_ªmove_‰om_ªady_q
(
tcb
);

238 
tcb
->
°©e
 = 
RX_TASK_COMPLETE
;

239 
	`rx_sched
();

240  
OS_OK
;

241 
	}
}

244 
	$rx_£t_èsk_¥io
(
RX_TASK
 *
tcb
, 
¥io
)

246 if((
¥io
 =
tcb
->¥io)||Åcb->¥iÿ=
RX_TASK_COMPLETE
 ||Åcb->¥iÿ=
RX_TASK_ABORT
)

249 
tcb
->
¥io
 =Örio;

250 if(
tcb
->
°©e
 =
RX_TASK_READY
) {

251 
	`__rx_ªmove_‰om_ªady_q
(
tcb
);

252 
	`__rx_add_to_ªady_q
(
tcb
);

254  
OS_OK
;

255 
	}
}

258 
	$rx_dñëe_èsk
(
RX_TASK
 *
tcb
)

260 
RX_TASK
 *
tmp
;

262 if((
tcb
->
°©e
 =
RX_TASK_SUSPEND
Ë|| (tcb->°©ê=
RX_TASK_READY
))

263  
OS_ERR
;

266 if(
tcb
 =
__rx_èsk_li°_hód
){

267 
__rx_èsk_li°_hód
 = 
tcb
->
li°
;

269 
tmp
 = 
__rx_èsk_li°_hód
;

270 
tmp
->
li°
) {

271 if(
tmp
->
li°
 =
tcb
)

273 
tmp
 =Åmp->
li°
;

275 
tmp
->
li°
 =Åmp->list->list;

278  
OS_OK
;

279 
	}
}

282 
	$rx_su•íd_èsk
(
RX_TASK
 *
tcb
)

284 if(!
tcb
) {

286 
	`__rx_ªmove_‰om_ªady_q
(
__rx_cuº_ru¬ög_èsk
);

287 
__rx_cuº_ru¬ög_èsk
->
°©e
 = 
RX_TASK_SUSPEND
;

288 
	`rx_sched
();

291 if(
tcb
->
°©e
 =
RX_TASK_READY
) {

292 
	`__rx_ªmove_‰om_ªady_q
(
tcb
);

293 
tcb
->
°©e
 = 
RX_TASK_SUSPEND
;

296  
OS_OK
;

297 
	}
}

299 
	$rx_ªsume_èsk
(
RX_TASK
 *
tcb
)

301 if(
tcb
->
°©e
 !
RX_TASK_SUSPEND
)

302  
OS_ERR
;

304 
tcb
->
°©e
 = 
RX_TASK_READY
;

305 
	`__rx_add_to_ªady_q
(
tcb
);

307  
OS_OK
;

308 
	}
}

	@kernel/terminal.c

18 
	~<RosX.h
>

22 
	$rx_ãrmöÆ_thªad
()

24 
	`¥_öfo
("*************************************************************** \n");

25 
	`¥_öfo
("*********** ROSE Ró»Timê›î©ög sy°emÉx≥rimíà%†***** \n", 
CONFIG_RELEASE_VERSION
);

26 
	`¥_öfo
("*************************************************************** \n");

29 #ifde‡
CONFIG_X86_SIMULATOR


30 
	`rx_su•íd_èsk
(
MYSELF
);

35 
	}
}

	@kernel/timer.c

18 
	~<RosX.h
>

20 
RX_DEFINE_EVENTGROUP
(
__rx_timî_evíts
);

22 
	$__rx_timî_tick_úq_h™dÀr
(
úq
, *
a
)

26 
jiffõs
 ++;

27 
	`rx_nŸify_evít
(&
__rx_timî_evíts
, 
RX_TIMER_EVENT_IRQ_EVENT
);

29 #ifde‡
CONFIG_TIME_SLICE


31 if(
__rx_cuº_ru¬ög_èsk
->
time_¶i˚
 > 0) {

32 
__rx_cuº_ru¬ög_èsk
->
ticks
--;

33 if(!
__rx_cuº_ru¬ög_èsk
->
ticks
) {

35 
	`__rx_ªmove_‰om_ªady_q
(
__rx_cuº_ru¬ög_èsk
);

36 
__rx_cuº_ru¬ög_èsk
->
°©e
 = 
RX_TASK_READY
;

37 
	`__rx_add_to_ªady_q
(
__rx_cuº_ru¬ög_èsk
);

38 if(
__rx_cuº_ru¬ög_èsk
 !
__rx_èsk_ªady_hód
) {

39 
__rx_√ed_ªsched
 = 1;

41 
__rx_cuº_ru¬ög_èsk
->
ticks
 = __rx_cuº_ru¬ög_èsk->
time_¶i˚
;

42 
__rx_cuº_ru¬ög_èsk
->
°©e
 = 
RX_TASK_RUNNING
;

48  
RX_IRQ_HANDLED
;

49 
	}
}

52 
	$rx_timî_thªad
()

54 
evít_Êag
 = 0;

55 
imask
;

56 
timî_li°
 *
°¨t
 = 
NULL
;

58 
tick
 = 0;

61 
	`¥_öfo
( "InÑosx_timer_thread\n");

64 if(
OS_OK
 !
	`rx_ªque°_úq
(
RX_TIMER0_INT
, &
__rx_timî_tick_úq_h™dÀr
, 0, "timer_irq", 0)) {

65 
	`¥_∑nic
("RX_TIMER0_INT0 irqálloc failed\n");

69 
evít_Êag
 = 
	`rx_waô_evít_group
(&
__rx_timî_evíts
, 
RX_TIMER_EVENT_IRQ_EVENT
);

72 
imask
 = 
	`rx_íãr_¸ôiˇl
();

73 i‡((
evít_Êag
 & 
RX_TIMER_EVENT_IRQ_EVENT
) == RX_TIMER_EVENT_IRQ_EVENT){

75 
	`rx_˛ór_evít_Êag
(
RX_TIMER_EVENT_IRQ_EVENT
);

76 
°¨t
 = 
__rx_a˘ive_timî_hód
;

77 
tick
 = 
jiffõs
;

79 
°¨t
 !
NULL
)

82 if(
°¨t
->
time_expúy
 <
tick
)

84 if(
°¨t
->
h™dÀr
 !
NULL
 ) {

86 
	`__rx_ªmove_‰om_timî_li°
(
°¨t
, &
__rx_a˘ive_timî_hód
);

87 
°¨t
->
Êag
 &
__RX_TIMER_DISABLED
;

89 
°¨t
->
	`h™dÀr
(°¨t->
¥iv
);

92 
°¨t
->
èsk
->
°©e
 = 
RX_TASK_READY
;

93 
	`__rx_add_to_ªady_q
(
°¨t
->
èsk
);

94 
°¨t
->
èsk
->
timî
 = 
NULL
;

95 
	`__rx_ªmove_‰om_timî_li°
(
°¨t
, &
__rx_a˘ive_timî_hód
);

97 
°¨t
 = 
__rx_a˘ive_timî_hód
;

104 
	`¥_îr‹
( "wrongÉventÇotification\n");

106 
	`rx_exô_¸ôiˇl
(
imask
);

108 
	}
}

110 
	$rx_ndñay
()

113 
	}
}

115 
	$rx_udñay
()

119 
	}
}

121 
	$rx_mdñay
()

125 
	}
}

128 
	$rx_m¶ìp
(
time
)

130 
timî_li°
 
timî
;

132 if(
time
 > 100000 ||Åime == 0) {

133 
	`¥_îr‹
("smrx_ssleep: checkÖarams\n");

134  
OS_ERR
;

138 
time
 =Åime/
CONFIG_HZ
;

139 if(!
time
)

140 
time
 = 1;

143 
	`__rx_add_timî
(&
timî
, 
NULL
, 
time
, 
__rx_cuº_ru¬ög_èsk
);

144  
OS_OK
;

145 
	}
}

148 
	$rx_s¶ìp
(
time
)

150 
timî_li°
 
timî
;

152 if(
time
 == 0 ) {

153 
	`¥_îr‹
("rx_ssleep: checkÖarams\n");

154  
OS_ERR
;

157 
time
 = (timê* 1000/
CONFIG_HZ
);

160 
	`__rx_add_timî
(&
timî
, 
NULL
, 
time
, 
__rx_cuº_ru¬ög_èsk
);

161  
OS_OK
;

162 
	}
}

167 
	$__rx_add_timî
(
timî_li°
 *
p
, (*
func
)(*), 
dñay
, 
RX_TASK
 *
tid
)

169 
p
->
dñay
 = delay;

170 
p
->
time_expúy
 = 0;

171 
p
->
èsk
 = 
tid
;

172 
p
->
h™dÀr
 = 
func
;

173 
p
->
√xt
 = 
NULL
;

174 
p
->
¥ev
 = 
NULL
;

176 if(
func
 =
NULL
){

177 
	`__rx_add_to_a˘ive_timî_li°
(
p
);

178 
tid
->
timî
 = 
p
;

180 
tid
->
°©e
 = 
RX_TASK_SUSPEND
;

181 
	`__rx_ªmove_‰om_ªady_q
(
tid
);

182 
	`rx_sched
();

184 
p
->
Êag
 &
__RX_TIMER_DISABLED
;

187  
OS_OK
;

188 
	}
}

191 
	$rx_öô_timî
(
timî_li°
 *
timî
, (*
timî_h™dÀr
)(*), *
¥iv
, 
ticks
)

193 if(
ticks
 == 0){

194 
	`¥_îr‹
( "rx_create_timer: CheckÖarams\n");

195  
OS_ERR
;

198 
timî
->
¥iv
 =Öriv;

199 
timî
->
Êag
 = 0;

201 
	`__rx_add_timî
(
timî
, 
timî_h™dÀr
, 
ticks
, 
__rx_cuº_ru¬ög_èsk
);

202  
OS_OK
;

203 
	}
}

205 
	$rx_¸óã_timî
(
timî_li°
 *
timî
, (*
timî_h™dÀr
)(*), *
¥iv
, 
ticks
)

207 if(
ticks
 == 0){

208 
	`¥_îr‹
( "rx_create_timer: CheckÖarams\n");

209  
OS_ERR
;

212 
timî
->
¥iv
 =Öriv;

213 
	`__rx_add_timî
(
timî
, 
timî_h™dÀr
, 
ticks
, 
__rx_cuº_ru¬ög_èsk
);

214  
OS_OK
;

215 
	}
}

217 
	$rx_dñëe_timî
(
timî_li°
 *
timî
)

219 if(
timî
->
Êag
 & 
__RX_TIMER_ENABLED
){

220 
	`¥_îr‹
–"dñëe_timî: fú° st›ÅhêtimîÅÿdñëê%s\n", 
timî
->
èsk
->
«me
);

223 
	}
}

226 
	$rx_mod_timî
(
timî_li°
 *
p
, 
dñay
)

228 if(!
p
) {

229 
	`¥_îr‹
( "rx_mod_timer:Åimer is NULL\n");

233 if(
p
->
Êag
 & 
__RX_TIMER_ENABLED
) {

234 
	`¥_îr‹
–"rx_mod_timî: Timî i†a˘ive; cÆ»rx_°›_timî TID %s\n", 
p
->
èsk
->
«me
);

238 if(
p
->
dñay
 == 0) {

239 
	`¥_öfo
( "rx_mod_timer: checkÖarams\n");

242 
p
->
dñay
 = (dñay * (1000/
CONFIG_HZ
));

243 
	`rx_°¨t_timî
(
p
);

244 
	}
}

248 
	$rx_°¨t_timî
(
timî_li°
 *
p
)

250 if(!
p
) {

251 
	`¥_îr‹
( "rx_start_timer:Åimer is NULL\n");

255 if(
p
->
Êag
 & 
__RX_TIMER_ENABLED
) {

256 
	`¥_îr‹
–"rx_°¨t_timî: TimîáÃódy sèπed TID %s\n", 
p
->
èsk
->
«me
);

258 
	`__rx_add_to_a˘ive_timî_li°
(
p
);

260 
	}
}

265 
	$rx_rx_°›_timî
(
timî_li°
 *
p
)

267 if(
p
->
Êag
 & 
__RX_TIMER_ENABLED
) {

268 
	`__rx_ªmove_‰om_timî_li°
(
p
, &
__rx_a˘ive_timî_hód
);

269 
p
->
Êag
 &
__RX_TIMER_DISABLED
;

271 
	`¥_îr‹
–"rx_°›_timî: TimîáÃódy st›≥d TID %s\n", 
p
->
èsk
->
«me
);

273 
	}
}

276 
	$__rx_add_to_a˘ive_timî_li°
(
timî_li°
 *
p
)

278 
timî_li°
 *
°¨t
 = 
NULL
;

279 
tick
;

280 
imask
;

282 
imask
 = 
	`rx_íãr_¸ôiˇl
();

284 
p
->
time_expúy
 =Ö->
dñay
 + 
jiffõs
;

285 
p
->
Êag
 |
__RX_TIMER_ENABLED
;

286 
tick
 = 
p
->
time_expúy
;

287 
p
->
¥ev
 = 
NULL
;

288 
p
->
√xt
 = 
NULL
;

291 if(!
__rx_a˘ive_timî_hód
) {

292 
__rx_a˘ive_timî_hód
 = 
p
;

293 
	`rx_exô_¸ôiˇl
(
imask
);

298 
°¨t
 = 
__rx_a˘ive_timî_hód
;

300 
°¨t
 !
NULL
) {

303 if(
°¨t
->
time_expúy
 >
tick
) {

304 if(
°¨t
 =
__rx_a˘ive_timî_hód
){

306 
__rx_a˘ive_timî_hód
->
¥ev
 = 
p
;

307 
p
->
√xt
 = 
__rx_a˘ive_timî_hód
;

308 
__rx_a˘ive_timî_hód
 = 
p
;

309 
	`rx_exô_¸ôiˇl
(
imask
);

313 
p
->
√xt
 = 
°¨t
;

314 
°¨t
->
¥ev
->
√xt
 = 
p
;

315 
p
->
¥ev
 = 
°¨t
->prev;

316 
°¨t
->
¥ev
 = 
p
;

317 
	`rx_exô_¸ôiˇl
(
imask
);

321 if(
°¨t
->
√xt
 =
NULL
)

323 
°¨t
 = sèπ->
√xt
;

327 
°¨t
->
√xt
 = 
p
;

328 
p
->
¥ev
 = 
°¨t
;

329 
	`rx_exô_¸ôiˇl
(
imask
);

330 
	}
}

333 
	$__rx_ªmove_‰om_timî_li°
(
timî_li°
 *
p
, timî_li° **
hód
)

335 
imask
;

337 
imask
 = 
	`rx_íãr_¸ôiˇl
();

339 if(*
hód
 =
NULL
){

340 
	`¥_îr‹
( "TimerÉrror __rx_remove_from_timer_list\n");

341 
	`rx_exô_¸ôiˇl
(
imask
);

345 if(*
hód
 =
p
) {

346 if(
p
->
√xt
 !
NULL
){

347 *
hód
 = 
p
->
√xt
;

348 (*
hód
)->
¥ev
 = 
NULL
;

350 *
hód
 = 
NULL
;

354 
p
->
¥ev
->
√xt
 =Ö->next;

355 
p
->
√xt
->
¥ev
 =Ö->prev;

358 
	`rx_exô_¸ôiˇl
(
imask
);

359 
	}
}

361 
ölöe
 
	$RX_MSECS_TO_TICKS
(
m
)

363 
__ªt
 = 0;

364 if(!
m
)

365  
__ªt
;

366 if((
m
Ë< (1000/
CONFIG_HZ
)) {

369  ((
m
Ë/ (1000/
CONFIG_HZ
));

371 
	}
}

	@kernel/wait.c

18 
	~<RosX.h
>

23 
waô_queue
 *
	g__rx_sys_waô_li°
 = 
NULL
;

24 
__rx_waô_timeout
(
timî_li°
 *
timî
);

25 
__rx_waô_h™dÀr
(*
±r
);

26 
rx_wake_èsk_ö_the_queue
(
waô_queue
 **
ride
);

28 
	$__rx_föish_waô
()

30 
ªt
 = 0;

32 
imask
 = 
	`rx_íãr_¸ôiˇl
();

35 if(
__rx_cuº_ru¬ög_èsk
->
timî
 !
NULL
) {

37 
	`__rx_ªmove_‰om_timî_li°
(
__rx_cuº_ru¬ög_èsk
->
timî
, &
__rx_a˘ive_timî_hód
);

38 
__rx_cuº_ru¬ög_èsk
->
timî
 = 
NULL
;

40 if(
__rx_cuº_ru¬ög_èsk
->
timeout
 =
E_OS_TIMEOUT
) {

41 
ªt
 = 
E_OS_TIMEOUT
;

43 
__rx_cuº_ru¬ög_èsk
->
timeout
 = 
__RX_TIMER_OFF
;

44 
__rx_cuº_ru¬ög_èsk
->
wq
 = 
NULL
;

46 
	`rx_exô_¸ôiˇl
(
imask
);

48  
ªt
;

50 
	}
}

52 
	$__rx_waô_timeout
(
timî_li°
 *
timî
)

54 i‡–
OS_OK
 !
	`rx_¸óã_timî
(
timî
, 
__rx_waô_h™dÀr
, 
__rx_cuº_ru¬ög_èsk
, __rx_cuº_ru¬ög_èsk->
timeout
)){

55 
	`¥_∑nic
("Timer creation failed\n");

57 
__rx_cuº_ru¬ög_èsk
->
timî
 =Åimer;

58 
	`rx_°¨t_timî
(
timî
);

59 
__rx_cuº_ru¬ög_èsk
->
timeout
 = 
__RX_TIMER_ON
;

60 
	}
}

63 
	$__rx_waô_h™dÀr
(*
±r
)

65 
RX_TASK
 *
t
 = (RX_TASK *)
±r
;

66 
t
->
timeout
 = 
E_OS_TIMEOUT
;

67 
t
->
timî
 = 
NULL
;

68 
	}
}

70 
	$__rx_add_to_waô_queue
(
waô_queue
 *
wq
, 
èsk_°©e
, 
timeout
, 
timî_li°
 *
timî
)

72 
waô_queue
 *
ride
;

73 
RX_TASK
 *
t
;

75 
imask
 = 
	`rx_íãr_¸ôiˇl
();

78 
__rx_cuº_ru¬ög_èsk
->
°©e
 = 
èsk_°©e
;

79 
__rx_cuº_ru¬ög_èsk
->
wq
 = wq;

80 
	`__rx_ªmove_‰om_ªady_q
(
__rx_cuº_ru¬ög_èsk
);

81 
__rx_cuº_ru¬ög_èsk
->
√xt
 = 
NULL
;

84 if(!(
wq
->
èsk
)) {

85 
wq
->
èsk
 = 
__rx_cuº_ru¬ög_èsk
;

87 
t
 = 
wq
->
èsk
;

88 
t
->
√xt
){

89 
t
 =Å->
√xt
;

91 
t
->
√xt
 = 
__rx_cuº_ru¬ög_èsk
;

95 if(!(
__rx_sys_waô_li°
)) {

97 
__rx_sys_waô_li°
 = 
wq
;

100 
ride
 = 
__rx_sys_waô_li°
;

101 
ride
->
√xt
){

102 if(
ride
 =
wq
){

105 
ride
 =Ñide->
√xt
;

107 if(!(
ride
 =
wq
)) {

108 
ride
->
√xt
 = 
wq
;

109 
wq
->
¥ev
 = 
ride
;

113 if((
timeout
 > 0Ë&& (
__rx_cuº_ru¬ög_èsk
->timeouà=
__RX_TIMER_OFF
)) {

114 
__rx_cuº_ru¬ög_èsk
->
timeout
 =Åimeout;

115 
	`__rx_waô_timeout
(
timî
);

118 
	`rx_exô_¸ôiˇl
(
imask
);

121 
	}
}

124 
	$rx_wakeup
(
waô_queue
 *
wq
)

126 
RX_TASK
 *
ªady
;

128 
imask
 = 
	`rx_íãr_¸ôiˇl
();

130 
RX_TASK
 *
t
 = 
wq
->
èsk
;

132 
t
) {

133 
t
->
°©e
 = 
RX_TASK_READY
;

134 
ªady
 = 
t
;

135 
t
 =Å->
√xt
;

136 
	`__rx_add_to_ªady_q
(
ªady
);

138 
wq
->
èsk
 = 
NULL
;

140 if(
wq
 =
__rx_sys_waô_li°
) {

141 
__rx_sys_waô_li°
 = 
wq
->
√xt
;

142 if(
__rx_sys_waô_li°
) {

143 
__rx_sys_waô_li°
->
¥ev
 = 
NULL
;

147 
wq
->
¥ev
->
√xt
 = wq->next;

148 
wq
->
√xt
->
¥ev
 = wq->prev;

149 
wq
->
¥ev
 = wq->
√xt
 = 
NULL
;

152 
	`rx_exô_¸ôiˇl
(
imask
);

155 
	}
}

158 
	$rx_wake_èsk_ö_the_queue
(
waô_queue
 **
ride
)

160 
RX_TASK
 *
ä
;

161 
RX_TASK
 *
ç
;

162 
RX_TASK
 *
ªady
;

163 
ä
 = 
ç
 = (*
ride
)->
èsk
;

165 
ä
){

166 if((
ä
->
°©e
 =
RX_TASK_INTERRUPTIBLE
) || \

167 (
ä
->
timeout
 =
E_OS_TIMEOUT
) ) {

169 
ä
->
°©e
 = 
RX_TASK_READY
;

170 
ªady
 = 
ä
;

171 if(
ä
 =(*
ride
)->
èsk
){

173 
ä
 =Ån->
√xt
;

174 (*
ride
)->
èsk
 = 
ä
;

175 
ç
 = 
ä
;

176 
	`__rx_add_to_ªady_q
(
ªady
);

179 
ä
 =Ån->
√xt
;

180 
ç
->
√xt
 = 
ä
;

181 
	`__rx_add_to_ªady_q
(
ªady
);

185 
ç
 = 
ä
;

186 
ä
 =Ån->
√xt
;

190 
	}
}

195 
	$__rx_ro£_wake
()

197 
waô_queue
 *
ride
;

198 
waô_queue
 *
wq
;

200 if(!
__rx_sys_waô_li°
)

203 
ride
 = 
__rx_sys_waô_li°
;

207 
ride
)

209 if(
ride
 =
__rx_sys_waô_li°
) {

210 
	`rx_wake_èsk_ö_the_queue
(&
ride
);

211 if(
ride
->
èsk
 =
NULL
) {

212 
wq
 = 
ride
;

214 
__rx_sys_waô_li°
 = 
ride
->
√xt
;

215 
wq
->
¥ev
 = wq->
√xt
 = 
NULL
;

216 if(
__rx_sys_waô_li°
){

217 
__rx_sys_waô_li°
->
¥ev
 = 
NULL
;

221 
	`rx_wake_èsk_ö_the_queue
(&
ride
);

222 if(
ride
->
èsk
 =
NULL
) {

223 
wq
 = 
ride
;

225 
ride
->
¥ev
->
√xt
 =Ñide->next;

226 
ride
->
√xt
->
¥ev
 =Ñide->prev;

227 
wq
->
¥ev
 = wq->
√xt
 = 
NULL
;

230 
ride
 =Ñide->
√xt
;

232 
	}
}

	@lib/charset.c

9 
	~<ch¨£t.h
>

16 
size_t
 
	$utf16_°æí
(c⁄° 
uöt16_t
 *
ö
)

18 
size_t
 
i
;

19 
i
 = 0; 
ö
[i]; i++);

20  
i
;

21 
	}
}

23 
size_t
 
	$utf16_°∫Àn
(c⁄° 
uöt16_t
 *
ö
, 
size_t
 
cou¡
)

25 
size_t
 
i
;

26 
i
 = 0; 
cou¡
-- && 
ö
[i]; i++);

27  
i
;

28 
	}
}

30 
uöt16_t
 *
	$utf16_°r˝y
(
uöt16_t
 *
de°
, c⁄° uöt16_à*
§c
)

32 
uöt16_t
 *
tmp
 = 
de°
;

34 (*
de°
++ = *
§c
++) != '\0')

36  
tmp
;

38 
	}
}

41 
uöt16_t
 *
	$utf16_°rdup
(c⁄° 
uöt16_t
 *
s
)

43 
uöt16_t
 *
√w
;

44 i‡(!
s
 || !(
√w
 = 
	`mÆloc
((
	`utf16_°æí
(s) + 1) * 2)))

45  
NULL
;

46 
	`utf16_°r˝y
(
√w
, 
s
);

47  
√w
;

48 
	}
}

52 
uöt8_t
 *
	$utf16_to_utf8
(
uöt8_t
 *
de°
, c⁄° 
uöt16_t
 *
§c
, 
size_t
 
size
)

54 
uöt32_t
 
code_high
 = 0;

56 
size
--) {

57 
uöt32_t
 
code
 = *
§c
++;

59 i‡(
code_high
) {

60 i‡(
code
 >= 0xDC00 && code <= 0xDFFF) {

62 
code
 = ((
code_high
 - 0xD800) << 10) + (code - 0xDC00) + 0x10000;

64 *
de°
++ = (
code
 >> 18) | 0xF0;

65 *
de°
++ = ((
code
 >> 12) & 0x3F) | 0x80;

66 *
de°
++ = ((
code
 >> 6) & 0x3F) | 0x80;

67 *
de°
++ = (
code
 & 0x3F) | 0x80;

70 *
de°
++ = '?';

72 
§c
--;

75 
code_high
 = 0;

77 i‡(
code
 <= 0x007F) {

78 *
de°
++ = 
code
;

79 } i‡(
code
 <= 0x07FF) {

80 *
de°
++ = (
code
 >> 6) | 0xC0;

81 *
de°
++ = (
code
 & 0x3F) | 0x80;

82 } i‡(
code
 >= 0xD800 && code <= 0xDBFF) {

83 
code_high
 = 
code
;

85 } i‡(
code
 >= 0xDC00 && code <= 0xDFFF) {

87 *
de°
++ = '?';

88 } i‡(
code
 < 0x10000) {

89 *
de°
++ = (
code
 >> 12) | 0xE0;

90 *
de°
++ = ((
code
 >> 6) & 0x3F) | 0x80;

91 *
de°
++ = (
code
 & 0x3F) | 0x80;

93 *
de°
++ = (
code
 >> 18) | 0xF0;

94 *
de°
++ = ((
code
 >> 12) & 0x3F) | 0x80;

95 *
de°
++ = ((
code
 >> 6) & 0x3F) | 0x80;

96 *
de°
++ = (
code
 & 0x3F) | 0x80;

101  
de°
;

102 
	}
}

104 
uöt16_t
 *
	$utf8_to_utf16
(
uöt16_t
 *
de°
, c⁄° 
uöt8_t
 *
§c
, 
size_t
 
size
)

106 
size
--) {

107 
exãnsi⁄_byãs
;

108 
uöt32_t
 
code
;

110 
exãnsi⁄_byãs
 = 0;

111 i‡(*
§c
 <= 0x7f) {

112 
code
 = *
§c
++;

114 i‡(!
code
)

115 
size
 = 0;

116 } i‡(*
§c
 <= 0xbf) {

118 
code
 = '?';

119 } i‡(*
§c
 <= 0xdf) {

120 
code
 = *
§c
++ & 0x1f;

121 
exãnsi⁄_byãs
 = 1;

122 } i‡(*
§c
 <= 0xef) {

123 
code
 = *
§c
++ & 0x0f;

124 
exãnsi⁄_byãs
 = 2;

125 } i‡(*
§c
 <= 0xf7) {

126 
code
 = *
§c
++ & 0x07;

127 
exãnsi⁄_byãs
 = 3;

130 
code
 = '?';

133 ; 
exãnsi⁄_byãs
 && 
size
; --size, --extension_bytes) {

134 i‡((*
§c
 & 0xc0) == 0x80) {

135 
code
 <<= 6;

136 
code
 |*
§c
++ & 0x3f;

139 
code
 = '?';

140 ++
§c
;

141 --
size
;

146 i‡(
code
 < 0x10000) {

147 *
de°
++ = 
code
;

153 *
de°
++ = (
code
 >> 10) + 0xd7c0;

154 *
de°
++ = (
code
 & 0x3ff) | 0xdc00;

157  
de°
;

158 
	}
}

	@lib/ctype.c

30 
	~<rosx/˘y≥.h
>

32 c⁄° 
	g_˘y≥
[] = {

33 
_C
,_C,_C,_C,_C,_C,_C,_C,

34 
_C
,_C|
_S
,_C|_S,_C|_S,_C|_S,_C|_S,_C,_C,

35 
_C
,_C,_C,_C,_C,_C,_C,_C,

36 
_C
,_C,_C,_C,_C,_C,_C,_C,

37 
_S
|
_SP
,
_P
,_P,_P,_P,_P,_P,_P,

38 
_P
,_P,_P,_P,_P,_P,_P,_P,

39 
_D
,_D,_D,_D,_D,_D,_D,_D,

40 
_D
,_D,
_P
,_P,_P,_P,_P,_P,

41 
_P
,
_U
|
_X
,_U|_X,_U|_X,_U|_X,_U|_X,_U|_X,_U,

42 
_U
,_U,_U,_U,_U,_U,_U,_U,

43 
_U
,_U,_U,_U,_U,_U,_U,_U,

44 
_U
,_U,_U,
_P
,_P,_P,_P,_P,

45 
_P
,
_L
|
_X
,_L|_X,_L|_X,_L|_X,_L|_X,_L|_X,_L,

46 
_L
,_L,_L,_L,_L,_L,_L,_L,

47 
_L
,_L,_L,_L,_L,_L,_L,_L,

48 
_L
,_L,_L,
_P
,_P,_P,_P,
_C
,

51 
_S
|
_SP
,
_P
,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,

52 
_P
,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,_P,

53 
_U
,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,_U,

54 
_U
,_U,_U,_U,_U,_U,_U,
_P
,_U,_U,_U,_U,_U,_U,_U,
_L
,

55 
_L
,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,_L,

56 
_L
,_L,_L,_L,_L,_L,_L,
_P
,_L,_L,_L,_L,_L,_L,_L,_L};

	@lib/div64.c

20 
	~<rosx/kî√l.h
>

21 
	~<rosx/m©h64.h
>

24 
	#EXPORT_SYMBOL
(
x
)

	)

27 #i‡
BITS_PER_LONG
 == 32

29 #i‚de‡
__div64_32


30 
uöt32_t
 
__©åibuã__
((
wók
)Ë
	$__div64_32
(
uöt64_t
 *
n
, 
uöt32_t
 
ba£
)

32 
uöt64_t
 
ªm
 = *
n
;

33 
uöt64_t
 
b
 = 
ba£
;

34 
uöt64_t
 
ªs
, 
d
 = 1;

35 
uöt32_t
 
high
 = 
ªm
 >> 32;

38 
ªs
 = 0;

39 i‡(
high
 >
ba£
) {

40 
high
 /
ba£
;

41 
ªs
 = (
uöt64_t
Ë
high
 << 32;

42 
ªm
 -(
uöt64_t
Ë(
high
*
ba£
) << 32;

45 (
öt64_t
)
b
 > 0 && b < 
ªm
) {

46 
b
 = b+b;

47 
d
 = d+d;

51 i‡(
ªm
 >
b
) {

52 
ªm
 -
b
;

53 
ªs
 +
d
;

55 
b
 >>= 1;

56 
d
 >>= 1;

57 } 
d
);

59 *
n
 = 
ªs
;

60  
ªm
;

61 
	}
}

62 
EXPORT_SYMBOL
(
__div64_32
);

65 #i‚de‡
div_s64_ªm


66 
s64
 
	$div_s64_ªm
(
s64
 
dividíd
, 
s32
 
divis‹
, s32 *
ªmaödî
)

68 
u64
 
quŸõ¡
;

70 i‡(
dividíd
 < 0) {

71 
quŸõ¡
 = 
	`div_u64_ªm
(-
dividíd
, 
	`abs
(
divis‹
), (
u32
 *)
ªmaödî
);

72 *
ªmaödî
 = -*remainder;

73 i‡(
divis‹
 > 0)

74 
quŸõ¡
 = -quotient;

76 
quŸõ¡
 = 
	`div_u64_ªm
(
dividíd
, 
	`abs
(
divis‹
), (
u32
 *)
ªmaödî
);

77 i‡(
divis‹
 < 0)

78 
quŸõ¡
 = -quotient;

80  
quŸõ¡
;

81 
	}
}

82 
EXPORT_SYMBOL
(
div_s64_ªm
);

96 #i‚de‡
div64_u64_ªm


97 
u64
 
	$div64_u64_ªm
(
u64
 
dividíd
, u64 
divis‹
, u64 *
ªmaödî
)

99 
u32
 
high
 = 
divis‹
 >> 32;

100 
u64
 
quŸ
;

102 i‡(
high
 == 0) {

103 
u32
 
ªm32
;

104 
quŸ
 = 
	`div_u64_ªm
(
dividíd
, 
divis‹
, &
ªm32
);

105 *
ªmaödî
 = 
ªm32
;

107 
n
 = 1 + 
	`Ês
(
high
);

108 
quŸ
 = 
	`div_u64
(
dividíd
 >> 
n
, 
divis‹
 >>Ç);

110 i‡(
quŸ
 != 0)

111 
quŸ
--;

113 *
ªmaödî
 = 
dividíd
 - 
quŸ
 * 
divis‹
;

114 i‡(*
ªmaödî
 >
divis‹
) {

115 
quŸ
++;

116 *
ªmaödî
 -
divis‹
;

120  
quŸ
;

121 
	}
}

122 
EXPORT_SYMBOL
(
div64_u64_ªm
);

136 #i‚de‡
div64_u64


137 
u64
 
	$div64_u64
(
u64
 
dividíd
, u64 
divis‹
)

139 
u32
 
high
 = 
divis‹
 >> 32;

140 
u64
 
quŸ
;

142 i‡(
high
 == 0) {

143 
quŸ
 = 
	`div_u64
(
dividíd
, 
divis‹
);

145 
n
 = 1 + 
	`Ês
(
high
);

146 
quŸ
 = 
	`div_u64
(
dividíd
 >> 
n
, 
divis‹
 >>Ç);

148 i‡(
quŸ
 != 0)

149 
quŸ
--;

150 i‡((
dividíd
 - 
quŸ
 * 
divis‹
) >= divisor)

151 
quŸ
++;

154  
quŸ
;

155 
	}
}

156 
EXPORT_SYMBOL
(
div64_u64
);

164 #i‚de‡
div64_s64


165 
s64
 
	$div64_s64
(
s64
 
dividíd
, s64 
divis‹
)

167 
s64
 
quŸ
, 
t
;

169 
quŸ
 = 
	`div64_u64
(
	`abs
(
dividíd
),ábs(
divis‹
));

170 
t
 = (
dividíd
 ^ 
divis‹
) >> 63;

172  (
quŸ
 ^ 
t
) -Å;

173 
	}
}

174 
EXPORT_SYMBOL
(
div64_s64
);

183 
u32
 
	$ôî_div_u64_ªm
(
u64
 
dividíd
, 
u32
 
divis‹
, u64 *
ªmaödî
)

185  
	`__ôî_div_u64_ªm
(
dividíd
, 
divis‹
, 
ªmaödî
);

186 
	}
}

187 
EXPORT_SYMBOL
(
ôî_div_u64_ªm
);

	@lib/rbtree.c

23 
	~<rosx/rbåì.h
>

25 
	$__rb_rŸ©e_À·
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

27 
rb_node
 *
right
 = 
node
->
rb_right
;

28 
rb_node
 *
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

30 i‡((
node
->
rb_right
 = 
right
->
rb_À·
))

31 
	`rb_£t_∑ª¡
(
right
->
rb_À·
, 
node
);

32 
right
->
rb_À·
 = 
node
;

34 
	`rb_£t_∑ª¡
(
right
, 
∑ª¡
);

36 i‡(
∑ª¡
)

38 i‡(
node
 =
∑ª¡
->
rb_À·
)

39 
∑ª¡
->
rb_À·
 = 
right
;

41 
∑ª¡
->
rb_right
 = 
right
;

44 
roŸ
->
rb_node
 = 
right
;

45 
	`rb_£t_∑ª¡
(
node
, 
right
);

46 
	}
}

48 
	$__rb_rŸ©e_right
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

50 
rb_node
 *
À·
 = 
node
->
rb_À·
;

51 
rb_node
 *
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

53 i‡((
node
->
rb_À·
 = 
À·
->
rb_right
))

54 
	`rb_£t_∑ª¡
(
À·
->
rb_right
, 
node
);

55 
À·
->
rb_right
 = 
node
;

57 
	`rb_£t_∑ª¡
(
À·
, 
∑ª¡
);

59 i‡(
∑ª¡
)

61 i‡(
node
 =
∑ª¡
->
rb_right
)

62 
∑ª¡
->
rb_right
 = 
À·
;

64 
∑ª¡
->
rb_À·
 = 
À·
;

67 
roŸ
->
rb_node
 = 
À·
;

68 
	`rb_£t_∑ª¡
(
node
, 
À·
);

69 
	}
}

71 
	$rb_ö£π_cﬁ‹
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

73 
rb_node
 *
∑ª¡
, *
g∑ª¡
;

75 (
∑ª¡
 = 
	`rb_∑ª¡
(
node
)Ë&& 
	`rb_is_ªd
(parent))

77 
g∑ª¡
 = 
	`rb_∑ª¡
(
∑ª¡
);

79 i‡(
∑ª¡
 =
g∑ª¡
->
rb_À·
)

82 
rb_node
 *
un˛e
 = 
g∑ª¡
->
rb_right
;

83 i‡(
un˛e
 && 
	`rb_is_ªd
(uncle))

85 
	`rb_£t_bœck
(
un˛e
);

86 
	`rb_£t_bœck
(
∑ª¡
);

87 
	`rb_£t_ªd
(
g∑ª¡
);

88 
node
 = 
g∑ª¡
;

93 i‡(
∑ª¡
->
rb_right
 =
node
)

95 
rb_node
 *
tmp
;

96 
	`__rb_rŸ©e_À·
(
∑ª¡
, 
roŸ
);

97 
tmp
 = 
∑ª¡
;

98 
∑ª¡
 = 
node
;

99 
node
 = 
tmp
;

102 
	`rb_£t_bœck
(
∑ª¡
);

103 
	`rb_£t_ªd
(
g∑ª¡
);

104 
	`__rb_rŸ©e_right
(
g∑ª¡
, 
roŸ
);

107 
rb_node
 *
un˛e
 = 
g∑ª¡
->
rb_À·
;

108 i‡(
un˛e
 && 
	`rb_is_ªd
(uncle))

110 
	`rb_£t_bœck
(
un˛e
);

111 
	`rb_£t_bœck
(
∑ª¡
);

112 
	`rb_£t_ªd
(
g∑ª¡
);

113 
node
 = 
g∑ª¡
;

118 i‡(
∑ª¡
->
rb_À·
 =
node
)

120 
rb_node
 *
tmp
;

121 
	`__rb_rŸ©e_right
(
∑ª¡
, 
roŸ
);

122 
tmp
 = 
∑ª¡
;

123 
∑ª¡
 = 
node
;

124 
node
 = 
tmp
;

127 
	`rb_£t_bœck
(
∑ª¡
);

128 
	`rb_£t_ªd
(
g∑ª¡
);

129 
	`__rb_rŸ©e_À·
(
g∑ª¡
, 
roŸ
);

133 
	`rb_£t_bœck
(
roŸ
->
rb_node
);

134 
	}
}

136 
	$__rb_îa£_cﬁ‹
(
rb_node
 *
node
, rb_nodê*
∑ª¡
,

137 
rb_roŸ
 *
roŸ
)

139 
rb_node
 *
Ÿhî
;

141 (!
node
 || 
	`rb_is_bœck
“ode)Ë&&Çodê!
roŸ
->
rb_node
)

143 i‡(
∑ª¡
->
rb_À·
 =
node
)

145 
Ÿhî
 = 
∑ª¡
->
rb_right
;

146 i‡(
	`rb_is_ªd
(
Ÿhî
))

148 
	`rb_£t_bœck
(
Ÿhî
);

149 
	`rb_£t_ªd
(
∑ª¡
);

150 
	`__rb_rŸ©e_À·
(
∑ª¡
, 
roŸ
);

151 
Ÿhî
 = 
∑ª¡
->
rb_right
;

153 i‡((!
Ÿhî
->
rb_À·
 || 
	`rb_is_bœck
(other->rb_left)) &&

154 (!
Ÿhî
->
rb_right
 || 
	`rb_is_bœck
(other->rb_right)))

156 
	`rb_£t_ªd
(
Ÿhî
);

157 
node
 = 
∑ª¡
;

158 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

162 i‡(!
Ÿhî
->
rb_right
 || 
	`rb_is_bœck
(other->rb_right))

164 
	`rb_£t_bœck
(
Ÿhî
->
rb_À·
);

165 
	`rb_£t_ªd
(
Ÿhî
);

166 
	`__rb_rŸ©e_right
(
Ÿhî
, 
roŸ
);

167 
Ÿhî
 = 
∑ª¡
->
rb_right
;

169 
	`rb_£t_cﬁ‹
(
Ÿhî
, 
	`rb_cﬁ‹
(
∑ª¡
));

170 
	`rb_£t_bœck
(
∑ª¡
);

171 
	`rb_£t_bœck
(
Ÿhî
->
rb_right
);

172 
	`__rb_rŸ©e_À·
(
∑ª¡
, 
roŸ
);

173 
node
 = 
roŸ
->
rb_node
;

179 
Ÿhî
 = 
∑ª¡
->
rb_À·
;

180 i‡(
	`rb_is_ªd
(
Ÿhî
))

182 
	`rb_£t_bœck
(
Ÿhî
);

183 
	`rb_£t_ªd
(
∑ª¡
);

184 
	`__rb_rŸ©e_right
(
∑ª¡
, 
roŸ
);

185 
Ÿhî
 = 
∑ª¡
->
rb_À·
;

187 i‡((!
Ÿhî
->
rb_À·
 || 
	`rb_is_bœck
(other->rb_left)) &&

188 (!
Ÿhî
->
rb_right
 || 
	`rb_is_bœck
(other->rb_right)))

190 
	`rb_£t_ªd
(
Ÿhî
);

191 
node
 = 
∑ª¡
;

192 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

196 i‡(!
Ÿhî
->
rb_À·
 || 
	`rb_is_bœck
(other->rb_left))

198 
	`rb_£t_bœck
(
Ÿhî
->
rb_right
);

199 
	`rb_£t_ªd
(
Ÿhî
);

200 
	`__rb_rŸ©e_À·
(
Ÿhî
, 
roŸ
);

201 
Ÿhî
 = 
∑ª¡
->
rb_À·
;

203 
	`rb_£t_cﬁ‹
(
Ÿhî
, 
	`rb_cﬁ‹
(
∑ª¡
));

204 
	`rb_£t_bœck
(
∑ª¡
);

205 
	`rb_£t_bœck
(
Ÿhî
->
rb_À·
);

206 
	`__rb_rŸ©e_right
(
∑ª¡
, 
roŸ
);

207 
node
 = 
roŸ
->
rb_node
;

212 i‡(
node
)

213 
	`rb_£t_bœck
(
node
);

214 
	}
}

216 
	$rb_îa£
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

218 
rb_node
 *
chûd
, *
∑ª¡
;

219 
cﬁ‹
;

221 i‡(!
node
->
rb_À·
)

222 
chûd
 = 
node
->
rb_right
;

223 i‡(!
node
->
rb_right
)

224 
chûd
 = 
node
->
rb_À·
;

227 
rb_node
 *
ﬁd
 = 
node
, *
À·
;

229 
node
 =Çode->
rb_right
;

230 (
À·
 = 
node
->
rb_À·
Ë!
NULL
)

231 
node
 = 
À·
;

233 i‡(
	`rb_∑ª¡
(
ﬁd
)) {

234 i‡(
	`rb_∑ª¡
(
ﬁd
)->
rb_À·
 == old)

235 
	`rb_∑ª¡
(
ﬁd
)->
rb_À·
 = 
node
;

237 
	`rb_∑ª¡
(
ﬁd
)->
rb_right
 = 
node
;

239 
roŸ
->
rb_node
 = 
node
;

241 
chûd
 = 
node
->
rb_right
;

242 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

243 
cﬁ‹
 = 
	`rb_cﬁ‹
(
node
);

245 i‡(
∑ª¡
 =
ﬁd
) {

246 
∑ª¡
 = 
node
;

248 i‡(
chûd
)

249 
	`rb_£t_∑ª¡
(
chûd
, 
∑ª¡
);

250 
∑ª¡
->
rb_À·
 = 
chûd
;

252 
node
->
rb_right
 = 
ﬁd
->rb_right;

253 
	`rb_£t_∑ª¡
(
ﬁd
->
rb_right
, 
node
);

256 
node
->
rb_∑ª¡_cﬁ‹
 = 
ﬁd
->rb_parent_color;

257 
node
->
rb_À·
 = 
ﬁd
->rb_left;

258 
	`rb_£t_∑ª¡
(
ﬁd
->
rb_À·
, 
node
);

260 
cﬁ‹
;

263 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

264 
cﬁ‹
 = 
	`rb_cﬁ‹
(
node
);

266 i‡(
chûd
)

267 
	`rb_£t_∑ª¡
(
chûd
, 
∑ª¡
);

268 i‡(
∑ª¡
)

270 i‡(
∑ª¡
->
rb_À·
 =
node
)

271 
∑ª¡
->
rb_À·
 = 
chûd
;

273 
∑ª¡
->
rb_right
 = 
chûd
;

276 
roŸ
->
rb_node
 = 
chûd
;

278 
cﬁ‹
:

279 i‡(
cﬁ‹
 =
RB_BLACK
)

280 
	`__rb_îa£_cﬁ‹
(
chûd
, 
∑ª¡
, 
roŸ
);

281 
	}
}

283 
	$rb_augmít_∑th
(
rb_node
 *
node
, 
rb_augmít_f
 
func
, *
d©a
)

285 
rb_node
 *
∑ª¡
;

287 
up
:

288 
	`func
(
node
, 
d©a
);

289 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

290 i‡(!
∑ª¡
)

293 i‡(
node
 =
∑ª¡
->
rb_À·
 &&Ö¨ít->
rb_right
)

294 
	`func
(
∑ª¡
->
rb_right
, 
d©a
);

295 i‡(
∑ª¡
->
rb_À·
)

296 
	`func
(
∑ª¡
->
rb_À·
, 
d©a
);

298 
node
 = 
∑ª¡
;

299 
up
;

300 
	}
}

306 
	$rb_augmít_ö£π
(
rb_node
 *
node
, 
rb_augmít_f
 
func
, *
d©a
)

308 i‡(
node
->
rb_À·
)

309 
node
 =Çode->
rb_À·
;

310 i‡(
node
->
rb_right
)

311 
node
 =Çode->
rb_right
;

313 
	`rb_augmít_∑th
(
node
, 
func
, 
d©a
);

314 
	}
}

320 
rb_node
 *
	$rb_augmít_îa£_begö
(
rb_node
 *
node
)

322 
rb_node
 *
dì≥°
;

324 i‡(!
node
->
rb_right
 && !node->
rb_À·
)

325 
dì≥°
 = 
	`rb_∑ª¡
(
node
);

326 i‡(!
node
->
rb_right
)

327 
dì≥°
 = 
node
->
rb_À·
;

328 i‡(!
node
->
rb_À·
)

329 
dì≥°
 = 
node
->
rb_right
;

331 
dì≥°
 = 
	`rb_√xt
(
node
);

332 i‡(
dì≥°
->
rb_right
)

333 
dì≥°
 = dì≥°->
rb_right
;

334 i‡(
	`rb_∑ª¡
(
dì≥°
Ë!
node
)

335 
dì≥°
 = 
	`rb_∑ª¡
(deepest);

338  
dì≥°
;

339 
	}
}

345 
	$rb_augmít_îa£_íd
(
rb_node
 *
node
, 
rb_augmít_f
 
func
, *
d©a
)

347 i‡(
node
)

348 
	`rb_augmít_∑th
(
node
, 
func
, 
d©a
);

349 
	}
}

354 
rb_node
 *
	$rb_fú°
(c⁄° 
rb_roŸ
 *
roŸ
)

356 
rb_node
 *
n
;

358 
n
 = 
roŸ
->
rb_node
;

359 i‡(!
n
)

360  
NULL
;

361 
n
->
rb_À·
)

362 
n
 =Ç->
rb_À·
;

363  
n
;

364 
	}
}

366 
rb_node
 *
	$rb_œ°
(c⁄° 
rb_roŸ
 *
roŸ
)

368 
rb_node
 *
n
;

370 
n
 = 
roŸ
->
rb_node
;

371 i‡(!
n
)

372  
NULL
;

373 
n
->
rb_right
)

374 
n
 =Ç->
rb_right
;

375  
n
;

376 
	}
}

378 
rb_node
 *
	$rb_√xt
(c⁄° 
rb_node
 *
node
)

380 
rb_node
 *
∑ª¡
;

382 i‡(
	`rb_∑ª¡
(
node
) ==Çode)

383  
NULL
;

387 i‡(
node
->
rb_right
) {

388 
node
 =Çode->
rb_right
;

389 
node
->
rb_À·
)

390 
node
Úode->
rb_À·
;

391  (
rb_node
 *)
node
;

400 (
∑ª¡
 = 
	`rb_∑ª¡
(
node
)Ë&&Çodê=∑ª¡->
rb_right
)

401 
node
 = 
∑ª¡
;

403  
∑ª¡
;

404 
	}
}

406 
rb_node
 *
	$rb_¥ev
(c⁄° 
rb_node
 *
node
)

408 
rb_node
 *
∑ª¡
;

410 i‡(
	`rb_∑ª¡
(
node
) ==Çode)

411  
NULL
;

415 i‡(
node
->
rb_À·
) {

416 
node
 =Çode->
rb_À·
;

417 
node
->
rb_right
)

418 
node
Úode->
rb_right
;

419  (
rb_node
 *)
node
;

424 (
∑ª¡
 = 
	`rb_∑ª¡
(
node
)Ë&&Çodê=∑ª¡->
rb_À·
)

425 
node
 = 
∑ª¡
;

427  
∑ª¡
;

428 
	}
}

430 
	$rb_ª∂a˚_node
(
rb_node
 *
vi˘im
, rb_nodê*
√w
,

431 
rb_roŸ
 *
roŸ
)

433 
rb_node
 *
∑ª¡
 = 
	`rb_∑ª¡
(
vi˘im
);

436 i‡(
∑ª¡
) {

437 i‡(
vi˘im
 =
∑ª¡
->
rb_À·
)

438 
∑ª¡
->
rb_À·
 = 
√w
;

440 
∑ª¡
->
rb_right
 = 
√w
;

442 
roŸ
->
rb_node
 = 
√w
;

444 i‡(
vi˘im
->
rb_À·
)

445 
	`rb_£t_∑ª¡
(
vi˘im
->
rb_À·
, 
√w
);

446 i‡(
vi˘im
->
rb_right
)

447 
	`rb_£t_∑ª¡
(
vi˘im
->
rb_right
, 
√w
);

450 *
√w
 = *
vi˘im
;

451 
	}
}

	@lib/string.c

18 
	~<rosx/ty≥s.h
>

19 
	~<rosx/°rög.h
>

20 
	~<rosx/˘y≥.h
>

22 * 
	g___°πok
;

24 #i‚de‡
__HAVE_ARCH_STRCPY


30 * 
	$°r˝y
(* 
de°
,c⁄° *
§c
)

32 *
tmp
 = 
de°
;

34 (*
de°
++ = *
§c
++) != '\0')

36  
tmp
;

37 
	}
}

40 #i‚de‡
__HAVE_ARCH_STRNCPY


51 * 
	$°∫˝y
(* 
de°
,c⁄° *
§c
,
size_t
 
cou¡
)

53 *
tmp
 = 
de°
;

55 
cou¡
-- && (*
de°
++ = *
§c
++) != '\0')

58  
tmp
;

59 
	}
}

62 #i‚de‡
__HAVE_ARCH_STRCAT


68 * 
	$°rˇt
(* 
de°
, c⁄° * 
§c
)

70 *
tmp
 = 
de°
;

72 *
de°
)

73 
de°
++;

74 (*
de°
++ = *
§c
++) != '\0')

77  
tmp
;

78 
	}
}

81 #i‚de‡
__HAVE_ARCH_STRNCAT


91 * 
	$°∫ˇt
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
)

93 *
tmp
 = 
de°
;

95 i‡(
cou¡
) {

96 *
de°
)

97 
de°
++;

98 (*
de°
++ = *
§c
++)) {

99 i‡(--
cou¡
 == 0) {

100 *
de°
 = '\0';

106  
tmp
;

107 
	}
}

110 #i‚de‡
__HAVE_ARCH_STRCMP


116 
	$°rcmp
(c⁄° * 
cs
,c⁄° * 
˘
)

118 sig√d 
__ªs
;

121 i‡((
__ªs
 = *
cs
 - *
˘
++) != 0 || !*cs++)

125  
__ªs
;

126 
	}
}

129 #i‚de‡
__HAVE_ARCH_STRNCMP


136 
	$°∫cmp
(c⁄° * 
cs
,c⁄° * 
˘
,
size_t
 
cou¡
)

138 sig√d 
__ªs
 = 0;

140 
cou¡
) {

141 i‡((
__ªs
 = *
cs
 - *
˘
++) != 0 || !*cs++)

143 
cou¡
--;

146  
__ªs
;

147 
	}
}

150 #i‚de‡
__HAVE_ARCH_STRCHR


156 * 
	$°rchr
(c⁄° * 
s
, 
c
)

158 ; *
s
 !(Ë
c
; ++s)

159 i‡(*
s
 == '\0')

160  
NULL
;

161  (*Ë
s
;

162 
	}
}

165 #i‚de‡
__HAVE_ARCH_STRRCHR


171 * 
	$°ºchr
(c⁄° * 
s
, 
c
)

173 c⁄° *
p
 = 
s
 + 
	`°æí
(s);

175 i‡(*
p
 =()
c
)

176  (*)
p
;

177 } --
p
 >
s
);

178  
NULL
;

179 
	}
}

189 *
	$skù_•a˚s
(c⁄° *
°r
)

191 
	`is•a˚
(*
°r
))

192 ++
°r
;

193  (*)
°r
;

194 
	}
}

204 *
	$°rim
(*
s
)

206 
size_t
 
size
;

207 *
íd
;

209 
s
 = 
	`skù_•a˚s
(s);

210 
size
 = 
	`°æí
(
s
);

211 i‡(!
size
)

212  
s
;

214 
íd
 = 
s
 + 
size
 - 1;

215 
íd
 >
s
 && 
	`is•a˚
(*end))

216 
íd
--;

217 *(
íd
 + 1) = '\0';

219  
s
;

220 
	}
}

221 #i‚de‡
__HAVE_ARCH_STRLEN


226 
size_t
 
	$°æí
(c⁄° * 
s
)

228 c⁄° *
sc
;

230 
sc
 = 
s
; *sc != '\0'; ++sc)

232  
sc
 - 
s
;

233 
	}
}

236 #i‚de‡
__HAVE_ARCH_STRNLEN


242 
size_t
 
	$°∫Àn
(c⁄° * 
s
, 
size_t
 
cou¡
)

244 c⁄° *
sc
;

246 
sc
 = 
s
; 
cou¡
-- && *sc != '\0'; ++sc)

248  
sc
 - 
s
;

249 
	}
}

252 #i‚de‡
__HAVE_ARCH_STRSPN


259 
size_t
 
	$°r•n
(c⁄° *
s
, c⁄° *
ac˚±
)

261 c⁄° *
p
;

262 c⁄° *
a
;

263 
size_t
 
cou¡
 = 0;

265 
p
 = 
s
; *p != '\0'; ++p) {

266 
a
 = 
ac˚±
; *a != '\0'; ++a) {

267 i‡(*
p
 =*
a
)

270 i‡(*
a
 == '\0')

271  
cou¡
;

272 ++
cou¡
;

275  
cou¡
;

276 
	}
}

279 #i‚de‡
__HAVE_ARCH_STRPBRK


285 * 
	$°Ωbrk
(c⁄° * 
cs
,c⁄° * 
˘
)

287 c⁄° *
sc1
,*
sc2
;

289  
sc1
 = 
cs
; *sc1 != '\0'; ++sc1) {

290  
sc2
 = 
˘
; *sc2 != '\0'; ++sc2) {

291 i‡(*
sc1
 =*
sc2
)

292  (*Ë
sc1
;

295  
NULL
;

296 
	}
}

299 #i‚de‡
__HAVE_ARCH_STRTOK


307 * 
	$°πok
(* 
s
,c⁄° * 
˘
)

309 *
sbegö
, *
£nd
;

311 
sbegö
 = 
s
 ? s : 
___°πok
;

312 i‡(!
sbegö
) {

313  
NULL
;

315 
sbegö
 +
	`°r•n
(sbegö,
˘
);

316 i‡(*
sbegö
 == '\0') {

317 
___°πok
 = 
NULL
;

318 –
NULL
 );

320 
£nd
 = 
	`°Ωbrk
–
sbegö
, 
˘
);

321 i‡(
£nd
 && *send != '\0')

322 *
£nd
++ = '\0';

323 
___°πok
 = 
£nd
;

324  (
sbegö
);

325 
	}
}

328 #i‚de‡
__HAVE_ARCH_STRSEP


340 * 
	$°r£p
(**
s
, c⁄° *
˘
)

342 *
sbegö
 = *
s
, *
íd
;

344 i‡(
sbegö
 =
NULL
)

345  
NULL
;

347 
íd
 = 
	`°Ωbrk
(
sbegö
, 
˘
);

348 i‡(
íd
)

349 *
íd
++ = '\0';

350 *
s
 = 
íd
;

352  
sbegö
;

353 
	}
}

356 #i‚de‡
__HAVE_ARCH_STRSWAB


364 *
	$°rswab
(c⁄° *
s
)

366 *
p
, *
q
;

368 i‡((
NULL
 =
s
) || ('\0' == *s)) {

369  (
NULL
);

372 
p
=(*)
s
, 
q
=p+1; (*p != '\0') && (*q != '\0');Ö+=2, q+=2) {

373 
tmp
;

375 
tmp
 = *
p
;

376 *
p
 = *
q
;

377 *
q
 = 
tmp
;

380  (*Ë
s
;

381 
	}
}

384 #i‚de‡
__HAVE_ARCH_MEMSET


393 * 
	$mem£t
(* 
s
,
c
,
size_t
 
cou¡
)

395 *
¶
 = (*Ë
s
;

396 
˛
 = 0;

397 *
s8
;

398 
i
;

401 i‡–(()
s
 & ((*
¶
) - 1)) == 0) {

402 
i
 = 0; i < (*
¶
); i++) {

403 
˛
 <<= 8;

404 
˛
 |
c
 & 0xff;

406 
cou¡
 >(*
¶
)) {

407 *
¶
++ = 
˛
;

408 
cou¡
 -(*
¶
);

412 
s8
 = (*)
¶
;

413 
cou¡
--)

414 *
s8
++ = 
c
;

416  
s
;

417 
	}
}

420 #i‚de‡
__HAVE_ARCH_MEMCPY


430 * 
	$mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
)

432 *
dl
 = (*)
de°
, *
¶
 = (*)
§c
;

433 *
d8
, *
s8
;

435 i‡(
§c
 =
de°
)

436  
de°
;

439 i‡–((()
de°
 | ()
§c
Ë& ((*
dl
) - 1)) == 0) {

440 
cou¡
 >(*
dl
)) {

441 *
dl
++ = *
¶
++;

442 
cou¡
 -(*
dl
);

446 
d8
 = (*)
dl
;

447 
s8
 = (*)
¶
;

448 
cou¡
--)

449 *
d8
++ = *
s8
++;

451  
de°
;

452 
	}
}

455 #i‚de‡
__HAVE_ARCH_MEMMOVE


464 * 
	$memmove
(* 
de°
,c⁄° *
§c
,
size_t
 
cou¡
)

466 *
tmp
, *
s
;

468 i‡(
§c
 =
de°
)

469  
de°
;

471 i‡(
de°
 <
§c
) {

472 
tmp
 = (*Ë
de°
;

473 
s
 = (*Ë
§c
;

474 
cou¡
--)

475 *
tmp
++ = *
s
++;

478 
tmp
 = (*Ë
de°
 + 
cou¡
;

479 
s
 = (*Ë
§c
 + 
cou¡
;

480 
cou¡
--)

481 *--
tmp
 = *--
s
;

484  
de°
;

485 
	}
}

488 #i‚de‡
__HAVE_ARCH_MEMCMP


495 
	$memcmp
(c⁄° * 
cs
,c⁄° * 
˘
,
size_t
 
cou¡
)

497 c⁄° *
su1
, *
su2
;

498 
ªs
 = 0;

500  
su1
 = 
cs
, 
su2
 = 
˘
; 0 < 
cou¡
; ++su1, ++su2, count--)

501 i‡((
ªs
 = *
su1
 - *
su2
) != 0)

503  
ªs
;

504 
	}
}

507 #i‚de‡
__HAVE_ARCH_MEMSCAN


517 * 
	$memsˇn
(* 
addr
, 
c
, 
size_t
 
size
)

519 * 
p
 = (*Ë
addr
;

521 
size
) {

522 i‡(*
p
 =
c
)

523  (*Ë
p
;

524 
p
++;

525 
size
--;

527  (*Ë
p
;

528 
	}
}

531 #i‚de‡
__HAVE_ARCH_STRSTR


537 * 
	$°r°r
(c⁄° * 
s1
,c⁄° * 
s2
)

539 
l1
, 
l2
;

541 
l2
 = 
	`°æí
(
s2
);

542 i‡(!
l2
)

543  (*Ë
s1
;

544 
l1
 = 
	`°æí
(
s1
);

545 
l1
 >
l2
) {

546 
l1
--;

547 i‡(!
	`memcmp
(
s1
,
s2
,
l2
))

548  (*Ë
s1
;

549 
s1
++;

551  
NULL
;

552 
	}
}

555 #i‚de‡
__HAVE_ARCH_MEMCHR


565 *
	$memchr
(c⁄° *
s
, 
c
, 
size_t
 
n
)

567 c⁄° *
p
 = 
s
;

568 
n
-- != 0) {

569 i‡(()
c
 =*
p
++) {

570  (*)(
p
-1);

573  
NULL
;

574 
	}
}

	@lib/strto.c

12 
	~<comm⁄.h
>

13 
	~<î∫o.h
>

14 
	~<rosx/˘y≥.h
>

17 c⁄° *
	$_∑r£_öãgî_fixup_ødix
(c⁄° *
s
, *
ba£
)

19 i‡(*
ba£
 == 0) {

20 i‡(
s
[0] == '0') {

21 i‡(
	`tﬁowî
(
s
[1]Ë='x' && 
	`isxdigô
(s[2]))

22 *
ba£
 = 16;

24 *
ba£
 = 8;

26 *
ba£
 = 10;

28 i‡(*
ba£
 =16 && 
s
[0] ='0' && 
	`tﬁowî
(s[1]) == 'x')

29 
s
 += 2;

30  
s
;

31 
	}
}

33 
	$sim∂e_°πoul
(c⁄° *
˝
, **
ídp
,

34 
ba£
)

36 
ªsu…
 = 0;

37 
vÆue
;

39 
˝
 = 
	`_∑r£_öãgî_fixup_ødix
(˝, &
ba£
);

41 
	`isxdigô
(*
˝
Ë&& (
vÆue
 = 
	`isdigô
(*˝Ë? *˝-'0' : (
	`i¶owî
(*cp)

42 ? 
	`touµî
(*
˝
Ë: *˝)-'A'+10Ë< 
ba£
) {

43 
ªsu…
 =Ñesu…*
ba£
 + 
vÆue
;

44 
˝
++;

47 i‡(
ídp
)

48 *
ídp
 = (*)
˝
;

50  
ªsu…
;

51 
	}
}

53 
	$°ri˘_°πoul
(c⁄° *
˝
, 
ba£
, *
ªs
)

55 *
èû
;

56 
vÆ
;

57 
size_t
 
Àn
;

59 *
ªs
 = 0;

60 
Àn
 = 
	`°æí
(
˝
);

61 i‡(
Àn
 == 0)

62  -
EINVAL
;

64 
vÆ
 = 
	`sim∂e_°πoul
(
˝
, &
èû
, 
ba£
);

65 i‡(
èû
 =
˝
)

66  -
EINVAL
;

68 i‡((*
èû
 == '\0') ||

69 ((
Àn
 =(
size_t
)(
èû
 - 
˝
) + 1) && (*tail == '\n'))) {

70 *
ªs
 = 
vÆ
;

74  -
EINVAL
;

75 
	}
}

77 
	$sim∂e_°πﬁ
(c⁄° *
˝
, **
ídp
, 
ba£
)

79 i‡(*
˝
 == '-')

80  -
	`sim∂e_°πoul
(
˝
 + 1, 
ídp
, 
ba£
);

82  
	`sim∂e_°πoul
(
˝
, 
ídp
, 
ba£
);

83 
	}
}

85 
	$u°πoul
(c⁄° *
˝
, **
ídp
, 
ba£
)

87 
ªsu…
 = 
	`sim∂e_°πoul
(
˝
, 
ídp
, 
ba£
);

88 **
ídp
) {

90 
ªsu…
 *= 1024;

93 
ªsu…
 *= 1024;

97 
ªsu…
 *= 1024;

98 i‡((*
ídp
)[1] == 'i') {

99 i‡((*
ídp
)[2] == 'B')

100 (*
ídp
) += 3;

102 (*
ídp
) += 2;

105  
ªsu…
;

106 
	}
}

108 
	$u°πouŒ
(c⁄° *
˝
, **
ídp
, 
ba£
)

110 
ªsu…
 = 
	`sim∂e_°πouŒ
(
˝
, 
ídp
, 
ba£
);

111 **
ídp
) {

113 
ªsu…
 *= 1024;

116 
ªsu…
 *= 1024;

120 
ªsu…
 *= 1024;

121 i‡((*
ídp
)[1] == 'i') {

122 i‡((*
ídp
)[2] == 'B')

123 (*
ídp
) += 3;

125 (*
ídp
) += 2;

128  
ªsu…
;

129 
	}
}

131 
	$sim∂e_°πouŒ
(c⁄° *
˝
, **
ídp
,

132 
ba£
)

134 
ªsu…
 = 0, 
vÆue
;

136 
˝
 = 
	`_∑r£_öãgî_fixup_ødix
(˝, &
ba£
);

138 
	`isxdigô
(*
˝
Ë&& (
vÆue
 = 
	`isdigô
(*cp) ? *cp - '0'

139 : (
	`i¶owî
(*
˝
Ë? 
	`touµî
(*˝Ë: *˝Ë- 'A' + 10Ë< 
ba£
) {

140 
ªsu…
 =Ñesu… * 
ba£
 + 
vÆue
;

141 
˝
++;

144 i‡(
ídp
)

145 *
ídp
 = (*Ë
˝
;

147  
ªsu…
;

148 
	}
}

150 
	$åaûög_°πﬁn
(c⁄° *
°r
, c⁄° *
íd
)

152 c⁄° *
p
;

154 i‡(!
íd
)

155 
íd
 = 
°r
 + 
	`°æí
(str);

156 i‡(
	`isdigô
(
íd
[-1])) {

157 
p
 = 
íd
 - 1;Ö > 
°r
;Ö--) {

158 i‡(!
	`isdigô
(*
p
))

159  
	`sim∂e_°πoul
(
p
 + 1, 
NULL
, 10);

164 
	}
}

166 
	$åaûög_°πﬁ
(c⁄° *
°r
)

168  
	`åaûög_°πﬁn
(
°r
, 
NULL
);

169 
	}
}

	@lib/vsprintf.c

14 
	~<comm⁄.h
>

15 
	~<ch¨£t.h
>

16 
	~<°d¨g.h
>

17 
	~<rosx/ty≥s.h
>

18 
	~<rosx/°rög.h
>

19 
	~<rosx/˘y≥.h
>

20 
	~<div64.h
>

22 
	#noölöe
 
	`__©åibuã__
((
noölöe
))

	)

23 #i‚de‡
NULL


24 
	#NULL
 0

	)

28 
	#is_digô
(
c
Ë((cË>'0' && (cË<'9')

	)

30 
	$skù_©oi
(c⁄° **
s
)

32 
i
 = 0;

34 
	`is_digô
(**
s
))

35 
i
 = i * 10 + *((*
s
)++) - '0';

37  
i
;

38 
	}
}

50 *
	$put_dec_åunc
(*
buf
, 
q
)

52 
d3
, 
d2
, 
d1
, 
d0
;

53 
d1
 = (
q
>>4) & 0xf;

54 
d2
 = (
q
>>8) & 0xf;

55 
d3
 = (
q
>>12);

57 
d0
 = 6*(
d3
 + 
d2
 + 
d1
Ë+ (
q
 & 0xf);

58 
q
 = (
d0
 * 0xcd) >> 11;

59 
d0
 = d0 - 10*
q
;

60 *
buf
++ = 
d0
 + '0';

61 
d1
 = 
q
 + 9*
d3
 + 5*
d2
 + d1;

62 i‡(
d1
 != 0) {

63 
q
 = (
d1
 * 0xcd) >> 11;

64 
d1
 = d1 - 10*
q
;

65 *
buf
++ = 
d1
 + '0';

67 
d2
 = 
q
 + 2*d2;

68 i‡((
d2
 !0Ë|| (
d3
 != 0)) {

69 
q
 = (
d2
 * 0xd) >> 7;

70 
d2
 = d2 - 10*
q
;

71 *
buf
++ = 
d2
 + '0';

73 
d3
 = 
q
 + 4*d3;

74 i‡(
d3
 != 0) {

75 
q
 = (
d3
 * 0xcd) >> 11;

76 
d3
 = d3 - 10*
q
;

77 *
buf
++ = 
d3
 + '0';

78 i‡(
q
 != 0)

79 *
buf
++ = 
q
 + '0';

83  
buf
;

84 
	}
}

86 *
	$put_dec_fuŒ
(*
buf
, 
q
)

90 
d3
, 
d2
, 
d1
, 
d0
;

91 
d1
 = (
q
>>4) & 0xf;

92 
d2
 = (
q
>>8) & 0xf;

93 
d3
 = (
q
>>12);

105 
d0
 = 6*(
d3
 + 
d2
 + 
d1
Ë+ (
q
 & 0xf);

106 
q
 = (
d0
 * 0xcd) >> 11;

107 
d0
 = d0 - 10*
q
;

108 *
buf
++ = 
d0
 + '0';

109 
d1
 = 
q
 + 9*
d3
 + 5*
d2
 + d1;

110 
q
 = (
d1
 * 0xcd) >> 11;

111 
d1
 = d1 - 10*
q
;

112 *
buf
++ = 
d1
 + '0';

114 
d2
 = 
q
 + 2*d2;

115 
q
 = (
d2
 * 0xd) >> 7;

116 
d2
 = d2 - 10*
q
;

117 *
buf
++ = 
d2
 + '0';

119 
d3
 = 
q
 + 4*d3;

120 
q
 = (
d3
 * 0xcd) >> 11;

122 
d3
 = d3 - 10*
q
;

123 *
buf
++ = 
d3
 + '0';

124 *
buf
++ = 
q
 + '0';

125  
buf
;

126 
	}
}

129 
noölöe
 *
	$put_dec
(*
buf
, 
u64
 
num
)

132 
ªm
;

133 i‡(
num
 < 100000)

134  
	`put_dec_åunc
(
buf
, 
num
);

135 
ªm
 = 
	`do_div
(
num
, 100000);

136 
buf
 = 
	`put_dec_fuŒ
(buf, 
ªm
);

138 
	}
}

140 
	#ZEROPAD
 1

	)

141 
	#SIGN
 2

	)

142 
	#PLUS
 4

	)

143 
	#SPACE
 8

	)

144 
	#LEFT
 16

	)

145 
	#SMALL
 32

	)

146 
	#SPECIAL
 64

	)

152 
	#ADDCH
(
°r
, 
ch
) do { \

153 i‡((
°r
Ë< 
íd
) \

154 *(
°r
Ë(
ch
); \

155 ++
°r
; \

156 } 0)

	)

158 *
	$numbî
(*
buf
, *
íd
, 
u64
 
num
,

159 
ba£
, 
size
, 
¥ecisi⁄
, 
ty≥
)

162 c⁄° 
digôs
[16] = "0123456789ABCDEF";

164 
tmp
[66];

165 
sign
;

166 
loˇ£
;

167 
√ed_pfx
 = ((
ty≥
 & 
SPECIAL
Ë&& 
ba£
 != 10);

168 
i
;

172 
loˇ£
 = (
ty≥
 & 
SMALL
);

173 i‡(
ty≥
 & 
LEFT
)

174 
ty≥
 &~
ZEROPAD
;

175 
sign
 = 0;

176 i‡(
ty≥
 & 
SIGN
) {

177 i‡((
s64
Ë
num
 < 0) {

178 
sign
 = '-';

179 
num
 = -(
s64
)Çum;

180 
size
--;

181 } i‡(
ty≥
 & 
PLUS
) {

182 
sign
 = '+';

183 
size
--;

184 } i‡(
ty≥
 & 
SPACE
) {

185 
sign
 = ' ';

186 
size
--;

189 i‡(
√ed_pfx
) {

190 
size
--;

191 i‡(
ba£
 == 16)

192 
size
--;

196 
i
 = 0;

197 i‡(
num
 == 0)

198 
tmp
[
i
++] = '0';

204 i‡(
ba£
 != 10) {

205 
mask
 = 
ba£
 - 1;

206 
shi·
 = 3;

208 i‡(
ba£
 == 16)

209 
shi·
 = 4;

212 
tmp
[
i
++] = (
digôs
[(()
num
Ë& 
mask
]

213 | 
loˇ£
);

214 
num
 >>
shi·
;

215 } 
num
);

217 
i
 = 
	`put_dec
(
tmp
, 
num
) -Åmp;

221 i‡(
i
 > 
¥ecisi⁄
)

222 
¥ecisi⁄
 = 
i
;

224 
size
 -
¥ecisi⁄
;

225 i‡(!(
ty≥
 & (
ZEROPAD
 + 
LEFT
))) {

226 --
size
 >= 0)

227 
	`ADDCH
(
buf
, ' ');

230 i‡(
sign
)

231 
	`ADDCH
(
buf
, 
sign
);

233 i‡(
√ed_pfx
) {

234 
	`ADDCH
(
buf
, '0');

235 i‡(
ba£
 == 16)

236 
	`ADDCH
(
buf
, 'X' | 
loˇ£
);

239 i‡(!(
ty≥
 & 
LEFT
)) {

240 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ';

242 --
size
 >= 0)

243 
	`ADDCH
(
buf
, 
c
);

246 
i
 <--
¥ecisi⁄
)

247 
	`ADDCH
(
buf
, '0');

249 --
i
 >= 0)

250 
	`ADDCH
(
buf
, 
tmp
[
i
]);

252 --
size
 >= 0)

253 
	`ADDCH
(
buf
, ' ');

254  
buf
;

255 
	}
}

257 *
	$°rög
(*
buf
, *
íd
, *
s
, 
fõld_width
,

258 
¥ecisi⁄
, 
Êags
)

260 
Àn
, 
i
;

262 i‡(
s
 =
NULL
)

263 
s
 = "<NULL>";

265 
Àn
 = 
	`°∫Àn
(
s
, 
¥ecisi⁄
);

267 i‡(!(
Êags
 & 
LEFT
))

268 
Àn
 < 
fõld_width
--)

269 
	`ADDCH
(
buf
, ' ');

270 
i
 = 0; i < 
Àn
; ++i)

271 
	`ADDCH
(
buf
, *
s
++);

272 
Àn
 < 
fõld_width
--)

273 
	`ADDCH
(
buf
, ' ');

274  
buf
;

275 
	}
}

277 *
	$°rög16
(*
buf
, *
íd
, 
u16
 *
s
, 
fõld_width
,

278 
¥ecisi⁄
, 
Êags
)

280 
u16
 *
°r
 = 
s
 ? s : (u16 *)
L
"<NULL>";

281 
utf16_Àn
 = 
	`utf16_°∫Àn
(
°r
, 
¥ecisi⁄
);

282 
u8
 
utf8
[
utf16_Àn
 * 
MAX_UTF8_PER_UTF16
];

283 
utf8_Àn
, 
i
;

285 
utf8_Àn
 = 
	`utf16_to_utf8
(
utf8
, 
°r
, 
utf16_Àn
) - utf8;

287 i‡(!(
Êags
 & 
LEFT
))

288 
utf8_Àn
 < 
fõld_width
--)

289 
	`ADDCH
(
buf
, ' ');

290 
i
 = 0; i < 
utf8_Àn
; ++i)

291 
	`ADDCH
(
buf
, 
utf8
[
i
]);

292 
utf8_Àn
 < 
fõld_width
--)

293 
	`ADDCH
(
buf
, ' ');

294  
buf
;

295 
	}
}

297 
	$v¢¥ötf_öã∫Æ
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
,

298 
va_li°
 
¨gs
)

300 
u64
 
num
;

301 
ba£
;

302 *
°r
;

304 
Êags
;

306 
fõld_width
;

307 
¥ecisi⁄
;

309 
quÆifõr
;

313 *
íd
 = 
buf
 + 
size
;

316 i‡(
íd
 < 
buf
) {

317 
íd
 = ((*)-1);

318 
size
 = 
íd
 - 
buf
;

320 
°r
 = 
buf
;

322 ; *
fmt
 ; ++fmt) {

323 i‡(*
fmt
 != '%') {

324 
	`ADDCH
(
°r
, *
fmt
);

329 
Êags
 = 0;

330 
ª≥©
:

331 ++
fmt
;

332 *
fmt
) {

334 
Êags
 |
LEFT
;

335 
ª≥©
;

337 
Êags
 |
PLUS
;

338 
ª≥©
;

340 
Êags
 |
SPACE
;

341 
ª≥©
;

343 
Êags
 |
SPECIAL
;

344 
ª≥©
;

346 
Êags
 |
ZEROPAD
;

347 
ª≥©
;

351 
fõld_width
 = -1;

352 i‡(
	`is_digô
(*
fmt
))

353 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

354 i‡(*
fmt
 == '*') {

355 ++
fmt
;

357 
fõld_width
 = 
	`va_¨g
(
¨gs
, );

358 i‡(
fõld_width
 < 0) {

359 
fõld_width
 = -field_width;

360 
Êags
 |
LEFT
;

365 
¥ecisi⁄
 = -1;

366 i‡(*
fmt
 == '.') {

367 ++
fmt
;

368 i‡(
	`is_digô
(*
fmt
))

369 
¥ecisi⁄
 = 
	`skù_©oi
(&
fmt
);

370 i‡(*
fmt
 == '*') {

371 ++
fmt
;

373 
¥ecisi⁄
 = 
	`va_¨g
(
¨gs
, );

375 i‡(
¥ecisi⁄
 < 0)

376 
¥ecisi⁄
 = 0;

380 
quÆifõr
 = -1;

381 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L' ||

382 *
fmt
 == 'Z' || *fmt == 'z' || *fmt == 't') {

383 
quÆifõr
 = *
fmt
;

384 ++
fmt
;

385 i‡(
quÆifõr
 ='l' && *
fmt
 == 'l') {

386 
quÆifõr
 = 'L';

387 ++
fmt
;

392 
ba£
 = 10;

394 *
fmt
) {

396 i‡(!(
Êags
 & 
LEFT
)) {

397 --
fõld_width
 > 0)

398 
	`ADDCH
(
°r
, ' ');

400 
	`ADDCH
(
°r
, (Ë
	`va_¨g
(
¨gs
, ));

401 --
fõld_width
 > 0)

402 
	`ADDCH
(
°r
, ' ');

406 i‡(
quÆifõr
 == 'l') {

407 
°r
 = 
	`°rög16
(°r, 
íd
, 
	`va_¨g
(
¨gs
, 
u16
 *),

408 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

410 
°r
 = 
	`°rög
(°r, 
íd
, 
	`va_¨g
(
¨gs
, *),

411 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

417 
°r
 = 
	`poöãr
(
fmt
 + 1, så, 
íd
,

418 
	`va_¨g
(
¨gs
, *),

419 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

420 i‡(
	`IS_ERR
(
°r
))

421  
	`PTR_ERR
(
°r
);

423 
	`iß um
(
fmt
[1]))

424 
fmt
++;

429 i‡(
quÆifõr
 == 'l') {

430 *
ù
 = 
	`va_¨g
(
¨gs
, *);

431 *
ù
 = (
°r
 - 
buf
);

433 *
ù
 = 
	`va_¨g
(
¨gs
, *);

434 *
ù
 = (
°r
 - 
buf
);

439 
	`ADDCH
(
°r
, '%');

444 
ba£
 = 8;

448 
Êags
 |
SMALL
;

450 
ba£
 = 16;

455 
Êags
 |
SIGN
;

460 
	`ADDCH
(
°r
, '%');

461 i‡(*
fmt
)

462 
	`ADDCH
(
°r
, *
fmt
);

464 --
fmt
;

467 i‡(
quÆifõr
 == 'L')

468 
num
 = 
	`va_¨g
(
¨gs
, );

469 i‡(
quÆifõr
 == 'l') {

470 
num
 = 
	`va_¨g
(
¨gs
, );

471 i‡(
Êags
 & 
SIGN
)

472 
num
 = (signed )Çum;

473 } i‡(
quÆifõr
 == 'Z' || qualifier == 'z') {

474 
num
 = 
	`va_¨g
(
¨gs
, 
size_t
);

475 } i‡(
quÆifõr
 == 't') {

476 
num
 = 
	`va_¨g
(
¨gs
, 
±rdiff_t
);

477 } i‡(
quÆifõr
 == 'h') {

478 
num
 = (Ë
	`va_¨g
(
¨gs
, );

479 i‡(
Êags
 & 
SIGN
)

480 
num
 = (signed )Çum;

482 
num
 = 
	`va_¨g
(
¨gs
, );

483 i‡(
Êags
 & 
SIGN
)

484 
num
 = (signed )Çum;

486 
°r
 = 
	`numbî
(°r, 
íd
, 
num
, 
ba£
, 
fõld_width
, 
¥ecisi⁄
,

487 
Êags
);

490 i‡(
size
 > 0) {

491 
	`ADDCH
(
°r
, '\0');

492 i‡(
°r
 > 
íd
)

493 
íd
[-1] = '\0';

494 --
°r
;

497  
°r
 - 
buf
;

498 
	}
}

500 
	$v¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
,

501 
va_li°
 
¨gs
)

503  
	`v¢¥ötf_öã∫Æ
(
buf
, 
size
, 
fmt
, 
¨gs
);

504 
	}
}

506 
	$vs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

508 
i
;

510 
i
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

512 i‡(
	`likñy
(
i
 < 
size
))

513  
i
;

514 i‡(
size
 != 0)

515  
size
 - 1;

517 
	}
}

519 
	$¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

521 
va_li°
 
¨gs
;

522 
i
;

524 
	`va_°¨t
(
¨gs
, 
fmt
);

525 
i
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

526 
	`va_íd
(
¨gs
);

528  
i
;

529 
	}
}

531 
	$s˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

533 
va_li°
 
¨gs
;

534 
i
;

536 
	`va_°¨t
(
¨gs
, 
fmt
);

537 
i
 = 
	`vs˙¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

538 
	`va_íd
(
¨gs
);

540  
i
;

541 
	}
}

556 
	$v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

558  
	`v¢¥ötf_öã∫Æ
(
buf
, 
INT_MAX
, 
fmt
, 
¨gs
);

559 
	}
}

561 
	$•rötf
(*
buf
, c⁄° *
fmt
, ...)

563 
va_li°
 
¨gs
;

564 
i
;

566 
	`va_°¨t
(
¨gs
, 
fmt
);

567 
i
 = 
	`v•rötf
(
buf
, 
fmt
, 
¨gs
);

568 
	`va_íd
(
¨gs
);

569  
i
;

570 
	}
}

573 
	$¥ötf
(c⁄° *
fmt
, ...)

575 
va_li°
 
¨gs
;

576 
uöt
 
i
;

577 
¥ötbuf„r
[
CONFIG_SYS_PBSIZE
];

579 
	`va_°¨t
(
¨gs
, 
fmt
);

585 
i
 = 
	`vs˙¥ötf
(
¥ötbuf„r
, ’rötbuf„r), 
fmt
, 
¨gs
);

586 
	`va_íd
(
¨gs
);

589 i‡(
i
 <= 0)

590  
i
;

592 
	`puts
(
¥ötbuf„r
);

593  
i
;

594 
	}
}

596 
	$v¥ötf
(c⁄° *
fmt
, 
va_li°
 
¨gs
)

598 
uöt
 
i
;

599 
¥ötbuf„r
[
CONFIG_SYS_PBSIZE
];

605 
i
 = 
	`vs˙¥ötf
(
¥ötbuf„r
, ’rötbuf„r), 
fmt
, 
¨gs
);

608 i‡(
i
 <= 0)

609  
i
;

611 
	`puts
(
¥ötbuf„r
);

612  
i
;

613 
	}
}

615 
	$__as£π_Áû
(c⁄° *
as£πi⁄
, c⁄° *
fûe
, 
löe
,

616 c⁄° *
fun˘i⁄
)

619 
	`∑nic
("%s:%u: %s: As£πi⁄ `%s' faûed.", 
fûe
, 
löe
, 
fun˘i⁄
,

620 
as£πi⁄
);

621 
	}
}

624 *
	$sim∂e_ôﬂ
(
ul⁄g
 
i
)

627 
loˇl
[22];

628 *
p
 = &
loˇl
[21];

630 *
p
-- = '\0';

632 *
p
-- = '0' + 
i
 % 10;

633 
i
 /= 10;

634 } 
i
 > 0);

635  
p
 + 1;

636 
	}
}

640 
	$¥öt_grou≥d_uŒ
(
öt_vÆ
, 
digôs
)

642 
°r
[21], *
s
;

643 
gøb
 = 3;

645 
digôs
 = (digits + 2) / 3;

646 
	`•rötf
(
°r
, "%*Œu", 
digôs
 * 3, 
öt_vÆ
);

647 
s
 = 
°r
; *s; s +
gøb
) {

648 i‡(
s
 !
°r
)

649 
	`putc
(
s
[-1] != ' ' ? ',' : ' ');

650 
	`¥ötf
("%.*s", 
gøb
, 
s
);

651 
gøb
 = 3;

653 
	}
}

656 
boﬁ
 
	$°r2off
(c⁄° *
p
, 
loff_t
 *
num
)

658 *
íd±r
;

660 *
num
 = 
	`sim∂e_°πouŒ
(
p
, &
íd±r
, 16);

661  *
p
 !'\0' && *
íd±r
 == '\0';

662 
	}
}

664 
boﬁ
 
	$°r2l⁄g
(c⁄° *
p
, 
ul⁄g
 *
num
)

666 *
íd±r
;

668 *
num
 = 
	`sim∂e_°πoul
(
p
, &
íd±r
, 16);

669  *
p
 !'\0' && *
íd±r
 == '\0';

670 
	}
}

	@testapps/test_mutex.c

4 
	~<RosX.h
>

6 
idÀ_èsk
();

7 
èsk_1
();

8 
èsk_2
();

9 
èsk_3
();

11 
RX_TASK
 
	gidÀ_tcb
;

12 
RX_TASK
 
	gèsk_1_tcb
;

13 
RX_TASK
 
	gèsk_2_tcb
;

14 
RX_TASK
 
	gèsk_3_tcb
;

16 
	s¥iv
 {

17 
	mnum
;

20 
¥iv
 
	gMY_PRIV
 = {10};

21 
RX_DEFINE_MUTEX
(
m
);

24 
	$rx_≠∂iˇti⁄_öô
()

27 
	`rx_¸óã_èsk
(&
idÀ_tcb
,"idÀ", 
RX_TASK_LEAST_PRIO
, 0, 8192, 
idÀ_èsk
, 
RX_TASK_READY
, 0);

28 
	`rx_¸óã_èsk
(&
èsk_1_tcb
,"èsk1", 3, 0, 8192, 
èsk_1
, 
RX_TASK_READY
, 0);

29 
	`rx_¸óã_èsk
(&
èsk_2_tcb
,"èsk2", 2, 0, 8192, 
èsk_2
, 
RX_TASK_READY
, 0);

30 
	`rx_¸óã_èsk
(&
èsk_3_tcb
,"èsk3", 1, 0, 8192, 
èsk_3
, 
RX_TASK_READY
, 0);

32 
	`rx_sched
();

33 
	}
}

35 
	$èsk_3
()

39 
	`rx_muãx_lock
(&
m
, 
OS_WAIT_FOREVER
);

40 
MY_PRIV
.
num
 = 13;

41 
	`¥_öfo
("Acquired mutexÅask_3\n");

42 
	`rx_s¶ìp
(3);

43 
	`rx_muãx_u∆ock
(&
m
);

44 
	`¥_öfo
("Release mutexÅask_3\n");

45 
	`rx_su•íd_èsk
(
MYSELF
);

48 
	}
}

50 
	$èsk_2
()

52 
	`¥_öfo
("enteringÅask_2\n");

54 
	`rx_muãx_lock
(&
m
, 
OS_WAIT_FOREVER
);

55 
	`¥_öfo
("Acquired mutexÅask_2\n");

56 
MY_PRIV
.
num
 = 12;

57 
	`rx_muãx_u∆ock
(&
m
);

58 
	`¥_öfo
("Release mutexÅask_2\n");

59 
	`rx_su•íd_èsk
(
MYSELF
);

61 
	}
}

63 
	$èsk_1
()

65 
	`¥_öfo
("enteringÅask_1\n");

67 
	`rx_muãx_lock
(&
m
, 
OS_WAIT_FOREVER
);

68 
	`¥_öfo
("Acquired mutexÅask_1\n");

69 
MY_PRIV
.
num
 = 11;

70 
	`rx_muãx_u∆ock
(&
m
);

71 
	`¥_öfo
("Release mutexÅask_1\n");

72 
	`rx_su•íd_èsk
(
MYSELF
);

74 
	}
}

76 
	$idÀ_èsk
()

78 
a
 = 100000;

79 
b
 = 200000;

80 
c
 = 0;

84 
c
 = 
a
 + 
b
;

86 
	}
}

	@testapps/test_mutex_priority_inheritance.c

4 
	~<Ro£RTOS.h
>

8 
idÀ_èsk
();

9 
èsk_1
();

10 
èsk_2
();

11 
èsk_3
();

13 
RX_TASK
 
	gidÀ_tcb
;

14 
RX_TASK
 
	gèsk_1_tcb
;

15 
RX_TASK
 
	gèsk_2_tcb
;

16 
RX_TASK
 
	gèsk_3_tcb
;

18 
	s¥iv
 {

19 
	mnum
;

22 
¥iv
 
	gMY_PRIV
 = {10};

23 
DEFINE_MUTEX
(
m
);

26 
	$≠∂iˇti⁄_öô
()

29 
	`rx_¸óã_èsk
(&
idÀ_tcb
,"idÀ", 
RX_TASK_LEAST_PRIO
, 0, 8192, 
idÀ_èsk
, 
RX_TASK_READY
, 0);

30 
	`rx_¸óã_èsk
(&
èsk_1_tcb
,"èsk1", 3, 0, 8192, 
èsk_1
, 
RX_TASK_READY
, 0);

31 
	`rx_¸óã_èsk
(&
èsk_2_tcb
,"èsk2", 5, 0, 8192, 
èsk_2
, 
RX_TASK_READY
, 0);

32 
	`rx_¸óã_èsk
(&
èsk_3_tcb
,"èsk3", 1, 0, 8192, 
èsk_3
, 
RX_TASK_READY
, 0);

34 
	`rx_sched
();

35 
	}
}

37 
	$èsk_3
()

41 
	`rx_s¶ìp
(5);

42 
	`rx_muãx_lock
(&
m
, 
OS_WAIT_FOREVER
);

43 
	`__rx_óæy_¥ötk
("MutexÅaken byÅask 3 \n");

44 
	`rx_muãx_u∆ock
(&
m
);

45 
	`__rx_óæy_¥ötk
("Mutex unlockÅask 3 \n");

46 
	`rx_su•íd_èsk
(&
èsk_1_tcb
);

47 
	`rx_su•íd_èsk
(
MYSELF
);

50 
	}
}

52 
	$èsk_2
()

54 
	`__rx_óæy_¥ötk
("enteringÅask_2\n");

58 if(
OS_OK
 !
	`rx_muãx_lock
(&
m
, 
OS_WAIT_FOREVER
)) {

59 
	`__rx_óæy_¥ötk
("FailedÅo get MutexÅask 2 \n");

60 
	`rx_su•íd_èsk
(
MYSELF
);

62 
	`__rx_óæy_¥ötk
("gotÅhe mutexÅask 2\n");

65 
	`rx_s¶ìp
(9);

66 
	`rx_muãx_u∆ock
(&
m
);

68 
	`__rx_óæy_¥ötk
("Mutex unlockÅask 2 \n");

69 
	`rx_su•íd_èsk
(
MYSELF
);

71 
	}
}

73 
	$èsk_1
()

75 
	`__rx_óæy_¥ötk
("enteringÅask_1\n");

76 
	`rx_s¶ìp
(7);

77 
	`__rx_óæy_¥ötk
("task_1 coming out of sleep\n");

82 
	}
}

84 
	$idÀ_èsk
()

86 
a
 = 100000;

87 
b
 = 200000;

88 
c
 = 0;

92 
c
 = 
a
 + 
b
;

94 
	}
}

	@testapps/test_mutex_timeout.c

4 
	~<Ro£RTOS.h
>

8 
idÀ_èsk
();

9 
èsk_1
();

10 
èsk_2
();

11 
èsk_3
();

13 
RX_TASK
 
	gidÀ_tcb
;

14 
RX_TASK
 
	gèsk_1_tcb
;

15 
RX_TASK
 
	gèsk_2_tcb
;

16 
RX_TASK
 
	gèsk_3_tcb
;

18 
	s¥iv
 {

19 
	mnum
;

22 
¥iv
 
	gMY_PRIV
 = {10};

23 
DEFINE_MUTEX
(
m
);

26 
	$≠∂iˇti⁄_öô
()

29 
	`rx_¸óã_èsk
(&
idÀ_tcb
,"idÀ", 
RX_TASK_LEAST_PRIO
, 0, 8192, 
idÀ_èsk
, 
RX_TASK_READY
, 0);

30 
	`rx_¸óã_èsk
(&
èsk_1_tcb
,"èsk1", 3, 0, 8192, 
èsk_1
, 
RX_TASK_READY
, 0);

31 
	`rx_¸óã_èsk
(&
èsk_2_tcb
,"èsk2", 2, 0, 8192, 
èsk_2
, 
RX_TASK_READY
, 0);

32 
	`rx_¸óã_èsk
(&
èsk_3_tcb
,"èsk3", 1, 0, 8192, 
èsk_3
, 
RX_TASK_READY
, 0);

34 
	`rx_sched
();

35 
	}
}

37 
	$èsk_3
()

41 
	`rx_muãx_lock
(&
m
, 
OS_WAIT_FOREVER
);

42 
	`¥_öfo
("MutexÜockÅask 3 \n");

43 
	`rx_s¶ìp
(12);

44 
	`rx_muãx_u∆ock
(&
m
);

45 
	`¥_öfo
("Mutex unlockÅask 3 \n");

46 
	`rx_su•íd_èsk
(
MYSELF
);

49 
	}
}

51 
	$èsk_2
()

53 
	`¥_öfo
("enteringÅask_2\n");

57 if(
OS_OK
 !
	`rx_muãx_lock
(&
m
, 
	`SECS_TO_TICKS
(7) )) {

58 
	`¥_öfo
("MutexÅimedoutÅask 2 \n");

59 
	`rx_su•íd_èsk
(
MYSELF
);

61 
	`¥_öfo
("gotÅhe mutexÅask 2\n");

64 
	`rx_muãx_u∆ock
(&
m
);

66 
	`rx_su•íd_èsk
(
MYSELF
);

68 
	}
}

70 
	$èsk_1
()

72 
	`¥_öfo
("enteringÅask_1\n");

76 if(
OS_OK
 !
	`rx_muãx_lock
(&
m
, 
	`SECS_TO_TICKS
(10))) {

77 
	`¥_öfo
("MutexÅimedoutÅask 1 \n");

78 
	`rx_su•íd_èsk
(
MYSELF
);

80 
	`¥_öfo
("gotÅhe mutexÅask 1\n");

83 
	`rx_muãx_u∆ock
(&
m
);

85 
	`rx_su•íd_èsk
(
MYSELF
);

87 
	}
}

89 
	$idÀ_èsk
()

91 
a
 = 100000;

92 
b
 = 200000;

93 
c
 = 0;

97 
c
 = 
a
 + 
b
;

99 
	}
}

	@testapps/test_semaphore.c

4 
	~<Ro£RTOS.h
>

6 
idÀ_èsk
();

7 
èsk_1
();

8 
èsk_2
();

9 
èsk_3
();

11 
RX_TASK
 
	gidÀ_tcb
;

12 
RX_TASK
 
	gèsk_1_tcb
;

13 
RX_TASK
 
	gèsk_2_tcb
;

14 
RX_TASK
 
	gèsk_3_tcb
;

16 
	s¥iv
 {

17 
	mnum
;

20 
¥iv
 
	gMY_PRIV
 = {10};

21 
DEFINE_SEMAPHORE
(
s
, 1);

24 
	$≠∂iˇti⁄_öô
()

27 
	`rx_¸óã_èsk
(&
idÀ_tcb
,"idÀ", 
RX_TASK_LEAST_PRIO
, 0, 8192, 
idÀ_èsk
, 
TASK_READY
, 0);

28 
	`rx_¸óã_èsk
(&
èsk_1_tcb
,"èsk1", 3, 0, 8192, 
èsk_1
, 
RX_TASK_READY
, 0);

29 
	`rx_¸óã_èsk
(&
èsk_2_tcb
,"èsk2", 2, 0, 8192, 
èsk_2
, 
RX_TASK_READY
, 0);

30 
	`rx_¸óã_èsk
(&
èsk_3_tcb
,"èsk3", 1, 0, 8192, 
èsk_3
, 
RX_TASK_READY
, 0);

32 
	`rx_sched
();

33 
	}
}

35 
	$èsk_3
()

37 
	`¥_öfo
("EnteringÅask_3\n");

40 
	`£m≠h‹e_waô
(&
s
, 
OS_WAIT_FOREVER
);

41 
	`¥_öfo
("Task 3 Acquired semaphore\n");

42 
	`rx_s¶ìp
(6);

43 
	`£m≠h‹e_po°
(&
s
);

44 
	`¥_öfo
("Task 3 Released semaphore\n");

45 
	`rx_su•íd_èsk
(
MYSELF
);

47 
	}
}

49 
	$èsk_2
()

51 
	`¥_öfo
("enteringÅask_2\n");

53 
	`£m≠h‹e_waô
(&
s
, 
OS_WAIT_FOREVER
);

54 
	`¥_öfo
("Task 2 Acquired semaphore\n");

55 
	`rx_s¶ìp
(3);

56 
	`£m≠h‹e_po°
(&
s
);

57 
	`¥_öfo
("Task 2 Released semaphore\n");

58 
	`rx_su•íd_èsk
(
MYSELF
);

60 
	}
}

62 
	$èsk_1
()

64 
	`¥_öfo
("enteringÅask_1\n");

66 
	`£m≠h‹e_waô
(&
s
, 
OS_WAIT_FOREVER
);

67 
	`¥_öfo
("Task 1 Acquired semaphore\n");

68 
	`rx_s¶ìp
(1);

69 
	`£m≠h‹e_po°
(&
s
);

70 
	`¥_öfo
("Task 1 Released semaphore\n");

71 
	`rx_su•íd_èsk
(
MYSELF
);

73 
	}
}

75 
	$idÀ_èsk
()

77 
a
 = 100000;

78 
b
 = 200000;

79 
c
 = 0;

83 
c
 = 
a
 + 
b
;

85 
	}
}

	@testapps/test_semaphore_timeout.c

4 
	~<Ro£RTOS.h
>

6 
idÀ_èsk
();

7 
èsk_1
();

8 
èsk_2
();

9 
èsk_3
();

11 
RX_TASK
 
	gidÀ_tcb
;

12 
RX_TASK
 
	gèsk_1_tcb
;

13 
RX_TASK
 
	gèsk_2_tcb
;

14 
RX_TCB
 
	gèsk_3_tcb
;

16 
	s¥iv
 {

17 
	mnum
;

20 
¥iv
 
	gMY_PRIV
 = {10};

21 
DEFINE_SEMAPHORE
(
s
, 1);

24 
	$≠∂iˇti⁄_öô
()

27 
	`rx_¸óã_èsk
(&
idÀ_tcb
,"idÀ", 
RX_TASK_LEAST_PRIO
, 0, 8192, 
idÀ_èsk
, 
RX_TASK_READY
, 0);

28 
	`rx_¸óã_èsk
(&
èsk_1_tcb
,"èsk1", 3, 0, 8192, 
èsk_1
, 
RX_TASK_READY
, 0);

29 
	`rx_¸óã_èsk
(&
èsk_2_tcb
,"èsk2", 2, 0, 8192, 
èsk_2
, 
RX_TASK_READY
, 0);

30 
	`rx_¸óã_èsk
(&
èsk_3_tcb
,"èsk3", 1, 0, 8192, 
èsk_3
, 
RX_TASK_READY
, 0);

32 
	`rx_sched
();

33 
	}
}

35 
	$èsk_3
()

37 
	`¥_öfo
("EnteringÅask_3\n");

40 
	`£m≠h‹e_waô
(&
s
, 
OS_WAIT_FOREVER
);

41 
	`¥_öfo
("Task 3 Acquired semaphore\n");

42 
	`rx_s¶ìp
(15);

43 
	`£m≠h‹e_po°
(&
s
);

44 
	`¥_öfo
("Task 3 Released semaphore\n");

45 
	`rx_su•íd_èsk
(
MYSELF
);

47 
	}
}

49 
	$èsk_2
()

52 
	`¥_öfo
("enteringÅask_2\n");

53 i‡(
E_OS_TIMEOUT
 =
	`£m≠h‹e_waô
(&
s
, 
	`SECS_TO_TICKS
(10))) {

54 
	`¥_öfo
("Task 2 semaphoreÅimeout\n");

56 
	`¥_öfo
("Task 2 Acquired semaphore\n");

57 
	`£m≠h‹e_po°
(&
s
);

58 
	`¥_öfo
("Task 2 Released semaphore\n");

60 
	`rx_su•íd_èsk
(
MYSELF
);

62 
	}
}

64 
	$èsk_1
()

67 
	`¥_öfo
("enteringÅask_1\n");

68 i‡(
E_OS_TIMEOUT
 =
	`£m≠h‹e_waô
(&
s
, 
	`SECS_TO_TICKS
(11))){

69 
	`¥_öfo
("Task 1 semaphoreÅimeout\n");

71 
	`¥_öfo
("Task 1 Acquired semaphore\n");

72 
	`rx_s¶ìp
(1);

73 
	`£m≠h‹e_po°
(&
s
);

74 
	`¥_öfo
("Task 1 Released semaphore\n");

76 
	`rx_su•íd_èsk
(
MYSELF
);

78 
	}
}

80 
	$idÀ_èsk
()

82 
a
 = 100000;

83 
b
 = 200000;

84 
c
 = 0;

88 
c
 = 
a
 + 
b
;

90 
	}
}

	@testapps/test_suspend_resume.c

4 
	~<Ro£RTOS.h
>

6 
	#RX_TASK_LEAST_PRIO
 (
CONFIG_MAX_TASK
 - 1)

	)

8 
idÀ_èsk
();

9 
èsk1
();

10 
èsk2
();

12 
RX_TASK
 
	gidÀ_tcb
;

13 
RX_TASK
 
	gèsk1_tcb
;

14 
RX_TASK
 
	gèsk2_tcb
;

16 
sy°em_úq
(
úq_num
, *
a
);

19 
	$≠∂iˇti⁄_öô
()

22 
	`rx_¸óã_èsk
(&
idÀ_tcb
,"idÀ", 
RX_TASK_LEAST_PRIO
, 0, 8192, 
idÀ_èsk
, 
RX_TASK_READY
,0);

23 
	`rx_¸óã_èsk
(&
èsk1_tcb
,"èsk1", 2, 0, 8192, 
èsk1
, 
RX_TASK_READY
,0);

24 
	`rx_¸óã_èsk
(&
èsk2_tcb
,"èsk2", 3, 0, 8192, 
èsk2
, 
RX_TASK_READY
,0);

26 if(
OS_OK
 !
	`ªque°_úq
(0, &
sy°em_úq
, 0, "sys_irq", 0)) {

27 
	`¥_îr‹
("request_irq failed\n");

28 
	`exô
(1);

32 
	`rx_sched
();

33 
	}
}

35 
	gsys_úq
;

37 
	$sy°em_úq
(
úq_num
, *
a
)

39 
sys_úq
 ++;

40  
IRQ_HANDLED
;

41 
	}
}

43 
	$idÀ_èsk
()

45 
a
 = 100000;

46 
b
 = 200000;

47 
c
 = 0;

50 
	`¥_öfo
("I%d%d ", 
__øw_úq_cou¡î
, 
sys_úq
);

51 
c
 = 
a
 + 
b
;

52 
	`rx_sched
();

54 
	}
}

57 
	$èsk1
()

59 
a
 = 1000;

60 
b
 = 1000;

61 
c
 = 0;

62 
	`¥_öfo
("EnteringÅask1\n");

63 
	`rx_su•íd_èsk
(
MYSELF
);

66 
	`ªsume_èsk
(&
èsk2_tcb
);

67 
c
 = 
a
 + 
b
;

68 
c
--);

69 
	`rx_su•íd_èsk
(
MYSELF
);

71 
	}
}

73 
	$èsk2
()

75 
a
 = 1000;

76 
b
 = 2000;

77 
c
 = 0;

78 
	`¥_öfo
("EnteringÅask2\n");

81 
	`ªsume_èsk
(&
èsk1_tcb
);

82 
c
 = 
a
 + 
b
;

83 
c
--);

84 
	`rx_su•íd_èsk
(
MYSELF
);

87 
	}
}

	@testapps/test_timer.c

6 
	~<Ro£RTOS.h
>

8 
idÀ_èsk
();

9 
èsk_1
();

10 
èsk_2
();

11 
èsk_3
();

13 
RX_TASK
 
	gidÀ_tcb
;

14 
RX_TASK
 
	gèsk_1_tcb
;

15 
RX_TASK
 
	gèsk_2_tcb
;

16 
RX_TASK
 
	gèsk_3_tcb
;

18 
	s¥iv
 {

19 
timî_li°
 *
	mtimî
;

22 
timî_ˇŒback
(*);

24 
	$timî_ˇŒback
(*
¥iv
)

26 
¥iv
 *
my_¥iv
 =Öriv;

28 
	`¥_öfo
("receivedÅimer call-back\n");

29 
	`rx_mod_timî
(
my_¥iv
->
timî
, 6);

30 
	}
}

32 
sy°em_úq
(
úq_num
, *
a
);

35 
	$≠∂iˇti⁄_öô
()

38 
	`rx_¸óã_èsk
(&
idÀ_tcb
,"idÀ", 
RX_TASK_LEAST_PRIO
, 0, 8192, 
idÀ_èsk
, 
RX_TASK_READY
, 0);

39 
	`rx_¸óã_èsk
(&
èsk_1_tcb
,"èsk1", 1, 0, 8192, 
èsk_1
, 
RX_TASK_READY
, 0);

40 
	`rx_¸óã_èsk
(&
èsk_2_tcb
,"èsk2", 2, 0, 8192, 
èsk_2
, 
RX_TASK_READY
, 0);

41 
	`rx_¸óã_èsk
(&
èsk_3_tcb
,"èsk3", 3, 0, 8192, 
èsk_3
, 
RX_TASK_READY
, 0);

42 
	`rx_sched
();

43 
	}
}

45 
	$èsk_3
()

47 
cou¡
 = 0;

48 
	`¥_öfo
("EnterÅask_3\n");

50 
	`rx_s¶ìp
(3);

51 
cou¡
 ++;

52 
	`¥_öfo
("èsk3 %d\n", 
cou¡
);

54 
	}
}

56 
	$èsk_2
()

58 
cou¡
 = 0;

59 
	`¥_öfo
("EnterÅask_2\n");

61 
	`rx_s¶ìp
(9);

62 
cou¡
 ++;

63 
	`¥_öfo
("èsk2 %d\n", 
cou¡
);

65 
	}
}

67 
	$èsk_1
()

69 
timî_li°
 *
timî
 = 
NULL
;

70 
¥iv
 
my_¥iv
;

72 
	`¥_öfo
("EnterÅask_1\n");

73 if(
NULL
 =(
timî
 = 
	`rx_¸óã_timî
(
timî_ˇŒback
, &
my_¥iv
, 5))) {

74 
	`¥_∑nic
("task_1:Ñx_create_timer failed");

77 
my_¥iv
.
timî
 =Åimer;

79 
	`rx_°¨t_timî
(
timî
);

80 
	`¥_öfo
("Timer started\n");

82 
	`rx_su•íd_èsk
(
MYSELF
);

87 
	}
}

89 
	$idÀ_èsk
()

91 
a
 = 100000;

92 
b
 = 200000;

93 
c
 = 0;

97 
c
 = 
a
 + 
b
;

99 
	}
}

	@testapps/test_timeslice.c

3 
	~<Ro£RTOS.h
>

5 
idÀ_èsk
();

6 
èsk_1
();

7 
èsk_2
();

8 
èsk_3
();

10 
RX_TASK
 
	gidÀ_tcb
;

11 
RX_TASK
 
	gèsk_1_tcb
;

12 
RX_TASK
 
	gèsk_2_tcb
;

13 
RX_TASK
 
	gèsk_3_tcb
;

16 
	$≠∂iˇti⁄_öô
()

19 
	`rx_¸óã_èsk
(&
idÀ_tcb
,"idÀ", 
RX_TASK_LEAST_PRIO
, 0, 8192, 
idÀ_èsk
, 
RX_TASK_READY
, 0);

20 
	`rx_¸óã_èsk
(&
èsk_1_tcb
,"èsk1", 3, 0, 8192, 
èsk_1
, 
RX_TASK_READY
, 5);

21 
	`rx_¸óã_èsk
(&
èsk_2_tcb
,"èsk2", 3, 0, 8192, 
èsk_2
, 
RX_TASK_READY
, 10);

22 
	`rx_¸óã_èsk
(&
èsk_3_tcb
,"èsk3", 3, 0, 8192, 
èsk_3
, 
RX_TASK_READY
, 15);

24 
	`rx_sched
();

25 
	}
}

27 
	#DELAY
 1000000

	)

28 
	$èsk_3
()

30 
a
 = 
DELAY
;

33 
a
 --);

35 
a
 = 
DELAY
;

36 
	`¥_öfo
("3 ");

39 
	}
}

41 
	$èsk_2
()

43 
a
 = 
DELAY
;

44 
	`¥_öfo
("enteringÅask_2\n");

46 
a
 --);

48 
a
 = 
DELAY
;

49 
	`¥_öfo
("2 ");

51 
	}
}

53 
	$èsk_1
()

55 
a
 = 
DELAY
;

56 
	`¥_öfo
("enteringÅask_1\n");

58 
a
 --);

60 
a
 = 
DELAY
;

61 
	`¥_öfo
("1 ");

63 
	}
}

65 
	$idÀ_èsk
()

67 
a
 = 100000;

68 
b
 = 200000;

69 
c
 = 0;

73 
c
 = 
a
 + 
b
;

75 
	}
}

	@testapps/test_wait.c

4 
	~<Ro£RTOS.h
>

6 
idÀ_èsk
();

7 
èsk_1
();

8 
èsk_2
();

9 
èsk_3
();

11 
RX_TASK
 
	gidÀ_tcb
;

12 
RX_TASK
 
	gèsk_1_tcb
;

13 
RX_TASK
 
	gèsk_2_tcb
;

14 
RX_TASK
 
	gèsk_3_tcb
;

16 
	s¥iv
 {

17 
	mnum
;

20 
¥iv
 
	gMY_PRIV
 = {10};

21 
DEFINE_WAITQUEUE
(
wq
);

23 
	ggvÆue
 = 0;

26 
	$≠∂iˇti⁄_öô
()

29 
	`rx_¸óã_èsk
(&
idÀ_tcb
,"idÀ", 
RX_TASK_LEAST_PRIO
, 0, 8192, 
idÀ_èsk
, 
RX_TASK_READY
, 0);

30 
	`rx_¸óã_èsk
(&
èsk_3_tcb
,"èsk3", 1, 0, 8192, 
èsk_3
, 
RX_TASK_READY
, 0);

31 
	`rx_¸óã_èsk
(&
èsk_2_tcb
,"èsk2", 2, 0, 8192, 
èsk_2
, 
RX_TASK_READY
, 0);

32 
	`rx_¸óã_èsk
(&
èsk_1_tcb
,"èsk1", 3, 0, 8192, 
èsk_1
, 
RX_TASK_READY
, 0);

34 
	`rx_sched
();

35 
	}
}

37 
	$èsk_3
()

39 
	`¥_öfo
("enteringÅask_3\n");

41 
	`waô_queue
(&
wq
, (
gvÆue
 == 1));

42 
	`¥_öfo
("Task_3 Value change detected\n");

43 
	`rx_su•íd_èsk
(
MYSELF
);

46 
	}
}

48 
	$èsk_2
()

50 
	`¥_öfo
("enteringÅask_2\n");

52 
	`waô_queue
(&
wq
, (
gvÆue
 == 1));

53 
	`¥_öfo
("Task_2 Value change detected\n");

54 
	`rx_su•íd_èsk
(
MYSELF
);

56 
	}
}

58 
	$èsk_1
()

60 
	`¥_öfo
("enteringÅask_1\n");

62 
gvÆue
 = 1;

63 
	`rx_su•íd_èsk
(
MYSELF
);

65 
	}
}

67 
	$idÀ_èsk
()

69 
a
 = 100000;

70 
b
 = 200000;

71 
c
 = 0;

75 
c
 = 
a
 + 
b
;

77 
	}
}

	@utils/send_signal.c

3 
	~<°dio.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sig«l.h
>

6 
	~<sys/ùc.h
>

7 
	~<sys/shm.h
>

8 
	~<time.h
>

10 
	sshm_°ru˘
 {

11 
pid_t
 
	mpid
;

12 
	mnum
;

15 
	$maö
()

17 
pid_t
 
pid
;

18 
key_t
 
MyKey
;

19 
a
;

20 
ShmID
;

21 
shm_°ru˘
 *
shm_±r
;

22 
löe
[100], 
c
;

23 
i
;

24 
cou¡î
 = 0;

25 
time•ec
 
tim
, 
tim2
;

26 
tim
.
tv_£c
 = 0;

27 
tim
.
tv_n£c
 = 100000000L;

30 
MyKey
 = 
	`·ok
("../", 'c');

32 
ShmID
 = 
	`shmgë
(
MyKey
, (
shm_°ru˘
), 0666);

34 
shm_±r
 = (
shm_°ru˘
 *Ë
	`shm©
(
ShmID
, 
NULL
, 0);

35 
pid
 = 
shm_±r
->pid;

41 
shm_±r
->
num
 = 0;

42 
	`kûl
(
pid
, 
SIGUSR1
);

44 
cou¡î
 ++;

45 
	`¥ötf
("öãºu± síà%d\n", 
cou¡î
);

46 
	`«no¶ìp
(&
tim
 , &
tim2
);

49 
	}
}

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm/byteorder.h

1 #i‚de‡
_ASM_X86_BYTEORDER_H


2 
	#_ASM_X86_BYTEORDER_H


	)

4 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/byteswap.h

18 #i‚de‡
_BYTESWAP_H


19 
	#_BYTESWAP_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/byãsw≠.h
>

31 
	#bsw≠_16
(
x
Ë
	`__bsw≠_16
 (x)

	)

34 
	#bsw≠_32
(
x
Ë
	`__bsw≠_32
 (x)

	)

37 
	#bsw≠_64
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

78 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


79 
	~<bôs/°©.h
>

81 
	#S_IFMT
 
__S_IFMT


	)

82 
	#S_IFDIR
 
__S_IFDIR


	)

83 
	#S_IFCHR
 
__S_IFCHR


	)

84 
	#S_IFBLK
 
__S_IFBLK


	)

85 
	#S_IFREG
 
__S_IFREG


	)

86 #ifde‡
__S_IFIFO


87 
	#S_IFIFO
 
__S_IFIFO


	)

89 #ifde‡
__S_IFLNK


90 
	#S_IFLNK
 
__S_IFLNK


	)

92 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


93 
	#S_IFSOCK
 
__S_IFSOCK


	)

98 
	#S_ISUID
 
__S_ISUID


	)

99 
	#S_ISGID
 
__S_ISGID


	)

101 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


103 
	#S_ISVTX
 
__S_ISVTX


	)

106 
	#S_IRUSR
 
__S_IREAD


	)

107 
	#S_IWUSR
 
__S_IWRITE


	)

108 
	#S_IXUSR
 
__S_IEXEC


	)

110 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

112 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

113 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

114 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

116 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

118 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

119 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

120 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

122 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

125 #ifdef 
__USE_MISC


126 #i‚de‡
R_OK


129 
	#R_OK
 4

	)

130 
	#W_OK
 2

	)

131 
	#X_OK
 1

	)

132 
	#F_OK
 0

	)

137 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


138 
	#SEEK_SET
 0

	)

139 
	#SEEK_CUR
 1

	)

140 
	#SEEK_END
 2

	)

148 
f˙é
 (
__fd
, 
__cmd
, ...);

157 #i‚de‡
__USE_FILE_OFFSET64


158 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

160 #ifde‡
__REDIRECT


161 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

162 
	`__n⁄nuŒ
 ((1));

164 
	#›í
 
›í64


	)

167 #ifde‡
__USE_LARGEFILE64


168 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

171 #ifde‡
__USE_ATFILE


181 #i‚de‡
__USE_FILE_OFFSET64


182 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

183 
	`__n⁄nuŒ
 ((2));

185 #ifde‡
__REDIRECT


186 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

187 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

189 
	#›í©
 
›í©64


	)

192 #ifde‡
__USE_LARGEFILE64


193 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

194 
	`__n⁄nuŒ
 ((2));

203 #i‚de‡
__USE_FILE_OFFSET64


204 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

206 #ifde‡
__REDIRECT


207 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

208 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

210 
	#¸ót
 
¸ót64


	)

213 #ifde‡
__USE_LARGEFILE64


214 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

217 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

218 && !
deföed
 
__USE_POSIX
))

227 
	#F_ULOCK
 0

	)

228 
	#F_LOCK
 1

	)

229 
	#F_TLOCK
 2

	)

230 
	#F_TEST
 3

	)

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

238 
	#lockf
 
lockf64


	)

241 #ifde‡
__USE_LARGEFILE64


242 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

246 #ifde‡
__USE_XOPEN2K


249 #i‚de‡
__USE_FILE_OFFSET64


250 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

251 
__advi£
Ë
__THROW
;

253 #ifde‡
__REDIRECT_NTH


254 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

255 
__off64_t
 
__Àn
, 
__advi£
),

256 
posix_Ádvi£64
);

258 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

261 #ifde‡
__USE_LARGEFILE64


262 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

263 
__advi£
Ë
__THROW
;

271 #i‚de‡
__USE_FILE_OFFSET64


272 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

274 #ifde‡
__REDIRECT


275 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

276 
__off64_t
 
__Àn
),

277 
posix_ÁŒoˇã64
);

279 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

282 #ifde‡
__USE_LARGEFILE64


283 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

289 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

290 && 
deföed
 
__va_¨g_∑ck_Àn


291 
	~<bôs/f˙é2.h
>

294 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__be32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__be16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__be64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__be32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__be16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

31 
	#__À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

33 
	#__À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

35 
	#__À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë((
__be64
)
	`__swab64
((x)))

	)

37 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__be64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë((
__be32
)
	`__swab32
((x)))

	)

39 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__be32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë((
__be16
)
	`__swab16
((x)))

	)

41 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__be16
)(x))

	)

43 
__Æways_ölöe
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

45  (
__À64
)*
p
;

46 
	}
}

47 
__Æways_ölöe
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

49  (
__u64
)*
p
;

50 
	}
}

51 
__Æways_ölöe
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

53  (
__À32
)*
p
;

54 
	}
}

55 
__Æways_ölöe
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

57  (
__u32
)*
p
;

58 
	}
}

59 
__Æways_ölöe
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

61  (
__À16
)*
p
;

62 
	}
}

63 
__Æways_ölöe
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

65  (
__u16
)*
p
;

66 
	}
}

67 
__Æways_ölöe
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

69  (
__be64
)
	`__swab64p
(
p
);

70 
	}
}

71 
__Æways_ölöe
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

73  
	`__swab64p
((
__u64
 *)
p
);

74 
	}
}

75 
__Æways_ölöe
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

77  (
__be32
)
	`__swab32p
(
p
);

78 
	}
}

79 
__Æways_ölöe
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

81  
	`__swab32p
((
__u32
 *)
p
);

82 
	}
}

83 
__Æways_ölöe
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

85  (
__be16
)
	`__swab16p
(
p
);

86 
	}
}

87 
__Æways_ölöe
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

89  
	`__swab16p
((
__u16
 *)
p
);

90 
	}
}

91 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

92 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

93 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

98 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

99 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

100 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

101 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

102 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

102 #ifde‡
__USE_XOPEN2K8


103 #i‚de‡
__ssize_t_deföed


104 
__ssize_t
 
	tssize_t
;

105 
	#__ssize_t_deföed


	)

110 
__BEGIN_NAMESPACE_STD


111 #i‚de‡
__USE_FILE_OFFSET64


112 
_G_Âos_t
 
	tÂos_t
;

114 
_G_Âos64_t
 
	tÂos_t
;

116 
__END_NAMESPACE_STD


117 #ifde‡
__USE_LARGEFILE64


118 
_G_Âos64_t
 
	tÂos64_t
;

122 
	#_IOFBF
 0

	)

123 
	#_IOLBF
 1

	)

124 
	#_IONBF
 2

	)

128 #i‚de‡
BUFSIZ


129 
	#BUFSIZ
 
_IO_BUFSIZ


	)

135 #i‚de‡
EOF


136 
	#EOF
 (-1)

	)

142 
	#SEEK_SET
 0

	)

143 
	#SEEK_CUR
 1

	)

144 
	#SEEK_END
 2

	)

145 #ifde‡
__USE_GNU


146 
	#SEEK_DATA
 3

	)

147 
	#SEEK_HOLE
 4

	)

151 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


153 
	#P_tmpdú
 "/tmp"

	)

166 
	~<bôs/°dio_lim.h
>

170 
_IO_FILE
 *
°dö
;

171 
_IO_FILE
 *
°dout
;

172 
_IO_FILE
 *
°dîr
;

174 
	#°dö
 
°dö


	)

175 
	#°dout
 
°dout


	)

176 
	#°dîr
 
°dîr


	)

178 
__BEGIN_NAMESPACE_STD


180 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

182 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

183 
__END_NAMESPACE_STD


185 #ifde‡
__USE_ATFILE


187 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

188 c⁄° *
__√w
Ë
__THROW
;

191 
__BEGIN_NAMESPACE_STD


196 #i‚de‡
__USE_FILE_OFFSET64


197 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

199 #ifde‡
__REDIRECT


200 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

202 
	#tmpfûe
 
tmpfûe64


	)

206 #ifde‡
__USE_LARGEFILE64


207 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

211 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

212 
__END_NAMESPACE_STD


214 #ifde‡
__USE_MISC


217 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

221 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


229 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

230 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

234 
__BEGIN_NAMESPACE_STD


239 
	`f˛o£
 (
FILE
 *
__°ªam
);

244 
	`fÊush
 (
FILE
 *
__°ªam
);

245 
__END_NAMESPACE_STD


247 #ifde‡
__USE_MISC


254 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

257 #ifde‡
__USE_GNU


264 
	`f˛o£Æl
 ();

268 
__BEGIN_NAMESPACE_STD


269 #i‚de‡
__USE_FILE_OFFSET64


274 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

275 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

280 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

281 c⁄° *
__ª°ri˘
 
__modes
,

282 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

284 #ifde‡
__REDIRECT


285 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

286 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

287 
__wur
;

288 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

289 c⁄° *
__ª°ri˘
 
__modes
,

290 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

291 
__wur
;

293 
	#f›í
 
f›í64


	)

294 
	#‰e›í
 
‰e›í64


	)

297 
__END_NAMESPACE_STD


298 #ifde‡
__USE_LARGEFILE64


299 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

301 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

302 c⁄° *
__ª°ri˘
 
__modes
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

306 #ifdef 
__USE_POSIX


308 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

311 #ifdef 
__USE_GNU


314 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

315 c⁄° *
__ª°ri˘
 
__modes
,

316 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

319 #ifde‡
__USE_XOPEN2K8


321 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

322 
__THROW
 
__wur
;

327 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

331 
__BEGIN_NAMESPACE_STD


334 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

338 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
__modes
, 
size_t
 
__n
Ë
__THROW
;

340 
__END_NAMESPACE_STD


342 #ifdef 
__USE_MISC


345 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

346 
size_t
 
__size
Ë
__THROW
;

349 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

353 
__BEGIN_NAMESPACE_STD


358 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

366 
	$•rötf
 (*
__ª°ri˘
 
__s
,

367 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

373 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
_G_va_li°
 
__¨g
);

379 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

381 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

382 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

383 
__END_NAMESPACE_STD


385 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


386 
__BEGIN_NAMESPACE_C99


388 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

389 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

390 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

392 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

393 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

394 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

395 
__END_NAMESPACE_C99


398 #ifde‡
__USE_GNU


401 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

402 
_G_va_li°
 
__¨g
)

403 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

404 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

405 c⁄° *
__ª°ri˘
 
__fmt
, ...)

406 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

408 c⁄° *
__ª°ri˘
 
__fmt
, ...)

409 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

412 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

436 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

451 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

486 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (c⁄° *
__ª°ri˘
 
__s
,

506 c⁄° *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

516 c⁄° *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #ifde‡
__USE_POSIX199506


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #ifde‡
__USE_POSIX199506


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

627 #i‡!
deföed
 
__USE_ISOC11
 \

628 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

640 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

642 
__END_NAMESPACE_STD


644 #ifde‡
__USE_GNU


651 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

652 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

656 #ifdef 
__USE_XOPEN2K8


667 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

668 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

669 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

670 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

671 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

672 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

680 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

681 
size_t
 *
__ª°ri˘
 
__n
,

682 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

686 
__BEGIN_NAMESPACE_STD


691 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

697 
	`puts
 (c⁄° *
__s
);

704 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

711 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

712 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

717 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

718 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

719 
__END_NAMESPACE_STD


721 #ifde‡
__USE_GNU


728 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

729 
FILE
 *
__ª°ri˘
 
__°ªam
);

732 #ifde‡
__USE_MISC


739 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

741 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

742 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

746 
__BEGIN_NAMESPACE_STD


751 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

756 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

761 
	`ªwöd
 (
FILE
 *
__°ªam
);

762 
__END_NAMESPACE_STD


769 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


770 #i‚de‡
__USE_FILE_OFFSET64


775 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

780 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

782 #ifde‡
__REDIRECT


783 
	`__REDIRECT
 (
f£eko
,

784 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

785 
f£eko64
);

786 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

788 
	#f£eko
 
f£eko64


	)

789 
	#·ñlo
 
·ñlo64


	)

794 
__BEGIN_NAMESPACE_STD


795 #i‚de‡
__USE_FILE_OFFSET64


800 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

805 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

807 #ifde‡
__REDIRECT


808 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

809 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

810 
	`__REDIRECT
 (
f£ços
,

811 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

813 
	#fgëpos
 
fgëpos64


	)

814 
	#f£ços
 
f£ços64


	)

817 
__END_NAMESPACE_STD


819 #ifde‡
__USE_LARGEFILE64


820 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

821 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

822 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

823 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

826 
__BEGIN_NAMESPACE_STD


828 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

830 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

833 
__END_NAMESPACE_STD


835 #ifde‡
__USE_MISC


837 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

838 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

839 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

843 
__BEGIN_NAMESPACE_STD


848 
	`≥º‹
 (c⁄° *
__s
);

849 
__END_NAMESPACE_STD


855 
	~<bôs/sys_îæi°.h
>

858 #ifdef 
__USE_POSIX


860 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

863 #ifde‡
__USE_MISC


865 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

869 #ifde‡
__USE_POSIX2


874 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

880 
	`p˛o£
 (
FILE
 *
__°ªam
);

884 #ifdef 
__USE_POSIX


886 *
	$˘îmid
 (*
__s
Ë
__THROW
;

890 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


892 *
	`cu£rid
 (*
__s
);

896 #ifdef 
__USE_GNU


897 
ob°ack
;

900 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

901 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

903 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

904 c⁄° *
__ª°ri˘
 
__f‹m©
,

905 
_G_va_li°
 
__¨gs
)

906 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

910 #ifde‡
__USE_POSIX199506


914 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

921 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

924 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


928 
	#__√ed_gë›t


	)

929 
	~<gë›t.h
>

934 #ifde‡
__USE_EXTERN_INLINES


935 
	~<bôs/°dio.h
>

937 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


938 
	~<bôs/°dio2.h
>

940 #ifde‡
__LDBL_COMPAT


941 
	~<bôs/°dio-ldbl.h
>

944 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

45 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

46 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

47 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

48 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

49 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

50 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

51 #ifde‡
__WIFCONTINUED


52 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
__BEGIN_NAMESPACE_STD


60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

73 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__BEGIN_NAMESPACE_C99


78 
__exãnsi⁄__
 struct

80 
	mquŸ
;

81 
	mªm
;

82 } 
	tŒdiv_t
;

83 
	#__Œdiv_t_deföed
 1

	)

84 
	g__END_NAMESPACE_C99


89 
	#RAND_MAX
 2147483647

	)

94 
	#EXIT_FAILURE
 1

	)

95 
	#EXIT_SUCCESS
 0

	)

99 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

100 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

103 
__BEGIN_NAMESPACE_STD


105 
	$©of
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©oi
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 
	$©ﬁ
 (c⁄° *
__≈å
)

112 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_ISOC99


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

119 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

120 
__END_NAMESPACE_C99


123 
__BEGIN_NAMESPACE_STD


125 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

126 **
__ª°ri˘
 
__íd±r
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1));

128 
__END_NAMESPACE_STD


130 #ifdef 
__USE_ISOC99


131 
__BEGIN_NAMESPACE_C99


133 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

134 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

136 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

137 **
__ª°ri˘
 
__íd±r
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 
__END_NAMESPACE_C99


142 
__BEGIN_NAMESPACE_STD


144 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

145 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

148 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

149 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 
__END_NAMESPACE_STD


153 #ifde‡
__USE_MISC


155 
__exãnsi⁄__


156 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

157 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

158 
__THROW
 
	`__n⁄nuŒ
 ((1));

160 
__exãnsi⁄__


161 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

162 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__exãnsi⁄__


170 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

174 
__exãnsi⁄__


175 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


182 #ifde‡
__USE_GNU


196 
	~<xloˇÀ.h
>

200 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

202 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

204 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

205 **
__ª°ri˘
 
__íd±r
,

206 
__ba£
, 
__loˇÀ_t
 
__loc
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

209 
__exãnsi⁄__


210 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

212 
__loˇÀ_t
 
__loc
)

213 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

215 
__exãnsi⁄__


216 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

217 **
__ª°ri˘
 
__íd±r
,

218 
__ba£
, 
__loˇÀ_t
 
__loc
)

219 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

221 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

222 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

223 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

225 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

226 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

227 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

229 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

230 **
__ª°ri˘
 
__íd±r
,

231 
__loˇÀ_t
 
__loc
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

236 #ifde‡
__USE_EXTERN_INLINES


237 
__BEGIN_NAMESPACE_STD


238 
__exã∫_ölöe
 

239 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

241  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

242 
	}
}

243 
__exã∫_ölöe
 

244 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

246  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

247 
	}
}

248 
	g__END_NAMESPACE_STD


250 #ifde‡
__USE_ISOC99


251 
__BEGIN_NAMESPACE_C99


252 
__exãnsi⁄__
 
__exã∫_ölöe
 

253 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

255  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

256 
	}
}

257 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


266 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

269 
	$a64l
 (c⁄° *
__s
)

270 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

274 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


275 
	~<sys/ty≥s.h
>

282 
	$øndom
 (Ë
__THROW
;

285 
	$§™dom
 (
__£ed
Ë
__THROW
;

291 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

292 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

296 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

299 #ifde‡
__USE_MISC


304 
	søndom_d©a


306 
öt32_t
 *
Âå
;

307 
öt32_t
 *
Ωå
;

308 
öt32_t
 *
°©e
;

309 
ønd_ty≥
;

310 
ønd_deg
;

311 
ønd_£p
;

312 
öt32_t
 *
íd_±r
;

315 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

316 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

319 
__THROW
 
	`__n⁄nuŒ
 ((2));

321 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

322 
size_t
 
__°©ñí
,

323 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

324 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

326 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

327 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

333 
__BEGIN_NAMESPACE_STD


335 
	$ønd
 (Ë
__THROW
;

337 
	$§™d
 (
__£ed
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifde‡
__USE_POSIX199506


342 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

346 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


350 
	$dønd48
 (Ë
__THROW
;

351 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

354 
	$Ã™d48
 (Ë
__THROW
;

355 
	$ƒ™d48
 (
__xsubi
[3])

356 
__THROW
 
	`__n⁄nuŒ
 ((1));

359 
	$mønd48
 (Ë
__THROW
;

360 
	$jønd48
 (
__xsubi
[3])

361 
__THROW
 
	`__n⁄nuŒ
 ((1));

364 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

365 *
	$£ed48
 (
__£ed16v
[3])

366 
__THROW
 
	`__n⁄nuŒ
 ((1));

367 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

369 #ifde‡
__USE_MISC


373 
	sdønd48_d©a


375 
__x
[3];

376 
__ﬁd_x
[3];

377 
__c
;

378 
__öô
;

379 
__exãnsi⁄__
 
__a
;

384 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

385 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$î™d48_r
 (
__xsubi
[3],

387 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

388 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

392 *
__ª°ri˘
 
__ªsu…
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

394 
	$ƒ™d48_r
 (
__xsubi
[3],

395 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

396 *
__ª°ri˘
 
__ªsu…
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

401 *
__ª°ri˘
 
__ªsu…
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

403 
	$jønd48_r
 (
__xsubi
[3],

404 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

405 *
__ª°ri˘
 
__ªsu…
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

409 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

410 
__THROW
 
	`__n⁄nuŒ
 ((2));

412 
	$£ed48_r
 (
__£ed16v
[3],

413 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

415 
	$lc⁄g48_r
 (
__∑øm
[7],

416 
dønd48_d©a
 *
__buf„r
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

423 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


424 
	#__mÆloc_™d_ˇŒoc_deföed


	)

425 
__BEGIN_NAMESPACE_STD


427 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

429 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

430 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

431 
__END_NAMESPACE_STD


434 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


435 
__BEGIN_NAMESPACE_STD


441 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

442 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

444 
	$‰ì
 (*
__±r
Ë
__THROW
;

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_MISC


449 
	$c‰ì
 (*
__±r
Ë
__THROW
;

452 #ifde‡
__USE_MISC


453 
	~<Æloˇ.h
>

456 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

457 || 
deföed
 
__USE_MISC


459 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

462 #ifde‡
__USE_XOPEN2K


464 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

465 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

468 #ifde‡
__USE_ISOC11


470 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

471 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

474 
__BEGIN_NAMESPACE_STD


476 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

480 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

482 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


484 #ifde‡
__˝lu•lus


485 "C++" 
	$©_quick_exô
 ((*
__func
) ())

486 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

488 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 
__END_NAMESPACE_STD


493 #ifdef 
__USE_MISC


496 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

497 
__THROW
 
	`__n⁄nuŒ
 ((1));

500 
__BEGIN_NAMESPACE_STD


504 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

506 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


510 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

512 
__END_NAMESPACE_STD


514 #ifde‡
__USE_ISOC99


515 
__BEGIN_NAMESPACE_C99


518 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
__END_NAMESPACE_C99


523 
__BEGIN_NAMESPACE_STD


525 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

526 
__END_NAMESPACE_STD


528 #ifde‡
__USE_GNU


531 *
	$£cuª_gëív
 (c⁄° *
__«me
)

532 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

535 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


539 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

542 #ifde‡
__USE_XOPEN2K


545 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

546 
__THROW
 
	`__n⁄nuŒ
 ((2));

549 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

552 #ifdef 
__USE_MISC


556 
	$˛óªnv
 (Ë
__THROW
;

560 #i‡
deföed
 
__USE_MISC
 \

561 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

567 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

570 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


579 #i‚de‡
__USE_FILE_OFFSET64


580 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

582 #ifde‡
__REDIRECT


583 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

584 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

586 
	#mk°emp
 
mk°emp64


	)

589 #ifde‡
__USE_LARGEFILE64


590 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

594 #ifde‡
__USE_MISC


601 #i‚de‡
__USE_FILE_OFFSET64


602 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

604 #ifde‡
__REDIRECT


605 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

606 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

608 
	#mk°emps
 
mk°emps64


	)

611 #ifde‡
__USE_LARGEFILE64


612 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

613 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__USE_XOPEN2K8


623 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 #ifde‡
__USE_GNU


633 #i‚de‡
__USE_FILE_OFFSET64


634 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__REDIRECT


637 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

638 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 
	#mko°emp
 
mko°emp64


	)

643 #ifde‡
__USE_LARGEFILE64


644 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

653 #i‚de‡
__USE_FILE_OFFSET64


654 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

655 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #ifde‡
__REDIRECT


658 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

659 
__Êags
), 
mko°emps64
)

660 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

662 
	#mko°emps
 
mko°emps64


	)

665 #ifde‡
__USE_LARGEFILE64


666 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

667 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

672 
__BEGIN_NAMESPACE_STD


677 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

678 
__END_NAMESPACE_STD


681 #ifdef 
__USE_GNU


684 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

685 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


694 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

695 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

700 #i‚de‡
__COMPAR_FN_T


701 
	#__COMPAR_FN_T


	)

702 (*
	t__com∑r_‚_t
) (const *, const *);

704 #ifdef 
__USE_GNU


705 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

708 #ifde‡
__USE_GNU


709 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

712 
__BEGIN_NAMESPACE_STD


715 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

716 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

717 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

719 #ifde‡
__USE_EXTERN_INLINES


720 
	~<bôs/°dlib-b£¨ch.h
>

725 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

726 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

727 #ifde‡
__USE_GNU


728 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

729 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

730 
	`__n⁄nuŒ
 ((1, 4));

735 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

736 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

737 
__END_NAMESPACE_STD


739 #ifde‡
__USE_ISOC99


740 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

741 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

745 
__BEGIN_NAMESPACE_STD


749 
div_t
 
	$div
 (
__numî
, 
__díom
)

750 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

751 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

752 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

753 
__END_NAMESPACE_STD


755 #ifde‡
__USE_ISOC99


756 
__BEGIN_NAMESPACE_C99


757 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

758 
__díom
)

759 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

760 
__END_NAMESPACE_C99


764 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

765 || 
deföed
 
__USE_MISC


772 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

773 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

778 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

779 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

784 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

785 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

788 #ifde‡
__USE_MISC


790 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

791 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

792 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

793 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

794 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

795 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

796 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

797 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

802 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

804 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

805 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

806 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

807 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

809 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

810 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

811 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

812 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

813 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

814 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

815 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

816 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

820 
__BEGIN_NAMESPACE_STD


823 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

826 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

827 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

830 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

834 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

835 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

837 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

838 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

839 
__THROW
;

840 
__END_NAMESPACE_STD


843 #ifde‡
__USE_MISC


848 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

852 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


859 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

860 *c⁄° *
__ª°ri˘
 
__tokís
,

861 **
__ª°ri˘
 
__vÆuï
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

866 #ifde‡
__USE_XOPEN


868 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

874 #ifde‡
__USE_XOPEN2KXSI


876 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

879 #ifde‡
__USE_XOPEN_EXTENDED


884 
	$gø¡±
 (
__fd
Ë
__THROW
;

888 
	$u∆ock±
 (
__fd
Ë
__THROW
;

893 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

896 #ifde‡
__USE_GNU


900 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

901 
__THROW
 
	`__n⁄nuŒ
 ((2));

904 
	`gë±
 ();

907 #ifde‡
__USE_MISC


911 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

915 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


918 
	$ây¶Ÿ
 (Ë
__THROW
;

921 
	~<bôs/°dlib-Êﬂt.h
>

924 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


925 
	~<bôs/°dlib.h
>

927 #ifde‡
__LDBL_COMPAT


928 
	~<bôs/°dlib-ldbl.h
>

932 #unde‡
__√ed_mÆloc_™d_ˇŒoc


934 
__END_DECLS


	@/usr/include/sys/ipc.h

18 #i‚de‡
_SYS_IPC_H


19 
	#_SYS_IPC_H
 1

	)

21 
	~<„©uªs.h
>

23 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_XOPEN
 && 
__GNUC__
 >= 2

28 
	~<bôs/ù˘y≥s.h
>

29 
	~<bôs/ùc.h
>

31 #i‚de‡
__uid_t_deföed


32 
__uid_t
 
	tuid_t
;

33 
	#__uid_t_deföed


	)

36 #i‚de‡
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

41 #i‚de‡
__mode_t_deföed


42 
__mode_t
 
	tmode_t
;

43 
	#__mode_t_deföed


	)

46 #i‚de‡
__key_t_deföed


47 
__key_t
 
	tkey_t
;

48 
	#__key_t_deföed


	)

51 
__BEGIN_DECLS


54 
key_t
 
	$·ok
 (c⁄° *
__∑th«me
, 
__¥oj_id
Ë
__THROW
;

56 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_MISC


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/shm.h

18 #i‚de‡
_SYS_SHM_H


19 
	#_SYS_SHM_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<sys/ùc.h
>

30 
	~<bôs/shm.h
>

33 
	#__√ed_time_t


	)

34 
	~<time.h
>

36 #ifde‡
__USE_XOPEN


37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

44 
__BEGIN_DECLS


50 
	$shm˘l
 (
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
Ë
__THROW
;

53 
	$shmgë
 (
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
Ë
__THROW
;

56 *
	$shm©
 (
__shmid
, c⁄° *
__shmaddr
, 
__shmÊg
)

57 
__THROW
;

60 
	$shmdt
 (c⁄° *
__shmaddr
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	#__√ed_gë›t


	)

873 
	~<gë›t.h
>

877 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


881 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #i‡
deföed
 
__USE_MISC


888 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

893 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

899 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

901 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

908 
	$vh™gup
 (Ë
__THROW
;

911 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

919 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

920 
size_t
 
__off£t
, 
__sˇÀ
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1));

927 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

931 *
	$gëu£rshñl
 (Ë
__THROW
;

932 
	$ídu£rshñl
 (Ë
__THROW
;

933 
	$£tu£rshñl
 (Ë
__THROW
;

939 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

943 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

946 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

958 
	`fsync
 (
__fd
);

961 #ifde‡
__USE_GNU


964 
	$syncfs
 (
__fd
Ë
__THROW
;

968 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


971 
	`gëho°id
 ();

974 
	$sync
 (Ë
__THROW
;

977 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


980 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

985 
	$gëdèbÀsize
 (Ë
__THROW
;

991 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


994 #i‚de‡
__USE_FILE_OFFSET64


995 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

996 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

998 #ifde‡
__REDIRECT_NTH


999 
	`__REDIRECT_NTH
 (
åunˇã
,

1000 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1001 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1003 
	#åunˇã
 
åunˇã64


	)

1006 #ifde‡
__USE_LARGEFILE64


1007 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1013 #i‡
deföed
 
__USE_POSIX199309
 \

1014 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1020 #ifde‡
__REDIRECT_NTH


1021 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1022 
·runˇã64
Ë
__wur
;

1024 
	#·runˇã
 
·runˇã64


	)

1027 #ifde‡
__USE_LARGEFILE64


1028 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1034 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1035 || 
deföed
 
__USE_MISC


1039 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1045 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1049 #ifde‡
__USE_MISC


1060 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1065 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1077 
	#F_ULOCK
 0

	)

1078 
	#F_LOCK
 1

	)

1079 
	#F_TLOCK
 2

	)

1080 
	#F_TEST
 3

	)

1082 #i‚de‡
__USE_FILE_OFFSET64


1083 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1085 #ifde‡
__REDIRECT


1086 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1087 
lockf64
Ë
__wur
;

1089 
	#lockf
 
lockf64


	)

1092 #ifde‡
__USE_LARGEFILE64


1093 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1098 #ifde‡
__USE_GNU


1103 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1104 (
__exãnsi⁄__
 \

1105 ({ 
__ªsu…
; \

1106 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1107 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1108 
__ªsu…
; 
	}
}))

	)

1111 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1114 
fd©async
 (
__fûdes
);

1120 #ifdef 
__USE_XOPEN


1122 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1127 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1128 
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1148 *
	`cu£rid
 (*
__s
);

1154 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1155 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1156 (*
__∑ª¡
) (),

1157 (*
__chûd
Ë()Ë
__THROW
;

1162 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1163 
	~<bôs/uni°d.h
>

1166 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

6 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/ipc.h

18 #i‚de‡
_SYS_IPC_H


22 
	~<bôs/ty≥s.h
>

25 
	#IPC_CREAT
 01000

	)

26 
	#IPC_EXCL
 02000

	)

27 
	#IPC_NOWAIT
 04000

	)

30 
	#IPC_RMID
 0

	)

31 
	#IPC_SET
 1

	)

32 
	#IPC_STAT
 2

	)

33 #ifde‡
__USE_GNU


34 
	#IPC_INFO
 3

	)

38 
	#IPC_PRIVATE
 ((
__key_t
Ë0Ë

	)

42 
	sùc_≥rm


44 
__key_t
 
	m__key
;

45 
__uid_t
 
	muid
;

46 
__gid_t
 
	mgid
;

47 
__uid_t
 
	mcuid
;

48 
__gid_t
 
	mcgid
;

49 
	mmode
;

50 
	m__∑d1
;

51 
	m__£q
;

52 
	m__∑d2
;

53 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved1
;

54 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved2
;

	@/usr/include/bits/ipctypes.h

19 #i‚de‡
_SYS_IPC_H


23 #i‚de‡
_BITS_IPCTYPES_H


24 
	#_BITS_IPCTYPES_H
 1

	)

27 #ifde‡
__x86_64__


28 
	t__ùc_pid_t
;

30 
	t__ùc_pid_t
;

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

45 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/shm.h

18 #i‚de‡
_SYS_SHM_H


22 
	~<bôs/ty≥s.h
>

25 
	#SHM_R
 0400

	)

26 
	#SHM_W
 0200

	)

29 
	#SHM_RDONLY
 010000

	)

30 
	#SHM_RND
 020000

	)

31 
	#SHM_REMAP
 040000

	)

32 
	#SHM_EXEC
 0100000

	)

35 
	#SHM_LOCK
 11

	)

36 
	#SHM_UNLOCK
 12

	)

38 
	g__BEGIN_DECLS


41 
	#SHMLBA
 (
	`__gë∑gesize
 ())

	)

42 
	$__gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

46 
__sysˇŒ_ul⁄g_t
 
	tshm©t_t
;

49 
	sshmid_ds


51 
ùc_≥rm
 
shm_≥rm
;

52 
size_t
 
shm_£gsz
;

53 
__time_t
 
shm_©ime
;

54 #i‚de‡
__x86_64__


55 
__glibc_ª£rved1
;

57 
__time_t
 
shm_dtime
;

58 #i‚de‡
__x86_64__


59 
__glibc_ª£rved2
;

61 
__time_t
 
shm_˘ime
;

62 #i‚de‡
__x86_64__


63 
__glibc_ª£rved3
;

65 
__pid_t
 
shm_˝id
;

66 
__pid_t
 
shm_Õid
;

67 
shm©t_t
 
shm_«âch
;

68 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved4
;

69 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved5
;

72 #ifde‡
__USE_MISC


75 
	#SHM_STAT
 13

	)

76 
	#SHM_INFO
 14

	)

79 
	#SHM_DEST
 01000

	)

80 
	#SHM_LOCKED
 02000

	)

81 
	#SHM_HUGETLB
 04000

	)

82 
	#SHM_NORESERVE
 010000

	)

84 
	sshmöfo


86 
__sysˇŒ_ul⁄g_t
 
shmmax
;

87 
__sysˇŒ_ul⁄g_t
 
shmmö
;

88 
__sysˇŒ_ul⁄g_t
 
shmmni
;

89 
__sysˇŒ_ul⁄g_t
 
shm£g
;

90 
__sysˇŒ_ul⁄g_t
 
shmÆl
;

91 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved1
;

92 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved2
;

93 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved3
;

94 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved4
;

97 
	sshm_öfo


99 
u£d_ids
;

100 
__sysˇŒ_ul⁄g_t
 
shm_tŸ
;

101 
__sysˇŒ_ul⁄g_t
 
shm_rss
;

102 
__sysˇŒ_ul⁄g_t
 
shm_swp
;

103 
__sysˇŒ_ul⁄g_t
 
sw≠_©ãm±s
;

104 
__sysˇŒ_ul⁄g_t
 
sw≠_suc˚s£s
;

109 
__END_DECLS


	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

113 *
_lowî
;

114 *
_uµî
;

115 } 
si_addr_bnd
;

116 } 
_sigÁu…
;

121 
si_b™d
;

122 
si_fd
;

123 } 
_sigpﬁl
;

128 *
_ˇŒ_addr
;

129 
_sysˇŒ
;

130 
_¨ch
;

131 } 
_sigsys
;

132 } 
_sifõlds
;

133 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

137 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

138 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

139 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

140 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

141 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

142 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

143 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

144 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

145 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

146 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

147 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

148 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

149 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_lowî


	)

150 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_uµî


	)

151 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

152 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

153 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

154 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

155 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

162 
SI_ASYNCNL
 = -60,

163 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

164 
SI_TKILL
 = -6,

165 
	#SI_TKILL
 
SI_TKILL


	)

166 
SI_SIGIO
,

167 
	#SI_SIGIO
 
SI_SIGIO


	)

168 
SI_ASYNCIO
,

169 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

170 
SI_MESGQ
,

171 
	#SI_MESGQ
 
SI_MESGQ


	)

172 
SI_TIMER
,

173 
	#SI_TIMER
 
SI_TIMER


	)

174 
SI_QUEUE
,

175 
	#SI_QUEUE
 
SI_QUEUE


	)

176 
SI_USER
,

177 
	#SI_USER
 
SI_USER


	)

178 
SI_KERNEL
 = 0x80

179 
	#SI_KERNEL
 
SI_KERNEL


	)

183 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


187 
ILL_ILLOPC
 = 1,

188 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

189 
ILL_ILLOPN
,

190 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

191 
ILL_ILLADR
,

192 
	#ILL_ILLADR
 
ILL_ILLADR


	)

193 
ILL_ILLTRP
,

194 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

195 
ILL_PRVOPC
,

196 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

197 
ILL_PRVREG
,

198 
	#ILL_PRVREG
 
ILL_PRVREG


	)

199 
ILL_COPROC
,

200 
	#ILL_COPROC
 
ILL_COPROC


	)

201 
ILL_BADSTK


202 
	#ILL_BADSTK
 
ILL_BADSTK


	)

208 
FPE_INTDIV
 = 1,

209 
	#FPE_INTDIV
 
FPE_INTDIV


	)

210 
FPE_INTOVF
,

211 
	#FPE_INTOVF
 
FPE_INTOVF


	)

212 
FPE_FLTDIV
,

213 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

214 
FPE_FLTOVF
,

215 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

216 
FPE_FLTUND
,

217 
	#FPE_FLTUND
 
FPE_FLTUND


	)

218 
FPE_FLTRES
,

219 
	#FPE_FLTRES
 
FPE_FLTRES


	)

220 
FPE_FLTINV
,

221 
	#FPE_FLTINV
 
FPE_FLTINV


	)

222 
FPE_FLTSUB


223 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

229 
SEGV_MAPERR
 = 1,

230 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

231 
SEGV_ACCERR


232 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

238 
BUS_ADRALN
 = 1,

239 
	#BUS_ADRALN
 
BUS_ADRALN


	)

240 
BUS_ADRERR
,

241 
	#BUS_ADRERR
 
BUS_ADRERR


	)

242 
BUS_OBJERR
,

243 
	#BUS_OBJERR
 
BUS_OBJERR


	)

244 
BUS_MCEERR_AR
,

245 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

246 
BUS_MCEERR_AO


247 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

251 #ifde‡
__USE_XOPEN_EXTENDED


255 
TRAP_BRKPT
 = 1,

256 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

257 
TRAP_TRACE


258 
	#TRAP_TRACE
 
TRAP_TRACE


	)

262 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


266 
CLD_EXITED
 = 1,

267 
	#CLD_EXITED
 
CLD_EXITED


	)

268 
CLD_KILLED
,

269 
	#CLD_KILLED
 
CLD_KILLED


	)

270 
CLD_DUMPED
,

271 
	#CLD_DUMPED
 
CLD_DUMPED


	)

272 
CLD_TRAPPED
,

273 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

274 
CLD_STOPPED
,

275 
	#CLD_STOPPED
 
CLD_STOPPED


	)

276 
CLD_CONTINUED


277 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

283 
POLL_IN
 = 1,

284 
	#POLL_IN
 
POLL_IN


	)

285 
POLL_OUT
,

286 
	#POLL_OUT
 
POLL_OUT


	)

287 
POLL_MSG
,

288 
	#POLL_MSG
 
POLL_MSG


	)

289 
POLL_ERR
,

290 
	#POLL_ERR
 
POLL_ERR


	)

291 
POLL_PRI
,

292 
	#POLL_PRI
 
POLL_PRI


	)

293 
POLL_HUP


294 
	#POLL_HUP
 
POLL_HUP


	)

298 #unde‡
__√ed_sigöfo_t


302 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

303 && !
deföed
 
__have_sigevít_t


304 
	#__have_sigevít_t
 1

	)

307 
	#__SIGEV_MAX_SIZE
 64

	)

308 #i‡
__WORDSIZE
 == 64

309 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

311 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

315 #i‚de‡
__have_±hªad_©å_t


316 
±hªad_©å_t
 
	t±hªad_©å_t
;

317 
	#__have_±hªad_©å_t
 1

	)

320 
	ssigevít


322 
sigvÆ_t
 
sigev_vÆue
;

323 
sigev_signo
;

324 
sigev_nŸify
;

328 
_∑d
[
__SIGEV_PAD_SIZE
];

332 
__pid_t
 
_tid
;

336 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

337 
±hªad_©å_t
 *
_©åibuã
;

338 } 
_sigev_thªad
;

339 } 
_sigev_un
;

340 } 
	tsigevít_t
;

343 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

344 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

349 
SIGEV_SIGNAL
 = 0,

350 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

351 
SIGEV_NONE
,

352 
	#SIGEV_NONE
 
SIGEV_NONE


	)

353 
SIGEV_THREAD
,

354 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

356 
SIGEV_THREAD_ID
 = 4

357 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 \

228 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

229 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

230 
	#_POSIX_SOURCE
 1

	)

231 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

232 
	#_POSIX_C_SOURCE
 2

	)

233 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

234 
	#_POSIX_C_SOURCE
 199506L

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

236 
	#_POSIX_C_SOURCE
 200112L

	)

238 
	#_POSIX_C_SOURCE
 200809L

	)

240 
	#__USE_POSIX_IMPLICITLY
 1

	)

243 #i‡(
deföed
 
_POSIX_SOURCE
 \

244 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

245 || 
deföed
 
_XOPEN_SOURCE
)

246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

330 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

331 #i‡
_FORTIFY_SOURCE
 > 1

332 
	#__USE_FORTIFY_LEVEL
 2

	)

334 
	#__USE_FORTIFY_LEVEL
 1

	)

337 
	#__USE_FORTIFY_LEVEL
 0

	)

342 
	~<°dc-¥edef.h
>

350 #unde‡
__GNU_LIBRARY__


351 
	#__GNU_LIBRARY__
 6

	)

355 
	#__GLIBC__
 2

	)

356 
	#__GLIBC_MINOR__
 24

	)

358 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

359 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

362 #i‚de‡
__ASSEMBLER__


363 #i‚de‡
_SYS_CDEFS_H


364 
	~<sys/cdefs.h
>

369 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


370 
	#__USE_LARGEFILE
 1

	)

371 
	#__USE_LARGEFILE64
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/swab.h

1 #i‚de‡
_LINUX_SWAB_H


2 
	#_LINUX_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<asm/swab.h
>

12 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

13 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

14 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

16 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

17 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

18 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

19 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

20 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

22 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

23 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

24 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

25 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

26 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

27 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

28 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

29 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

30 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

32 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

33 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

34 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

36 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

37 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

38 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

46 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

48 #i‡
	`deföed
 (
__¨ch_swab16
)

49  
	`__¨ch_swab16
(
vÆ
);

51  
	`___c⁄°™t_swab16
(
vÆ
);

53 
	}
}

55 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

57 #i‡
	`deföed
(
__¨ch_swab32
)

58  
	`__¨ch_swab32
(
vÆ
);

60  
	`___c⁄°™t_swab32
(
vÆ
);

62 
	}
}

64 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

66 #i‡
	`deföed
 (
__¨ch_swab64
)

67  
	`__¨ch_swab64
(
vÆ
);

68 #ñi‡
	`deföed
(
__SWAB_64_THRU_32__
)

69 
__u32
 
h
 = 
vÆ
 >> 32;

70 
__u32
 
l
 = 
vÆ
 & ((1ULL << 32) - 1);

71  (((
__u64
)
	`__fswab32
(
l
)Ë<< 32Ë| ((__u64)(__fswab32(
h
)));

73  
	`___c⁄°™t_swab64
(
vÆ
);

75 
	}
}

77 
__ölöe__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

79 #ifde‡
__¨ch_swahw32


80  
	`__¨ch_swahw32
(
vÆ
);

82  
	`___c⁄°™t_swahw32
(
vÆ
);

84 
	}
}

86 
__ölöe__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

88 #ifde‡
__¨ch_swahb32


89  
	`__¨ch_swahb32
(
vÆ
);

91  
	`___c⁄°™t_swahb32
(
vÆ
);

93 
	}
}

99 #ifde‡
__HAVE_BUILTIN_BSWAP16__


100 
	#__swab16
(
x
Ë(
__u16
)
	`__buûtö_bsw≠16
((__u16)(x))

	)

102 
	#__swab16
(
x
) \

103 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

104 
	`___c⁄°™t_swab16
(
x
) : \

105 
	`__fswab16
(
x
))

	)

112 #ifde‡
__HAVE_BUILTIN_BSWAP32__


113 
	#__swab32
(
x
Ë(
__u32
)
	`__buûtö_bsw≠32
((__u32)(x))

	)

115 
	#__swab32
(
x
) \

116 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

117 
	`___c⁄°™t_swab32
(
x
) : \

118 
	`__fswab32
(
x
))

	)

125 #ifde‡
__HAVE_BUILTIN_BSWAP64__


126 
	#__swab64
(
x
Ë(
__u64
)
	`__buûtö_bsw≠64
((__u64)(x))

	)

128 
	#__swab64
(
x
) \

129 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

130 
	`___c⁄°™t_swab64
(
x
) : \

131 
	`__fswab64
(
x
))

	)

140 
	#__swahw32
(
x
) \

141 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

142 
	`___c⁄°™t_swahw32
(
x
) : \

143 
	`__fswahw32
(
x
))

	)

151 
	#__swahb32
(
x
) \

152 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

153 
	`___c⁄°™t_swahb32
(
x
) : \

154 
	`__fswahb32
(
x
))

	)

160 
__Æways_ölöe
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

162 #ifde‡
__¨ch_swab16p


163  
	`__¨ch_swab16p
(
p
);

165  
	`__swab16
(*
p
);

167 
	}
}

173 
__Æways_ölöe
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

175 #ifde‡
__¨ch_swab32p


176  
	`__¨ch_swab32p
(
p
);

178  
	`__swab32
(*
p
);

180 
	}
}

186 
__Æways_ölöe
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

188 #ifde‡
__¨ch_swab64p


189  
	`__¨ch_swab64p
(
p
);

191  
	`__swab64
(*
p
);

193 
	}
}

201 
__ölöe__
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

203 #ifde‡
__¨ch_swahw32p


204  
	`__¨ch_swahw32p
(
p
);

206  
	`__swahw32
(*
p
);

208 
	}
}

216 
__ölöe__
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

218 #ifde‡
__¨ch_swahb32p


219  
	`__¨ch_swahb32p
(
p
);

221  
	`__swahb32
(*
p
);

223 
	}
}

229 
__ölöe__
 
	$__swab16s
(
__u16
 *
p
)

231 #ifde‡
__¨ch_swab16s


232 
	`__¨ch_swab16s
(
p
);

234 *
p
 = 
	`__swab16p
(p);

236 
	}
}

241 
__Æways_ölöe
 
	$__swab32s
(
__u32
 *
p
)

243 #ifde‡
__¨ch_swab32s


244 
	`__¨ch_swab32s
(
p
);

246 *
p
 = 
	`__swab32p
(p);

248 
	}
}

254 
__Æways_ölöe
 
	$__swab64s
(
__u64
 *
p
)

256 #ifde‡
__¨ch_swab64s


257 
	`__¨ch_swab64s
(
p
);

259 *
p
 = 
	`__swab64p
(p);

261 
	}
}

269 
__ölöe__
 
	$__swahw32s
(
__u32
 *
p
)

271 #ifde‡
__¨ch_swahw32s


272 
	`__¨ch_swahw32s
(
p
);

274 *
p
 = 
	`__swahw32p
(p);

276 
	}
}

284 
__ölöe__
 
	$__swahb32s
(
__u32
 *
p
)

286 #ifde‡
__¨ch_swahb32s


287 
	`__¨ch_swahb32s
(
p
);

289 *
p
 = 
	`__swahb32p
(p);

291 
	}
}

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 #ifde‡
__USE_XOPEN2K


43 
	#__√ed_time•ec


	)

45 
	~<time.h
>

46 
	#__√ed_timevÆ


	)

47 
	~<bôs/time.h
>

49 #i‚de‡
__su£c⁄ds_t_deföed


50 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

51 
	#__su£c⁄ds_t_deföed


	)

56 
	t__fd_mask
;

59 #unde‡
__NFDBITS


61 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

62 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

63 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

70 #ifde‡
__USE_XOPEN


71 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

72 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

74 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

75 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

77 } 
	tfd_£t
;

80 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

82 #ifde‡
__USE_MISC


84 
__fd_mask
 
	tfd_mask
;

87 
	#NFDBITS
 
__NFDBITS


	)

92 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

93 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

94 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

95 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

98 
__BEGIN_DECLS


108 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

109 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

110 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

111 
timevÆ
 *
__ª°ri˘
 
__timeout
);

113 #ifde‡
__USE_XOPEN2K


120 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

121 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

122 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

123 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

124 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

129 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


130 
	~<bôs/£À˘2.h
>

133 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/swab.h

1 #i‚de‡
_ASM_X86_SWAB_H


2 
	#_ASM_X86_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

7 
__ölöe__
 
__u32
 
	$__¨ch_swab32
(
__u32
 
vÆ
)

9 
	`__asm__
("bsw≠»%0" : "Ù" (
vÆ
) : "0" (val));

10  
vÆ
;

11 
	}
}

12 
	#__¨ch_swab32
 
__¨ch_swab32


	)

14 
__ölöe__
 
__u64
 
	$__¨ch_swab64
(
__u64
 
vÆ
)

16 #ifde‡
__i386__


19 
__u32
 
a
;

20 
__u32
 
b
;

21 } 
s
;

22 
__u64
 
u
;

23 } 
v
;

24 
v
.
u
 = 
vÆ
;

25 
	`__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

26 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

27 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

28  
v
.
u
;

30 
	`__asm__
("bsw≠q %0" : "Ù" (
vÆ
) : "0" (val));

31  
vÆ
;

33 
	}
}

34 
	#__¨ch_swab64
 
__¨ch_swab64


	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

206 #ifde‡
__USE_XOPEN2K8


207 
	#F_DUPFD_CLOEXEC
 1030

	)

212 
	#FD_CLOEXEC
 1

	)

214 #i‚de‡
F_RDLCK


216 
	#F_RDLCK
 0

	)

217 
	#F_WRLCK
 1

	)

218 
	#F_UNLCK
 2

	)

223 #i‚de‡
F_EXLCK


224 
	#F_EXLCK
 4

	)

225 
	#F_SHLCK
 8

	)

228 #ifde‡
__USE_MISC


230 
	#LOCK_SH
 1

	)

231 
	#LOCK_EX
 2

	)

232 
	#LOCK_NB
 4

	)

234 
	#LOCK_UN
 8

	)

237 #ifde‡
__USE_GNU


238 
	#LOCK_MAND
 32

	)

239 
	#LOCK_READ
 64

	)

240 
	#LOCK_WRITE
 128

	)

241 
	#LOCK_RW
 192

	)

244 #ifde‡
__USE_GNU


246 
	#DN_ACCESS
 0x00000001

	)

247 
	#DN_MODIFY
 0x00000002

	)

248 
	#DN_CREATE
 0x00000004

	)

249 
	#DN_DELETE
 0x00000008

	)

250 
	#DN_RENAME
 0x00000010

	)

251 
	#DN_ATTRIB
 0x00000020

	)

252 
	#DN_MULTISHOT
 0x80000000

	)

256 #ifde‡
__USE_GNU


258 
	e__pid_ty≥


260 
	mF_OWNER_TID
 = 0,

261 
	mF_OWNER_PID
,

262 
	mF_OWNER_PGRP
,

263 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


267 
	sf_ow√r_ex


269 
__pid_ty≥
 
	mty≥
;

270 
__pid_t
 
	mpid
;

276 #ifdef 
__USE_MISC


277 
	#FAPPEND
 
O_APPEND


	)

278 
	#FFSYNC
 
O_FSYNC


	)

279 
	#FASYNC
 
O_ASYNC


	)

280 
	#FNONBLOCK
 
O_NONBLOCK


	)

281 
	#FNDELAY
 
O_NDELAY


	)

284 #i‚de‡
__POSIX_FADV_DONTNEED


285 
	#__POSIX_FADV_DONTNEED
 4

	)

286 
	#__POSIX_FADV_NOREUSE
 5

	)

289 #ifde‡
__USE_XOPEN2K


290 
	#POSIX_FADV_NORMAL
 0

	)

291 
	#POSIX_FADV_RANDOM
 1

	)

292 
	#POSIX_FADV_SEQUENTIAL
 2

	)

293 
	#POSIX_FADV_WILLNEED
 3

	)

294 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

295 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

299 #ifde‡
__USE_GNU


301 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

304 
	#SYNC_FILE_RANGE_WRITE
 2

	)

307 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

312 
	#SPLICE_F_MOVE
 1

	)

313 
	#SPLICE_F_NONBLOCK
 2

	)

316 
	#SPLICE_F_MORE
 4

	)

317 
	#SPLICE_F_GIFT
 8

	)

321 
	#FALLOC_FL_KEEP_SIZE
 1

	)

324 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

325 
	#FALLOC_FL_COLLAPSE_RANGE
 8

	)

328 
	#FALLOC_FL_ZERO_RANGE
 16

	)

333 
	sfûe_h™dÀ


335 
	mh™dÀ_byãs
;

336 
	mh™dÀ_ty≥
;

338 
	mf_h™dÀ
[0];

342 
	#MAX_HANDLE_SZ
 128

	)

346 #ifde‡
__USE_ATFILE


347 
	#AT_FDCWD
 -100

	)

350 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

351 
	#AT_REMOVEDIR
 0x200

	)

353 
	#AT_SYMLINK_FOLLOW
 0x400

	)

354 #ifde‡
__USE_GNU


355 
	#AT_NO_AUTOMOUNT
 0x800

	)

357 
	#AT_EMPTY_PATH
 0x1000

	)

359 
	#AT_EACCESS
 0x200

	)

363 
	g__BEGIN_DECLS


365 #ifde‡
__USE_GNU


368 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

369 
__THROW
;

376 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

377 
__Êags
);

384 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

385 
size_t
 
__cou¡
, 
__Êags
);

391 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

392 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

393 
__Êags
);

399 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

400 
__Êags
);

406 #i‚de‡
__USE_FILE_OFFSET64


407 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

409 #ifde‡
__REDIRECT


410 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

411 
__off64_t
 
__Àn
),

412 
ÁŒoˇã64
);

414 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

417 #ifde‡
__USE_LARGEFILE64


418 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

419 
__off64_t
 
__Àn
);

424 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

425 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

426 
__Êags
Ë
__THROW
;

432 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

433 
__Êags
);

437 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


35 
	#PROT_READ
 0x1

	)

36 
	#PROT_WRITE
 0x2

	)

37 
	#PROT_EXEC
 0x4

	)

38 
	#PROT_NONE
 0x0

	)

39 
	#PROT_GROWSDOWN
 0x01000000

	)

41 
	#PROT_GROWSUP
 0x02000000

	)

45 
	#MAP_SHARED
 0x01

	)

46 
	#MAP_PRIVATE
 0x02

	)

47 #ifde‡
__USE_MISC


48 
	#MAP_TYPE
 0x0‡

	)

52 
	#MAP_FIXED
 0x10

	)

53 #ifde‡
__USE_MISC


54 
	#MAP_FILE
 0

	)

55 #ifde‡
__MAP_ANONYMOUS


56 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

58 
	#MAP_ANONYMOUS
 0x20

	)

60 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

62 
	#MAP_HUGE_SHIFT
 26

	)

63 
	#MAP_HUGE_MASK
 0x3f

	)

67 
	#MS_ASYNC
 1

	)

68 
	#MS_SYNC
 4

	)

69 
	#MS_INVALIDATE
 2

	)

72 #ifde‡
__USE_GNU


73 
	#MREMAP_MAYMOVE
 1

	)

74 
	#MREMAP_FIXED
 2

	)

78 #ifde‡
__USE_MISC


79 
	#MADV_NORMAL
 0

	)

80 
	#MADV_RANDOM
 1

	)

81 
	#MADV_SEQUENTIAL
 2

	)

82 
	#MADV_WILLNEED
 3

	)

83 
	#MADV_DONTNEED
 4

	)

84 
	#MADV_FREE
 8

	)

85 
	#MADV_REMOVE
 9

	)

86 
	#MADV_DONTFORK
 10

	)

87 
	#MADV_DOFORK
 11

	)

88 
	#MADV_MERGEABLE
 12

	)

89 
	#MADV_UNMERGEABLE
 13

	)

90 
	#MADV_HUGEPAGE
 14

	)

91 
	#MADV_NOHUGEPAGE
 15

	)

92 
	#MADV_DONTDUMP
 16

	)

94 
	#MADV_DODUMP
 17

	)

95 
	#MADV_HWPOISON
 100

	)

99 #ifde‡
__USE_XOPEN2K


100 
	#POSIX_MADV_NORMAL
 0

	)

101 
	#POSIX_MADV_RANDOM
 1

	)

102 
	#POSIX_MADV_SEQUENTIAL
 2

	)

103 
	#POSIX_MADV_WILLNEED
 3

	)

104 
	#POSIX_MADV_DONTNEED
 4

	)

108 #i‚de‡
MCL_CURRENT


109 
	#MCL_CURRENT
 1

	)

110 
	#MCL_FUTURE
 2

	)

112 
	#MCL_ONFAULT
 4

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/stddef.h

3 #i‚de‡
__Æways_ölöe


4 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

57 
	#__STDC_ISO_10646__
 201605L

	)

60 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

310 #unde‡
__Æways_ölöe


311 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

313 #unde‡
__Æways_ölöe


314 
	#__Æways_ölöe
 
__ölöe


	)

319 #i‡
__GNUC_PREREQ
 (4,3)

320 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

322 
	#__©åibuã_¨tificül__


	)

334 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

335 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

336 || 
deföed
 
__GNUC_GNU_INLINE__
)))

337 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


338 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

339 
	#__exã∫_Æways_ölöe
 \

340 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

342 
	#__exã∫_ölöe
 
__ölöe


	)

343 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

347 #ifde‡
__exã∫_Æways_ölöe


348 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

353 #i‡
__GNUC_PREREQ
 (4,3)

354 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

355 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

362 #i‡!
__GNUC_PREREQ
 (2,8)

363 
	#__exãnsi⁄__


	)

367 #i‡!
__GNUC_PREREQ
 (2,92)

368 
	#__ª°ri˘


	)

374 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


375 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

377 #ifde‡
__GNUC__


378 
	#__ª°ri˘_¨r


	)

380 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

381 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

384 
	#__ª°ri˘_¨r


	)

389 #i‡
__GNUC__
 >= 3

390 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

391 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

393 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

394 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

397 #i‡(!
deföed
 
_N‹ëu∫
 \

398 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

399 && !
	$__GNUC_PREREQ
 (4,7))

400 #i‡
	`__GNUC_PREREQ
 (2,8)

401 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

403 
	#_N‹ëu∫


	)

407 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

408 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

409 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

410 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

411 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

412 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

415 
	~<bôs/w‹dsize.h
>

417 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


418 
	#__LDBL_COMPAT
 1

	)

419 #ifde‡
__REDIRECT


420 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

421 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

422 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

423 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

424 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

425 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

426 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

427 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

428 
	#__LDBL_REDIR_DECL
(
«me
) \

429 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

430 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

431 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

432 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

433 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

436 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


437 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

438 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

439 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

440 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

441 
	#__LDBL_REDIR_DECL
(
«me
)

	)

442 #ifde‡
__REDIRECT


443 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

444 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

445 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
[0];

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub___com∑t_¸óã_moduÀ


	)

12 
	#__°ub___com∑t_gë_kî√l_syms


	)

13 
	#__°ub___com∑t_quîy_moduÀ


	)

14 
	#__°ub___com∑t_u£lib


	)

15 
	#__°ub_chÊags


	)

16 
	#__°ub_Áâach


	)

17 
	#__°ub_fchÊags


	)

18 
	#__°ub_fdëach


	)

19 
	#__°ub_gëmsg


	)

20 
	#__°ub_gây


	)

21 
	#__°ub_lchmod


	)

22 
	#__°ub_nfs£rv˘l


	)

23 
	#__°ub_putmsg


	)

24 
	#__°ub_ªvoke


	)

25 
	#__°ub_£éogö


	)

26 
	#__°ub_sigªtu∫


	)

27 
	#__°ub_s°k


	)

28 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

17 
	#ENOSYS
 38

	)

19 
	#ENOTEMPTY
 39

	)

20 
	#ELOOP
 40

	)

21 
	#EWOULDBLOCK
 
EAGAIN


	)

22 
	#ENOMSG
 42

	)

23 
	#EIDRM
 43

	)

24 
	#ECHRNG
 44

	)

25 
	#EL2NSYNC
 45

	)

26 
	#EL3HLT
 46

	)

27 
	#EL3RST
 47

	)

28 
	#ELNRNG
 48

	)

29 
	#EUNATCH
 49

	)

30 
	#ENOCSI
 50

	)

31 
	#EL2HLT
 51

	)

32 
	#EBADE
 52

	)

33 
	#EBADR
 53

	)

34 
	#EXFULL
 54

	)

35 
	#ENOANO
 55

	)

36 
	#EBADRQC
 56

	)

37 
	#EBADSLT
 57

	)

39 
	#EDEADLOCK
 
EDEADLK


	)

41 
	#EBFONT
 59

	)

42 
	#ENOSTR
 60

	)

43 
	#ENODATA
 61

	)

44 
	#ETIME
 62

	)

45 
	#ENOSR
 63

	)

46 
	#ENONET
 64

	)

47 
	#ENOPKG
 65

	)

48 
	#EREMOTE
 66

	)

49 
	#ENOLINK
 67

	)

50 
	#EADV
 68

	)

51 
	#ESRMNT
 69

	)

52 
	#ECOMM
 70

	)

53 
	#EPROTO
 71

	)

54 
	#EMULTIHOP
 72

	)

55 
	#EDOTDOT
 73

	)

56 
	#EBADMSG
 74

	)

57 
	#EOVERFLOW
 75

	)

58 
	#ENOTUNIQ
 76

	)

59 
	#EBADFD
 77

	)

60 
	#EREMCHG
 78

	)

61 
	#ELIBACC
 79

	)

62 
	#ELIBBAD
 80

	)

63 
	#ELIBSCN
 81

	)

64 
	#ELIBMAX
 82

	)

65 
	#ELIBEXEC
 83

	)

66 
	#EILSEQ
 84

	)

67 
	#ERESTART
 85

	)

68 
	#ESTRPIPE
 86

	)

69 
	#EUSERS
 87

	)

70 
	#ENOTSOCK
 88

	)

71 
	#EDESTADDRREQ
 89

	)

72 
	#EMSGSIZE
 90

	)

73 
	#EPROTOTYPE
 91

	)

74 
	#ENOPROTOOPT
 92

	)

75 
	#EPROTONOSUPPORT
 93

	)

76 
	#ESOCKTNOSUPPORT
 94

	)

77 
	#EOPNOTSUPP
 95

	)

78 
	#EPFNOSUPPORT
 96

	)

79 
	#EAFNOSUPPORT
 97

	)

80 
	#EADDRINUSE
 98

	)

81 
	#EADDRNOTAVAIL
 99

	)

82 
	#ENETDOWN
 100

	)

83 
	#ENETUNREACH
 101

	)

84 
	#ENETRESET
 102

	)

85 
	#ECONNABORTED
 103

	)

86 
	#ECONNRESET
 104

	)

87 
	#ENOBUFS
 105

	)

88 
	#EISCONN
 106

	)

89 
	#ENOTCONN
 107

	)

90 
	#ESHUTDOWN
 108

	)

91 
	#ETOOMANYREFS
 109

	)

92 
	#ETIMEDOUT
 110

	)

93 
	#ECONNREFUSED
 111

	)

94 
	#EHOSTDOWN
 112

	)

95 
	#EHOSTUNREACH
 113

	)

96 
	#EALREADY
 114

	)

97 
	#EINPROGRESS
 115

	)

98 
	#ESTALE
 116

	)

99 
	#EUCLEAN
 117

	)

100 
	#ENOTNAM
 118

	)

101 
	#ENAVAIL
 119

	)

102 
	#EISNAM
 120

	)

103 
	#EREMOTEIO
 121

	)

104 
	#EDQUOT
 122

	)

106 
	#ENOMEDIUM
 123

	)

107 
	#EMEDIUMTYPE
 124

	)

108 
	#ECANCELED
 125

	)

109 
	#ENOKEY
 126

	)

110 
	#EKEYEXPIRED
 127

	)

111 
	#EKEYREVOKED
 128

	)

112 
	#EKEYREJECTED
 129

	)

115 
	#EOWNERDEAD
 130

	)

116 
	#ENOTRECOVERABLE
 131

	)

118 
	#ERFKILL
 132

	)

120 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
200
5024
apps/main.c
apps/rx_defines.h
arch/arm/include/arm.h
arch/arm/include/asm/linkage.h
arch/arm/irq_mapping.h
arch/arm/lib/div0.c
arch/arm/osport.c
arch/arm/osport.h
arch/arm/rpi/bcm2835.h
arch/arm/rpi/dispatch.c
arch/arm/rpi/interrupt.h
arch/arm/rpi/rpi_linker.c
arch/x86/bitops.h
arch/x86/byteorder.h
arch/x86/interrupt.h
arch/x86/irq_mapping.h
arch/x86/osport.c
arch/x86/osport.h
arch/x86/switch.h
arch/x86/types.h
arch/x86/x86_sim.c
arch/x86/x86_sim.h
drivers/simulator/x86sim.c
include/asm-generic/bitops/__ffs.h
include/asm-generic/bitops/__fls.h
include/asm-generic/bitops/fls.h
include/asm-generic/bitops/fls64.h
include/asm-generic/bitsperlong.h
include/charset.h
include/common.h
include/compiler.h
include/div64.h
include/rosx/bitops.h
include/rosx/byteorder/big_endian.h
include/rosx/byteorder/generic.h
include/rosx/byteorder/little_endian.h
include/rosx/byteorder/swab.h
include/rosx/compiler-gcc.h
include/rosx/compiler.h
include/rosx/ctype.h
include/rosx/errno.h
include/rosx/kernel.h
include/rosx/linkage.h
include/rosx/log2.h
include/rosx/math64.h
include/rosx/rbtree.h
include/rosx/stddef.h
include/rosx/string.h
include/rosx/types.h
include/vsprintf.h
kernel/bytepool.c
kernel/device.c
kernel/event.c
kernel/include/RosX.h
kernel/include/rx_bytepool.h
kernel/include/rx_device.h
kernel/include/rx_events.h
kernel/include/rx_init.h
kernel/include/rx_irq.h
kernel/include/rx_logger.h
kernel/include/rx_mutex.h
kernel/include/rx_queue.h
kernel/include/rx_sched.h
kernel/include/rx_semaphore.h
kernel/include/rx_task.h
kernel/include/rx_terminal.h
kernel/include/rx_timer.h
kernel/include/rx_version.h
kernel/include/rx_wait.h
kernel/init.c
kernel/irq.c
kernel/logger.c
kernel/mutex.c
kernel/queue.c
kernel/sched.c
kernel/semaphore.c
kernel/task.c
kernel/terminal.c
kernel/timer.c
kernel/wait.c
lib/charset.c
lib/ctype.c
lib/div64.c
lib/rbtree.c
lib/string.c
lib/strto.c
lib/vsprintf.c
testapps/test_mutex.c
testapps/test_mutex_priority_inheritance.c
testapps/test_mutex_timeout.c
testapps/test_semaphore.c
testapps/test_semaphore_timeout.c
testapps/test_suspend_resume.c
testapps/test_timer.c
testapps/test_timeslice.c
testapps/test_wait.c
utils/send_signal.c
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm/byteorder.h
/usr/include/asm/types.h
/usr/include/byteswap.h
/usr/include/endian.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/types.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/sys/ipc.h
/usr/include/sys/mman.h
/usr/include/sys/shm.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm-generic/types.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/endian.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/ipc.h
/usr/include/bits/ipctypes.h
/usr/include/bits/mman.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/shm.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/posix_types.h
/usr/include/linux/swab.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/posix_types.h
/usr/include/asm/swab.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/mman-linux.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/stddef.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/errno.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/bits/uio.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/posix_types.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
